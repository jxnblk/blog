{"path":"blog/mathematical-web-typography","slug":"mathematical-web-typography","title":"Mathematical Web Typography","description":null,"date":"2015-06-23T00:00:00.000Z","excerpt":"<p>When it comes to designing for the Web\nI like to follow a handful of general principles.\nFirst, design for the medium, or as Frank Chimero puts it,\nfollow <a href=\"http://frankchimero.com/writing/the-webs-grain/\">“the grain of the Web”</a>.\nThe Web is fluid - based on screens and devices of varying sizes –\nand typography on the Web should reflect that.\nSecond, design <a href=\"http://alistapart.com/article/content-out-layout\">content-out</a>,\nwhich usually means designing around a strong typographical base since the large majority of Web content and UI is text.\nAnd last, design with <a href=\"http://alistapart.com/article/more-meaningful-typography\">modular scales</a>.\nThings built on the Web should be fluid and infinitely scalable.\nUsing modular scales in a design compliments that idea and keeps things organized in the face of growing complexity.</p>\n","html":"<p>When it comes to designing for the Web\nI like to follow a handful of general principles.\nFirst, design for the medium, or as Frank Chimero puts it,\nfollow <a href=\"http://frankchimero.com/writing/the-webs-grain/\">“the grain of the Web”</a>.\nThe Web is fluid - based on screens and devices of varying sizes –\nand typography on the Web should reflect that.\nSecond, design <a href=\"http://alistapart.com/article/content-out-layout\">content-out</a>,\nwhich usually means designing around a strong typographical base since the large majority of Web content and UI is text.\nAnd last, design with <a href=\"http://alistapart.com/article/more-meaningful-typography\">modular scales</a>.\nThings built on the Web should be fluid and infinitely scalable.\nUsing modular scales in a design compliments that idea and keeps things organized in the face of growing complexity.</p>\n<!-- more -->\n<h2>Handling Complexity</h2>\n<p>Often when looking at how different sites have handled typography, I see similar problems arise.\nInstead of sticking to a limited, modular scale, any one site might have hundreds of font sizes declared\nand many more margin and padding declarations affecting the white space.\nInstead of conforming to a common convention that could help users make sense of the underlying complexity,\nthese sites have added to the cognitive overhead with little to no benefit for the user.\nIn my experience, a page rarely needs more than six font sizes to effectively convey its information hierarchy,\nand that’s exactly how many font sizes are provided with HTML headings.</p>\n<h2>Context-Specific Approaches</h2>\n<p>Instead of focusing on systems that enhance the content,\ndesign solutions often focus on singular context-specific problems and introduce\n<a href=\"https://css-tricks.com/magic-numbers-in-css/\">magic numbers</a> that quickly grow out of hand.\nThese context-specific problems should inform the larger system, not break it.\nWhile these one-off cases may seem harmless in isolation,\nthey often cause increasing complexity in a code base, and can lead to unintended side effects –\nincreasing technical debt and slowing down development speed.\nWhile there may not be any one way to solve these problems,\nmany sites try to address them with a style guide and well-defined typographic systems.</p>\n<h2>Screen Media</h2>\n<p>Many typographic conventions have been around for centuries,\nbut most of that knowledge was based on technology that involved physical pieces of metal and paper media.\nThe majority of these conventions are still applicable on the Web,\nbut I also think that the different constraints and capabilities of screens warrant some new approaches.</p>\n<h2>Start with the Defaults</h2>\n<p>The browser defaults for font sizes provide a great starting point for developing a robust typographic system.\nSince some of the values result in non-integer pixel values,\nI tend to normalize and round the numbers to make them more scalable and easier to work with.</p>\n<table>\n<thead>\n<tr>\n<th>Default</th>\n<th>Pixels</th>\n<th>Normalized</th>\n<th>Normalized Rem</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0.67em</td>\n<td>10.72px</td>\n<td>12px</td>\n<td>.75rem</td>\n</tr>\n<tr>\n<td>0.83em</td>\n<td>13.28px</td>\n<td>14px</td>\n<td>.875rem</td>\n</tr>\n<tr>\n<td>inherit</td>\n<td>16px</td>\n<td>16px</td>\n<td>1rem</td>\n</tr>\n<tr>\n<td>1.17em</td>\n<td>18.72px</td>\n<td>20px</td>\n<td>1.25rem</td>\n</tr>\n<tr>\n<td>1.5em</td>\n<td>24px</td>\n<td>24px</td>\n<td>1.5rem</td>\n</tr>\n<tr>\n<td>2em</td>\n<td>32px</td>\n<td>32px</td>\n<td>2rem</td>\n</tr>\n</tbody>\n</table>\n<h2>Powers of Two</h2>\n<p>Taking a look at the numbers used in screen-based media, there are a lot of powers of two.\nThe default font size for most browsers is 16px, which is 2<sup>4</sup>.\nScreens are digital media, and everything boils down to binary bits and bytes.\nBecause they are directly tied to graphics memory,\nnearly all screen dimensions are based on sums of powers of two, and are often divisible by 16.\nFor example, the <a href=\"https://en.wikipedia.org/wiki/Graphics_display_resolution#XGA_.281024.C3.97768.29\">XGA</a>\ndisplay standard is 1024×768px, which converted to rems (or divided by 16) is 64×48rem.</p>\n<h2>Modular Scales and Factors</h2>\n<p>Working with numbers based on powers of two can result in an entire system of sensible numbers – often integers.\nThe normalized scale above starts with 16px (1rem) as a base, and multiplies each by specific factors to create integers.\nTaking this normalized scale and setting a line-height of either 1.25 or 1.5 yields the following pixel values.</p>\n<table>\n<thead>\n<tr>\n<th>Font Size</th>\n<th>1.25 Line Height</th>\n<th>1.5 Line Height</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>12px</td>\n<td>15px</td>\n<td>18px</td>\n</tr>\n<tr>\n<td>14px</td>\n<td>17.5px</td>\n<td>21px</td>\n</tr>\n<tr>\n<td>16px</td>\n<td>20px</td>\n<td>24px</td>\n</tr>\n<tr>\n<td>20px</td>\n<td>25px</td>\n<td>30px</td>\n</tr>\n<tr>\n<td>24px</td>\n<td>30px</td>\n<td>36px</td>\n</tr>\n<tr>\n<td>32px</td>\n<td>40px</td>\n<td>48px</td>\n</tr>\n</tbody>\n</table>\n<p>These factors are all based on fractions with a power of two denominator – or based on halves and doubles.</p>\n<table>\n<thead>\n<tr>\n<th>Fraction</th>\n<th>Decimal</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1/2</td>\n<td>0.5</td>\n</tr>\n<tr>\n<td>1/4</td>\n<td>0.25</td>\n</tr>\n<tr>\n<td>1/8</td>\n<td>0.125</td>\n</tr>\n<tr>\n<td>1/16</td>\n<td>0.0625</td>\n</tr>\n</tbody>\n</table>\n<p>This is similar to how units of time in Western music are divided.\nWhile evolution gave us ten fingers, and base 10 number systems arised from that,\nworking with powers of two can be a more suitable convention for digital media.</p>\n<h2>1rem as a Base Unit</h2>\n<p>When setting type, especially body copy, 1rem doesn’t always fit the content and the typeface used,\nand it’s often desirable to use other font sizes.\nInstead of altering the base font size and dealing with less-than-ideal numbers and complex calculations,\nI keep 1rem as the default and derive all other typographic sizes from that base.\nFor example, setting body copy to 1.125rem (18px) and keeping other UI elements tied to the base 1rem\ncan make spacing and alignment adjustments much simpler and help create a natural rhythm in the visual design.</p>\n<h2>Line Height</h2>\n<p>In many stylesheets I see line-heights that are calculated as a quotient of the target line-height and the font size.\nThis sometimes leads to irrational, magic numbers that need to be rounded and can cause unforeseen and unintended consequences.</p>\n<pre><code class=\"language-css\">/* Calculated from the target line-height */\n.small-copy {\n  font-size: 14px;\n  line-height: 1.4285714; /* 20px, e.g. 20 divided by 14 */\n}\n.body-copy {\n  font-size: 18px;\n  line-height: 1.3888889; /* 25px, e.g. 25 divided by 18 */\n}\n</code></pre>\n<p>Not only do browsers handle subpixel rounding differently,\nthis can also cause issues when inheritance and scaling font sizes comes in to play,\nwhich can lead to type scales with line heights coupled to each font size\nand less DRY, less flexible code.</p>\n<p>On the other hand, keeping numbers tied to the same system yields interesting results.\nThe line heights below are computed to seemingly unrelated numbers: 21 and 27px.</p>\n<pre><code class=\"language-css\">/* Using 1rem as a base */\n.small-copy {\n  font-size: .875rem;\n  line-height: 1.5; /* 21px */\n}\n.body-copy {\n  font-size: 1.125rem;\n  line-height: 1.5; /* 27px */\n}\n</code></pre>\n<p>The sum of the font sizes .875rem and 1.125rem is 2rem,\nand the sum of these two line heights is 48px,\nwhich is the same line height for 32px type when set to 1.5.\nAlthough it might not seem like much,\nusing this approach across an entire typographic system\ncan create many subtle relationships among different parts of the design.</p>\n<h2>White Space</h2>\n<p>Font sizes and line heights are only parts of a typographic system.\nThe white space between headings, paragraphs, and other elements plays a crucial part\nin creating typographic color and visual rhythm.\nFor many of the same reasons listed above, and to stick to a content-out approach,\nI tend to base margin and padding values on numbers derived from the same typographic system\nand use a modular scale.</p>\n<p>For example, <a href=\"http://basscss.com\">Basscss</a> uses the following scale for margin and padding declarations.</p>\n<table>\n<thead>\n<tr>\n<th>Step</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>.5rem</td>\n</tr>\n<tr>\n<td>2</td>\n<td>1rem</td>\n</tr>\n<tr>\n<td>3</td>\n<td>2rem</td>\n</tr>\n<tr>\n<td>4</td>\n<td>4rem</td>\n</tr>\n</tbody>\n</table>\n<p>Each one of these values can be derived from either halving or doubling the 1rem base\nand is related to the other values used for typography.</p>\n<h2>Building Better Systems</h2>\n<p>This is just one approach to creating modular typographic systems on the Web\nand only scratches the surface on some of the underlying details.\nHopefully this can help inform building more robust,\nfault tolerant design systems that\npromote consistency, reduce technical debt,\nand make designing and developing for the Web more efficient and more enjoyable.</p>\n","tags":["css","typography","math"]}