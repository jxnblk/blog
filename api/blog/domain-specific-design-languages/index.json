{"path":"blog/domain-specific-design-languages","slug":"domain-specific-design-languages","title":"Domain-Specific Design Languages","description":null,"date":"2016-06-30T00:00:00.000Z","excerpt":"<ul>\n<li>\n<p>definition of DSL</p>\n<blockquote>\n<p>A domain-specific language (DSL) is a computer language specialized to a particular application domain. This is in contrast to a general-purpose language (GPL), which is broadly applicable across domains.\nhttps://en.wikipedia.org/wiki/Domain-specific_language\nA domain-specific language is created specifically to solve problems in a particular domain and is not intended to be able to solve problems outside it (although that may be technically possible). In contrast, general-purpose languages are created to solve problems in many domains.</p>\n</blockquote>\n</li>\n<li>\n<p>consider designing in iOS, it requires domain-specific (i.e. platform-specific) design conventions and patterns, predominantly outlined in Apple's HIG</p>\n</li>\n</ul>\n<p>Deviating from the HIG means you are creating a new design language specific to your application,\nwhich may have its benefits, but also requires more learning on the part of the user.</p>\n<p>Similarly, deviating from a web application's style guide, UI component library, or interaction pattern library\nis equivalent to creating a new design language that users need to learn.</p>\n<p>The web itself has it's own design language.\nUsers have acclimated to using blue underlined links, scrolling through pages, using standard form elements,\nas well as a plethora of other interaction design patterns.</p>\n<p>Though sometimes DSLs are appropriate,\nthe main disadvantage to using a DSL is that it requires domain-specifig knowledge of certain APIs rather than relying on more standard conventions. An example of this would be using coffeescript or JSX, rather than the standardized JavaScript (EMCAScript) syntax</p>\n","html":"<ul>\n<li>\n<p>definition of DSL</p>\n<blockquote>\n<p>A domain-specific language (DSL) is a computer language specialized to a particular application domain. This is in contrast to a general-purpose language (GPL), which is broadly applicable across domains.\nhttps://en.wikipedia.org/wiki/Domain-specific_language\nA domain-specific language is created specifically to solve problems in a particular domain and is not intended to be able to solve problems outside it (although that may be technically possible). In contrast, general-purpose languages are created to solve problems in many domains.</p>\n</blockquote>\n</li>\n<li>\n<p>consider designing in iOS, it requires domain-specific (i.e. platform-specific) design conventions and patterns, predominantly outlined in Apple's HIG</p>\n</li>\n</ul>\n<p>Deviating from the HIG means you are creating a new design language specific to your application,\nwhich may have its benefits, but also requires more learning on the part of the user.</p>\n<p>Similarly, deviating from a web application's style guide, UI component library, or interaction pattern library\nis equivalent to creating a new design language that users need to learn.</p>\n<p>The web itself has it's own design language.\nUsers have acclimated to using blue underlined links, scrolling through pages, using standard form elements,\nas well as a plethora of other interaction design patterns.</p>\n<p>Though sometimes DSLs are appropriate,\nthe main disadvantage to using a DSL is that it requires domain-specifig knowledge of certain APIs rather than relying on more standard conventions. An example of this would be using coffeescript or JSX, rather than the standardized JavaScript (EMCAScript) syntax</p>\n","draft":true}