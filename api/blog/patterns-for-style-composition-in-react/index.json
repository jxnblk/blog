{"path":"blog/patterns-for-style-composition-in-react","title":"Patterns for Style Composition in React","date":"2016-08-13T00:00:00.000Z","excerpt":"While React is extremely flexible in terms of how you can structure your application’s UI, I’ve found that a few patterns for style composition have helped me keep things organized and easy to work with.","html":"<p>While React is extremely flexible in terms of how you can structure your application’s UI,\nI’ve found that a few patterns for style composition have helped me keep things\norganized and easy to work with.\nThese aren’t hard-and-fast rules, these are simply reflections on how I’ve come to organize components in apps that I’ve worked on.</p>\n<p>I’ve gravitated towards these patterns in an effort to:</p>\n<ul>\n<li>Create a well-defined visual design system</li>\n<li>Help maintain visual consistency across an application</li>\n<li>Only deliver the CSS/styles needed to the client for a given UI – i.e. performance</li>\n<li>Increase the maintainability of visual styles</li>\n<li>Make updates and iterations on styles easier</li>\n<li>Make legacy styles easier to deprecate</li>\n<li>Create more readable components</li>\n<li>Make building out new UI easier and faster</li>\n<li>Keep styles encapsulated to help prevent collisions and unwanted side effects</li>\n<li>Create an easy-to-use component API for non-front-end developers</li>\n</ul>\n<p>Although the level of abstraction here might look like overkill for smaller projects,\nI find that this general approach has sped up my development across the board.</p>\n<p>I won’t get into approaches for state management or handling the business logic of your app,\ninstead I’ll be focusing primarily on the visible and interactive parts of the UI.</p>\n<h2>Stateless Functional UI Components</h2>\n<p>Generally, I like to keep styles separated from the parts of the app that are tied to state.\nThat means routes, views, containers, forms, layouts, etc. should not have any styling or classes in them.\nInstead, these heavy-lifting components should be composed of primarily stateless functional UI components,\nsometimes referred to as <em>presentational</em> components.\nBy keeping styling concerns separate from the application state,\npieces can become more reusable and building out new views and containers can be quicker.</p>\n<p>For example, a form component render method might look something like this:</p>\n<pre><code class=\"language-js\">render () {\n  return (\n    &#x3C;form onSubmit={this.handleSubmit}>\n      &#x3C;Heading children='Sign In' />\n      &#x3C;Input\n        name='username'\n        value={username}\n        onChange={this.handleChange} />\n      &#x3C;Input\n        type='password'\n        name='password'\n        value={password}\n        onChange={this.handleChange} />\n      &#x3C;Button\n        type='submit'\n        children='Sign In' />\n    &#x3C;/form>\n  )\n}\n</code></pre>\n<p>Notice how none of the elements have a <code>className</code> or <code>style</code> prop.\nUsing <code>className</code> or <code>style</code> props at this level <em>could</em> be considered a code smell.\nEach UI component used here encapsulates its own styling,\nand the styling simply becomes an implementation detail,\nwhich means a UI component can be updated or refactored without affecting anything else in the application.</p>\n<p>An example Button component, like the one in the form above, might look something like the following:</p>\n<pre><code class=\"language-js\">const Button = ({\n  ...props\n}) => {\n  const sx = {\n    fontFamily: 'inherit',\n    fontSize: 'inherit',\n    fontWeight: 'bold',\n    textDecoration: 'none',\n    display: 'inline-block',\n    margin: 0,\n    paddingTop: 8,\n    paddingBottom: 8,\n    paddingLeft: 16,\n    paddingRight: 16,\n    border: 0,\n    color: 'white',\n    backgroundColor: 'blue',\n    WebkitAppearance: 'none',\n    MozAppearance: 'none'\n  }\n\n  return (\n    &#x3C;button {...props} style={sx} />\n  )\n}\n</code></pre>\n<pre><code class=\"language-js\">// Button usage\n&#x3C;Button onClick={this.handleClick}>\n  Hello\n&#x3C;/Button>\n</code></pre>\n<p>I’ve used inline styles here for readability and to help demonstrate how this works,\nbut any CSS-in-JS solution can be used instead and won’t have any affect on the form component above.\nBy keeping all styling encapsulated in this component,\nthe rest of the application doesn’t need to know anything about the Button beyond its props API.</p>\n<h2>Styles Module</h2>\n<p>You may have noticed that a few property values were hard-coded into the Button example.\nGenerally, I wouldn’t recommend hard-coding things in like that.\nAny values that are likely to be used across different UI components should be split into their own module.</p>\n<p>Here is an example module to start with:</p>\n<pre><code class=\"language-js\">export const white = '#fff'\nexport const black = '#111'\nexport const blue = '#07c'\n\nexport const colors = {\n  white,\n  black,\n  blue\n}\n\nexport const space = [\n  0,\n  8,\n  16,\n  32,\n  64\n]\n\nconst styles = {\n  bold: 600,\n  space,\n  colors\n}\n\nexport default styles\n</code></pre>\n<p>And here is what the updated Button component could look like:</p>\n<pre><code class=\"language-js\">import React from 'react'\nimport { bold, space, colors } from './styles'\n\nconst Button = ({\n  ...props\n}) => {\n  const sx = {\n    fontFamily: 'inherit',\n    fontSize: 'inherit',\n    fontWeight: bold,\n    textDecoration: 'none',\n    display: 'inline-block',\n    margin: 0,\n    paddingTop: space[1],\n    paddingBottom: space[1],\n    paddingLeft: space[2],\n    paddingRight: space[2],\n    border: 0,\n    color: colors.white,\n    backgroundColor: colors.blue,\n    WebkitAppearance: 'none',\n    MozAppearance: 'none'\n  }\n\n  return (\n    &#x3C;button {...props} style={sx} />\n  )\n}\n</code></pre>\n<p>The style object could store anything related to styling that is shared across components,\nincluding borders, border radii, shadows, animation duration, etc.</p>\n<p>You could even export more elaborate combinations of styles like the following:</p>\n<pre><code class=\"language-js\">export const cardStyle = {\n  backgroundColor: white,\n  borderRadius: 3,\n  boxShadow: `0 0 4px ${shade[1]}`\n}\n</code></pre>\n<p>But I’d recommend delegating combinations like these to components and using composition instead, as I’ll show below.</p>\n<h2>Style Functions</h2>\n<p>Since we’re using JavaScript, we can also employ helper functions for styling elements.\nFor example, a function to create <code>rgba</code> values of black can be very handy.</p>\n<pre><code class=\"language-js\">const darken = (n) => `rgba(0, 0, 0, ${n})`\n\ndarken(1 / 8) // 'rgba(0, 0, 0, 0.125)'\n</code></pre>\n<p>Functions like this can then be used to create a value scale array to help keep things consistent.</p>\n<pre><code class=\"language-js\">const shade = [\n  darken(0),\n  darken(1 / 8),\n  darken(1 / 4),\n  darken(3 / 8),\n  darken(1 / 2),\n  darken(5 / 8),\n  darken(3 / 4),\n  darken(7 / 8),\n  darken(1)\n]\n\nshade[4] // 'rgba(0, 0, 0, 0.5)'\n</code></pre>\n<p>Another example would be creating a scale for margin and padding to help keep visual rhythm consistent.</p>\n<pre><code class=\"language-js\">// Modular powers of two scale\nconst scale = [\n  0,\n  8,\n  16,\n  32,\n  64\n]\n\n// Functions to get partial style objects\nconst createScaledPropertyGetter = (scale) => (prop) => (x) => {\n  return (typeof x === 'number' &#x26;&#x26; typeof scale[x] === 'number')\n    ? { [prop]: scale[x] }\n    : null\n}\nconst getScaledProperty = createScaledPropertyGetter(scale)\n\nexport const getMargin = getScaledProperty('margin')\nexport const getPadding = getScaledProperty('padding')\n</code></pre>\n<pre><code class=\"language-js\">// Style function usage\nconst Box = ({\n  m,\n  p,\n  ...props\n}) => {\n  const sx = {\n    ...getMargin(m),\n    ...getPadding(p)\n  }\n\n  return &#x3C;div {...props} style={sx} />\n}\n</code></pre>\n<pre><code class=\"language-js\">// Component usage\n&#x3C;div>\n  &#x3C;Box m={2} p={3}>\n    A box with 16px margin and 32px padding\n  &#x3C;/Box>\n&#x3C;/div>\n</code></pre>\n<h2>Npm Modules</h2>\n<p>While the rgba color function above is a fairly simple one,\nsometimes more complex color transformations can be helpful when creating UI.\nWell, we’re in luck, because we can use literally anything on <a href=\"https://npmjs.com\">npm</a>.</p>\n<p>Instead of the <code>darken</code> function above, here is an example using <a href=\"https://www.npmjs.com/package/chroma-js\"><code>chroma-js</code></a>’s <code>alpha</code> function.</p>\n<pre><code class=\"language-js\">import chroma from 'chroma-js'\n\nconst alpha = (color) => (a) => chroma(color).alpha(a).css()\n\nconst darken = alpha('#000')\n\nconst shade = [\n  darken(0),\n  darken(1 / 8),\n  darken(1 / 4),\n  // ...\n]\n</code></pre>\n<p>Using chroma, this function can work with any color from the style object.</p>\n<pre><code class=\"language-js\">const blueAlpha = [\n  alpha(blue)(0),\n  alpha(blue)(1 / 4),\n  alpha(blue)(1 / 2),\n  alpha(blue)(3 / 4),\n  alpha(blue)(1)\n]\n</code></pre>\n<h2>Base Component</h2>\n<p>Beyond just importing style values, there is a tremendous amount of flexibility\nwhen it comes to composition in React – since components are essentially just functions.\nTake the Button component from above, and we’ll change some of the style details to props to make it more reusable.</p>\n<pre><code class=\"language-js\">const Button = ({\n  big,\n  color = colors.white,\n  backgroundColor = colors.blue,\n  ...props\n}) => {\n  const sx = {\n    fontFamily: 'inherit',\n    fontSize: 'inherit',\n    fontWeight: bold,\n    textDecoration: 'none',\n    display: 'inline-block',\n    margin: 0,\n    paddingTop: big ? space[2] : space[1],\n    paddingBottom: big ? space[2] : space[1],\n    paddingLeft: space[2],\n    paddingRight: space[2],\n    border: 0,\n    color,\n    backgroundColor,\n    WebkitAppearance: 'none',\n    MozAppearance: 'none'\n  }\n\n  return (\n    &#x3C;button {...props} style={sx} />\n  )\n}\n</code></pre>\n<pre><code class=\"language-js\">// Usage example\n&#x3C;div>\n  &#x3C;Button>\n    Blue Button\n  &#x3C;/Button>\n  &#x3C;Button big backgroundColor={colors.red}>\n    Big Red Button\n  &#x3C;/Button>\n&#x3C;/div>\n</code></pre>\n<p>The <code>color</code> and <code>backgroundColor</code> properties have been moved up to the component’s props.\nAdditionally, we’ve added a <code>big</code> prop to adjust the padding top and bottom.</p>\n<p>Now this component is fine by itself, but what if we want a secondary button style?\nDoing the following would become tedious and error prone very quickly:</p>\n<pre><code class=\"language-js\">&#x3C;Button\n  color={colors.black}\n  backgroundColor={colors.lightblue}\n  children='Secondary Button' />\n</code></pre>\n<p>Instead, we can create a dedicated secondary button component.</p>\n<pre><code class=\"language-js\">import React from 'react'\nimport Button from './Button'\n\nconst ButtonSecondary = (props) => (\n  &#x3C;Button\n    {...props}\n    color={colors.black}\n    backgroundColor={colors.lightblue} />\n)\n</code></pre>\n<pre><code class=\"language-js\">// Usage example\n&#x3C;div>\n  &#x3C;Button>Normal Button&#x3C;/Button>\n  &#x3C;ButtonSecondary>Secondary Button&#x3C;/ButtonSecondary>\n&#x3C;/div>\n</code></pre>\n<p>By adjusting the props API of the base Button component, an entire set of button styles can be created.</p>\n<pre><code class=\"language-js\">const ButtonBig = (props) => &#x3C;Button {...props} big />\nconst ButtonGreen = (props) => &#x3C;Button {...props} backgroundColor={colors.green} />\nconst ButtonRed = (props) => &#x3C;Button {...props} backgroundColor={colors.red} />\nconst ButtonOutline = (props) => &#x3C;Button {...props} outline />\n</code></pre>\n<p>This pattern lends itself well to layout components as well.\nAssume we have a generic Box component that accepts props for various layout styles.\nThis base layout component can then be used to create grid system components and other primitives.</p>\n<pre><code class=\"language-js\">const Grid = (props) => (\n  &#x3C;Box {...props}\n    display='inline-block'\n    verticalAlign='top'\n    px={2} />\n)\n\nconst Half = (props) => (\n  &#x3C;Grid {...props}\n    width={1 / 2} />\n)\n\nconst Third = (props) => (\n  &#x3C;Grid {...props}\n    width={1 / 3} />\n)\n\nconst Quarter = (props) => (\n  &#x3C;Grid {...props}\n    width={1 / 4} />\n)\n\nconst Flex = (props) => (\n  &#x3C;Box {...props}\n    display='flex' />\n)\n\nconst FlexAuto = (props) => (\n  &#x3C;Box {...props}\n    flex='1 1 auto' />\n)\n</code></pre>\n<pre><code class=\"language-js\">// Usage example\n&#x3C;div>\n  &#x3C;div>\n    &#x3C;Half>Half width column&#x3C;/Half>\n    &#x3C;Half>Half width column&#x3C;/Half>\n  &#x3C;/div>\n  &#x3C;div>\n    &#x3C;Third>Third width column&#x3C;/Third>\n    &#x3C;Third>Third width column&#x3C;/Third>\n    &#x3C;Third>Third width column&#x3C;/Third>\n  &#x3C;/div>\n  &#x3C;div>\n    &#x3C;Quarter>Quarter width column&#x3C;/Quarter>\n    &#x3C;Quarter>Quarter width column&#x3C;/Quarter>\n    &#x3C;Quarter>Quarter width column&#x3C;/Quarter>\n    &#x3C;Quarter>Quarter width column&#x3C;/Quarter>\n  &#x3C;/div>\n&#x3C;/div>\n</code></pre>\n<p>Typography styles are another great candidate for building up with composition.\nBy using a base typographic component, you can help ensure consistency and keep your styling DRY.</p>\n<pre><code class=\"language-js\">import React from 'react'\nimport { alternateFont, typeScale, boldFontWeight } from './styles'\n\nconst Text = ({\n  tag = 'span',\n  size = 4,\n  alt,\n  center,\n  bold,\n  caps,\n  ...props\n}) => {\n  const Tag = tag\n  const sx = {\n    fontFamily: alt ? alternateFont : null,\n    fontSize: typeScale[size],\n    fontWeight: bold ? boldFontWeight : null,\n    textAlign: center ? 'center' : null,\n    textTransform: caps ? 'uppercase' : null\n  }\n\n  return &#x3C;Tag {...props} style={sx} />\n}\n</code></pre>\n<pre><code class=\"language-js\">const LeadText = (props) => &#x3C;Text {...props} tag='p' size={3} />\nconst Caps = (props) => &#x3C;Text {...props} caps />\nconst MetaText = (props) => &#x3C;Text {...props} size={5} caps />\nconst AltParagraph = (props) => &#x3C;Text {...props} tag='p' alt />\n\nconst CapsButton = ({ children, ...props }) => (\n  &#x3C;Button {...props}>\n    &#x3C;Caps>\n      {children}\n    &#x3C;/Caps>\n  &#x3C;/Button>\n)\n</code></pre>\n<pre><code class=\"language-js\">// Usage example\n&#x3C;div>\n  &#x3C;LeadText>\n    This is a lead with some &#x3C;Caps>all caps&#x3C;/Caps>.\n    It has a larger font size than the default paragraph.\n  &#x3C;/LeadText>\n  &#x3C;MetaText>\n    This is smaller text, like form helper copy.\n  &#x3C;/MetaText>\n&#x3C;/div>\n</code></pre>\n<p>Keep in mind, that these components are just a few examples and your needs will vary greatly on an app-by-app basis.</p>\n<h2>Higher Order Components</h2>\n<p>I’m generally a fan of keeping most of an applications state at the top level of a React tree,\noften using something like <a href=\"https://github.com/reactjs/redux\">Redux</a>.\nHowever, sometimes there are isolated UI components that only require a minimal amount of state for interaction,\nand using them as standalone components is sufficient.</p>\n<p>One example of this is a carousel<a href=\"#*\">*</a>, where the state of the current slide generally doesn’t need to persist across page views.\nInstead of combining the state of the carousel with its UI, we can create a higher order component for better reusability.\nThe higher order component will have a current slide index and have previous and next methods.</p>\n<pre><code class=\"language-js\">// Higher order component\nimport React from 'react'\n\n// This could be named something more generic like Counter or Cycle\nconst CarouselContainer = (Comp) => {\n  class Carousel extends React.Component {\n    constructor () {\n      super()\n      this.state = {\n        index: 0\n      }\n      this.previous = () => {\n        const { index } = this.state\n        if (index > 0) {\n          this.setState({ index: index - 1})\n        }\n      }\n\n      this.next = () => {\n        const { index } = this.state\n        this.setState({ index: index + 1 })\n      }\n    }\n\n    render () {\n      return (\n        &#x3C;Comp\n          {...this.props}\n          {...this.state}\n          previous={this.previous}\n          next={this.next} />\n      )\n    }\n  }\n\n  return Carousel\n}\n\nexport default CarouselContainer\n</code></pre>\n<p>Using a higher order component we can create a carousel from any number of UI elements.\nFor example, a simple carousel may have only previous and next buttons,\nwhile a more complex one might include image thumbnails of each slide across the bottom.\nBoth of these can use the same higher order component to handle their state.</p>\n<pre><code class=\"language-js\">// UI component\nconst Carousel = ({ index, ...props }) => {\n  const length = props.length || props.children.length || 0\n\n  const sx = {\n    root: {\n      overflow: 'hidden'\n    },\n    inner: {\n      whiteSpace: 'nowrap',\n      height: '100%',\n      transition: 'transform .2s ease-out',\n      transform: `translateX(${index % length * -100}%)`\n    },\n    child: {\n      display: 'inline-block',\n      verticalAlign: 'middle',\n      whiteSpace: 'normal',\n      outline: '1px solid red',\n      width: '100%',\n      height: '100%'\n    }\n  }\n\n  const children = React.Children.map(props.children, (child, i) => {\n    return (\n      &#x3C;div style={sx.child}>\n        {child}\n      &#x3C;/div>\n    )\n  })\n\n  return (\n    &#x3C;div style={sx.root}>\n      &#x3C;div style={sx.inner}>\n        {children}\n      &#x3C;/div>\n    &#x3C;/div>\n  )\n}\n</code></pre>\n<pre><code class=\"language-js\">// Final Carousel component\nconst HeroCarousel = (props) => {\n\treturn (\n    &#x3C;div>\n      &#x3C;Carousel index={props.index}>\n        &#x3C;div>Slide one&#x3C;/div>\n        &#x3C;div>Slide two&#x3C;/div>\n        &#x3C;div>Slide three&#x3C;/div>\n      &#x3C;/Carousel>\n      &#x3C;Button\n        onClick={props.previous}\n        children='Previous' />\n      &#x3C;Button\n        onClick={props.next}\n        children='Next' />\n    &#x3C;/div>\n\t)\n}\n\n// Wrap the component with the functionality from the higher order component\nexport default CarouselContainer(HeroCarousel)\n</code></pre>\n<pre><code class=\"language-js\">// Usage example\n&#x3C;div>\n  &#x3C;HeroCarousel />\n&#x3C;/div>\n</code></pre>\n<p>By keeping the styling separate from the interactive state,\nany number of carousel variations can be created from these reusable parts.</p>\n<p>Just like the base component pattern above, higher order components\ncan work well for styling layout, typography and colors.\nThis is the same pattern used in <a href=\"https://github.com/jxnblk/reflexbox\">Reflexbox</a>,\nand similar to Rebass’s <a href=\"https://github.com/jxnblk/rebass/blob/master/src/Base.js\">Base component</a>.</p>\n<h2>Further Exploration</h2>\n<p>These are just a few patterns that I’ve found to be the most useful\nwhen it comes to styling UI in a component-based system.\nI’m curious to know if anyone else has found similar patterns that they’ve found helpful,\nand I’m sure there are even more ways to create more beautiful, more flexible, and more maintainable visual design systems.</p>\n<hr>\n<h3>A Note About Performance</h3>\n<p>While there are many different ways to handle styling in a component-based app,\nmake sure to pay close attention to the size of your bundle.\nIt can be easy to create the wrong abstractions and end up with needless bloat.\nSome of the patterns in this article, when taken to their logical extreme,\ncould actually harm the performance and create a degraded experience for your end users.</p>\n<p>And remember, everything related to styling that you do should be for the user’s benefit, not your own.</p>\n<hr>\n<p><small id='*'>* Please don’t use carousels in your app. Users hate them.</small></p>\n","tags":["css","css-in-js","design systems","style guides","react"]}