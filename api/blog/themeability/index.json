{"path":"blog/themeability","slug":"themeability","title":"Themeability","description":"Using constraint-based design principles to create themeable components and UI","date":"2019-07-21T00:00:00.000Z","excerpt":"Using constraint-based design principles to create themeable components and UI","html":"<p>I've been interested in the idea of constraint-based design for a while.\nBy constraining the solution space for a particular problem,\nnew and novel ideas can emerge beyond the initial problem's scope.\nIn the context of UI design,\nwhen you don't need to decide whether a heading's font size should be 22 or 24 pixels,\nyou have more time to decide what that heading should say in the first place or whether there should be a heading at all.\nLike other tools aimed at promoting creative focus,\ndesign constraints can help create a distraction-free environment for creative thought.\nDesign constraints can be viewed as a sort of <em><a href=\"https://en.wikipedia.org/wiki/Maslow%27s_hierarchy_of_needs\">hierarchy of needs</a></em> â€“\nwhen you stop spending energy on lower-level problems,\nyou can start exploring higher level abstractions in design.</p>\n<p>I've tried to distill some of this thinking into several different open source libraries over the years,\nnotably <a href=\"https://basscss.com\">Basscss</a>, <a href=\"https://rebassjs.org\">Rebass</a>, and <a href=\"https://styled-system.com\">Styled System</a>.\nWhile libraries like Basscss and Rebass were certainly not instant hits,\nsome of their core ideas have slowly gained traction.\nAnd now, Styled System is becoming a more-and-more widely-used solution for applying visual design constraints within component libraries and design systems.</p>\n<h2>Styled System</h2>\n<p>Styled System is a solution for managing design constraint scales within certain domains of visual design.\nBy defining a typographic scale, negative space scale, color palettes, and other visual attributes in a <em>theme object</em>,\nthese values can be systematically applied to components where needed,\nwhile still allowing the flexibility to override values contextually within an application.\nStyled System provides an API to make doing the right thing easy when applying consistent styles throughout an application.\nAt its core, it's a suite of utilities to create functions for mapping design constraints to components,\nand it helps you build a UI component library with a more consistent props API.\nI like to think of it as <strong>styling as a function of design constraints</strong>.</p>\n<p>Styled System is a fairly mature library at this point and much of the recent development has been focused on utilities that expand upon this core idea.\nWhile Styled System is great for building design systems and component libraries, it's not an ideal solution in and of itself for creating white-labels or themeable user interfaces.\nStyled System is completely framework-agnostic and requires the user to create their own components that integrate with other CSS-in-JS libraries.\nIt requires you to make intentional, upfront decisions about the overall component API,\nwhich is great for corporate design systems, but shouldn't be neccessary for applying a design constraints in general-purpose UI development.\nAnd, while it is possible, Styled System doesn't provide much guidance for creating applications that are truly <em>themeable</em>.</p>\n<h2>Components as Commodity</h2>\n<p>If you look at modern web UI development, it's easy to see the large amount of duplicative efforts across different organizations.\nWhile projects like Bootstrap and Material Design have seen a non-negligible amount of adoption,\nI'm very curious as to why we, as an industry, haven't wholesale adopted off-the-shelf solutions for UI components yet.\nIt can <em>seem like</em> it's only a matter of time before we see a major shift towards commodification of the work we do today,\nbut I'm skeptical that that will ever happen.\nSometimes it feels like we, as web developers, are the <a href=\"https://en.wikipedia.org/wiki/Linotype_machine\">Linotype operators</a> of the 21st century.</p>\n<p>So why do we still spend time, energy, and money on building what is largely the same thing?\nI think that Styled System and similar libraries are impacted by what is often called <a href=\"https://en.wikipedia.org/wiki/IKEA_effect\">The IKEA Effect</a>.</p>\n<blockquote>\n<p>The IKEA effect is a cognitive bias in which consumers place a disproportionately high value on products they partially created.</p>\n</blockquote>\n<p>By providing primitive building blocks for creating a component library,\nStyled System allows users to create custom components of their own.\nI think this effect is sometimes compounded with <a href=\"https://en.wikipedia.org/wiki/Not_invented_here\"><em>Not-Invented-Here (NIH) Syndrome</em></a>,\nwhere organizations spend more time and energy on building an in-house solution when comparable off-the-shelf solutions exist.\nIt's fair to say that off-the-shelf UI component solutions do not and will never exist,\nbut if all you have is a <a href=\"https://en.wikipedia.org/wiki/Law_of_the_instrument#Abraham_Maslow\">design system hammer</a>, you start to see a lot of design-system-shaped nails.\nI suspect it will take a bit of effort to move to a higher level of abstraction.</p>\n<h2>Theming</h2>\n<p>The idea of themeable user interfaces often flies in the face of what many corporate design systems attempt to achieve.\nMost design systems are developed to ensure a consistent look and feel across hundreds of designers and developers spanning different teams in an organization,\nand they often make assumptions about the flexibility of their outward APIs that can slow down design and development velocity,\nin an effort to enforce this consistency.\nUnless the product is intended for white-label applications,\norganizations do not have good incentives to prioritize creating themeable interfaces.\nIt just doesn't make sense to spend resources on such efforts.\nBut, even when theming a user interface is not a hard requirement,\ndeveloping components with themeability in mind can be beneficial nonetheless.</p>\n<h2>Themeable Components</h2>\n<p>More and more design systems are built using third-party, open source components that handle complex logic, such as autocomplete inputs, masked inputs, date pickers, and drop downs.\nComponents like these are available today as off-the-shelf UI components,\nand it's generally not worth the cost of developing new solutions when these components can be leveraged instead.\nThe <em><a href=\"https://reactjs.org/docs/render-props.html\">render props</a></em> pattern has become popular in recent years to allow this sort of logic to be packaged into reusable components\nthat aren't concerned with the styling of the UI.\nIf these sorts of components included default, styled versions that were completely themeable,\nthe consumers of these components wouldn't need to build the rendered UI pieces at all.</p>\n<p>The problem with this idea is that every component has its own unique API,\nand all theming APIs vary from implementation to implementation.\nThe only common denominator is the low-level CSS used for any web-based component,\nand when the entirety of CSS is available for styling,\nthat still leaves a huge amount of room for interpretation.\nWithout a standard API for theming components,\nwe'll never have UI components that can truly operate as <em>interchangeable parts</em>.</p>\n<p>If even a handful of UI component libraries conformed to a common specifiation for themeable components,\nthese components could be installed in many different applications without the need to add custom styles.\nThis is the idea behind the <a href=\"https://system-ui.com/theme\">Theme Specification</a>,\nwhich is intended to be an <a href=\"/interoperability\">unopinionated foundation</a> for other libraries to be built upon.\nThe success of this effort is contingent on adoption, but even with limited success,\nthis idea could have compounding effects on efficiencies within UI development.\n<strong>The theme specification itself is a design constraint</strong>.</p>\n<h2>Theme UI</h2>\n<p><a href=\"https://theme-ui.com\">Theme UI</a> is a library that builds upon some of the ideas within this post.\nIt's a framework for building themeable and interoperable UI components based on visual design constraints.\nIt provides out-of-the-box visual design consistency without the need to build an entire UI component library upfront.\nLike Styled System, it uses a <em>theme object</em> for applying design constraints in an application,\nbut unlike Styled System it doesn't require custom UI components to apply these styles.\nBoth Theme UI and Styled System use the same underlying theme specification,\nwhich means if you've created components with Styled System, they should work in applications that are built with Theme UI.</p>\n<p>The library is still fairly new, but it's intended to lay a foundation for other components, libraries, and tools to be built upon.\nThe more libraries that adopt this theme specification, the more the users of these libraries will benefit.\nIf you're looking for a better way to apply consistent visual styles,\nbuild themeable components,\nor leverage constraint-based design principles in your work,\nI'd encourage you to check it out.\nAnd, if the ideas in this post interest you, we'd love to have help building more on top of this foundation.\nCheck out the <a href=\"https://github.com/system-ui/theme-ui\">Theme UI repo</a> to learn more.</p>\n"}