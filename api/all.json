{"posts":[{"path":"blog/interior-scene-transitions","title":"Interior Scene Transitions in Unity","date":"2023-10-19T00:00:00.000Z","excerpt":"<p><a href=\"https://novanticagame.com\">Novantica</a> is set in an open world environment with various interior scenes that asynchronously load in when the player is nearby.\nWhen I started developing the game, I was originally planning to use a top-down third-person perspective, like many of my favorite old adventure games.\nBecause it was set in an urban environment, I also wanted the player to be able to look up towards the sky and get a sense of the urban architecture.\nI tried a few different approaches to shifting the camera based on how the player was moving, but never quite achieved what I'd hoped to.\nEventually I decide to make the camera work like many third-person perspective games and allow the user to move the camera using the right stick on a controller.</p>\n<p>This approach worked really well for the open outdoor areas, but made the interior scenes feel cramped and awkward.\nMany other games just leave things to the player to figure out, but I've never really liked how games did that.\nI can't tell you how many times I would stop in the middle of a cave in <em>Tears of the Kingdom</em> just to look around and try to understand where, exactly, Link was in relation to the cave.\nThis free camera movement also made some of the puzzle mechanics in the Novantica awkward – e.g. making it difficult to see where a box needed to be pushed.</p>\n<p>Then, I had an idea I wanted to test out...</p>\n<iframe\n  title=\"Screencap of Novantica game interior camera transition\"\n  src=\"https://jxnblk-redditembed2.web.val.run?id=17at2r7&sub=Unity3D\"\n></iframe>\n<!--\n<blockquote class=\"reddit-embed-bq\" style=\"height:500px\" data-embed-height=\"500\"><a href=\"https://www.reddit.com/r/Unity3D/comments/17at2r7/interior_scene_transition_what_do_you_think/\">Interior scene transition - what do you think?</a><br> by<a href=\"https://www.reddit.com/user/vantomgames/\">u/vantomgames</a> in<a href=\"https://www.reddit.com/r/Unity3D/\">Unity3D</a></blockquote><script async=\"\" src=\"https://embed.reddit.com/widgets.js\" charset=\"UTF-8\"></script>\n-->\n<br />\n","tags":["devlog","unity","scene management"]},{"path":"blog/modular-characters-part-two","title":"Modular Characters Part II","date":"2023-10-17T00:00:00.000Z","excerpt":"<p>After redesigning the NPC characters in Novantica to use modular parts and color schemes, I realized that the approach I had set up wouldn't for the game due to poor performance.</p>\n","draft":true,"tags":["devlog","unity","blender","character design","mixamo"]},{"path":"blog/modular-characters-part-one","title":"Modular Characters Part I","date":"2023-10-16T00:00:00.000Z","excerpt":"<p><img\nsrc='/images/modular-npcs/in-game-crowd.jpg'\nalt='Screenshot from Novantica with NPC crowd walking in the street'\n/></p>\n<p>Since <a href=\"https://novanticagame.com\">Novantica</a> is set in a futuristic city, I always wanted to make sure the game had a certain level of city life – people walking around, bots zooming by, drones buzzing, trams gliding, and bikes rolling along.\nI hadn't done much 3D modeling before learning Unity, and, while modeling props, buildings, and other blockish things didn't seem to difficult, I struggled with creating humanoid characters.\nI knew that I wanted something low-poly, simple, and a bit cartoonish for the game's characters, but I'll admit that character design is probably not my strong suit.</p>\n","tags":["devlog","unity","blender","character design","mixamo"]},{"path":"blog/unity-inputsystem-detector","title":"Unity InputSystem Touchscreen Detector","date":"2023-10-05T00:00:00.000Z","excerpt":"<p>When I first started working on <a href=\"https://novanticagame.com\">Novantica</a>, I was considering releasing on iOS in addition to Steam and used TestFlight to manage development builds on my phone.\nI've always intended for the game to work well with gamepads/controllers, but I also wanted a way to play test the game using an on-screen virtual controller.</p>\n<p>I decided to use the <a href=\"https://docs.unity3d.com/Packages/com.unity.inputsystem@1.7/manual/index.html\">InputSystem</a> package so that the game would support most gamepads and it includes a very easy way to build a custom on-screen controller with the <a href=\"https://docs.unity3d.com/Packages/com.unity.inputsystem@1.7/manual/OnScreen.html\">OnScreenControl</a> component.\nFor the iOS build of the game, a custom on-screen controller shows, and automatically hides when a controller is connected.\nIt took a bit of fiddling with the InputSystem to get this to work, and I'd like to share how I set this up.</p>\n<p>First, make sure you have the InputSystem installed and enabled in your project.\nFind or create some images assets to use for any joysticks or buttons you want to use for the on-screen controller, then create a UI canvas for the controller, adding and positioning the joystick and buttons to suit your needs.</p>\n<p>The controller I had in the iOS builds looked like this:</p>\n<p>[IMAGE]</p>\n<p>Next, create a new script for hiding and showing the on-screen virtual controller.</p>\n<p>[GIST]</p>\n<p>Add this script to a parent component and hook up the UI canvas in the inspector.\nTo test this out in the editor, enter play mode, and you should see the on-screen virtual controller.\nNow connect a gamepad to your computer; the virtual controller should disappear.\nDisconnecting the physical controller should make the on-screen virtual controller reappear.</p>\n","draft":true,"tags":["devlog","unity","input","controller","mobile","touchscreen","tutorial"]},{"path":"blog/the-mystery-of-the-mustard-people","title":"The Mystery of the Mustard People","date":"2023-08-21T00:00:00.000Z","excerpt":"<p>One of the more perplexing bugs I encountered working on <a href=\"https://novanticagame.com\">Novantica</a> so far was when all the NPC extras in the game suddenly turned a greenish-yellow color.\nI had just swapped out URP materials for ones using a new shader, so I suspected that change made this happen,\nbut I didn't want to revert back to the old materials.\nTo add icing to the cake, this issue was only happening in builds, not in the editor.\nI started to dig in, but didn't realize it would take so long to track down.</p>\n","tags":["devlog","unity","materials","shaders"]},{"path":"blog/making-sourdough-and-learning-unity","title":"Making Sourdough & Learning Unity","date":"2023-08-19T00:00:00.000Z","excerpt":"<p>In March 2020, I remember the former mayor one day telling people to go out for dinner and see a show – and the next day hearing that it wasn't safe to get within six feet of another person. If you haven't been to New York before, it's not easy to walk around outside and not get within six feet of another person. In hindsight, it was relatively safe to be outdoors, but at the time, we were afraid to step outside the door for a few weeks.</p>\n<p>I also remember a lot of people thinking that the whole thing would blow over in a month or two, but everything that I had been reading made me suspect that was far too optimistic.\nAs someone who walks to get to 99% of the places I'm going and thoroughly enjoys it, I realized that I would have to pick up a few new hobbies to keep my sanity.</p>\n","tags":["devlog","unity","life"]},{"path":"blog/two-steps-forward","title":"Two Steps Forward, One Step Back","date":"2020-03-06T00:00:00.000Z","excerpt":"Building UI with design constraints from utlity CSS to CSS-in-JS"},{"path":"blog/design-graph","title":"The Design Graph","date":"2020-02-18T00:00:00.000Z","excerpt":"A constraint-based system for organizing styles in UI design"},{"path":"blog/a-conceptual-look-at-theming","title":"A Conceptual Look at Theming","date":"2019-08-10T00:00:00.000Z","excerpt":"An exploration on the relationship between global and component-based styles and a mental model for styling applications."},{"path":"blog/code-literacy","title":"Code Literacy","date":"2019-07-25T00:00:00.000Z","excerpt":"Asking should designers code is asking the wrong question."},{"path":"blog/portability","title":"Portability","date":"2019-07-23T00:00:00.000Z","excerpt":"Defining a portable file format for high level style information."},{"path":"blog/themeability","title":"Themeability","date":"2019-07-21T00:00:00.000Z","excerpt":"Using constraint-based design principles to create themeable components and UI"},{"path":"blog/the-cascade-is-not-inheritance","title":"The Cascade is Not Inheritance","date":"2019-07-20T00:00:00.000Z","excerpt":"On more than one occasion, I've heard people conflate the cascade feature of CSS with inheritance."},{"path":"blog/why-you-should-learn-css-in-js","title":"Why you should definitely learn how to use CSS-in-JS","date":"2019-07-20T00:00:00.000Z","excerpt":"CSS-in-JS solutions provide a lot of benefits over lower-level approaches"},{"path":"blog/the-modern-front-end-design-system","title":"The Modern Front-End Design System Stack","date":"2019-07-18T00:00:00.000Z","excerpt":"Tools for building modern front-end applications in 2019"},{"path":"blog/iterations-on-a-theme","title":"Iterations on a Theme","date":"2019-04-06T00:00:00.000Z","excerpt":"A look at common threads across over 500 GitHub repos"},{"path":"blog/interoperability","title":"Interoperability","date":"2019-03-21T00:00:00.000Z","excerpt":"Using standards-based approaches for UI component interoperability"},{"path":"blog/development-driven-design-systems","title":"Development-Driven Design Systems","date":"2019-03-18T00:00:00.000Z","excerpt":"<!--\nModern front end design systems\nModern front end tooling for design systems\n-->\n<p>Intro</p>\n<ul>\n<li>\n<p>Basscss, CSS Stats, Rebass, styled system</p>\n</li>\n<li>\n<p>Design system site screenshot</p>\n</li>\n<li>\n<p>Background</p>\n</li>\n<li>\n<p>Tools we use</p>\n</li>\n<li>\n<p>What's next</p>\n</li>\n<li>\n<p>Future</p>\n</li>\n</ul>\n<p>Images</p>\n<ul>\n<li>\n<p>tool correction</p>\n</li>\n<li>\n<p>Collaborators list</p>\n</li>\n<li>\n<p>Rebass HN quote</p>\n</li>\n<li>\n<p>intro</p>\n</li>\n<li>\n<p>I like tools</p>\n</li>\n<li>\n<p>Background</p>\n<ul>\n<li>Hackathon</li>\n<li>Siloed teams &#x26; separate apps</li>\n<li>\"Common Components\"</li>\n<li>No open source</li>\n<li>React, styled components, npm</li>\n<li>Catering to Developer problems</li>\n<li>GitHub: Open Source from the start</li>\n<li>Shared ownership\n<ul>\n<li>Contributors list</li>\n</ul>\n</li>\n<li>Make it so good people want to use it</li>\n<li>\"Make it go viral\"</li>\n</ul>\n</li>\n<li>\n<p>Tools we use</p>\n<ul>\n<li>React</li>\n<li>SC</li>\n<li>Jest</li>\n<li>styled-system</li>\n<li>PRs &#x26; Issues</li>\n<li>Travis CI</li>\n<li>Slack</li>\n<li>Meetings &#x26; zoom</li>\n<li>Redline specs &#x26; QA</li>\n<li>Storybook</li>\n</ul>\n</li>\n<li>\n<p>Cheap UI</p>\n<ul>\n<li>Iron triangle</li>\n<li>Lean UI</li>\n</ul>\n</li>\n<li>\n<p>What's next</p>\n<ul>\n<li>Documentation site\n<ul>\n<li>Markdown</li>\n<li>React Live</li>\n<li>Travis CI</li>\n</ul>\n</li>\n<li>html sketchapp</li>\n<li>Prototyping tools</li>\n</ul>\n</li>\n<li>\n<p>Future tooling</p>\n<ul>\n<li>Written language and math are incredible tools</li>\n<li>We teach children fractions</li>\n<li>But don't expect them to become PHDs</li>\n<li>Bicycle of the mind</li>\n<li>Code is how you ride the bike</li>\n<li>Code is about layers of abstraction</li>\n<li>Abstractions on top of HTML, CSS, &#x26; JavaScript</li>\n<li>Current tooling has not kept up with front end development</li>\n<li>Browser inspector is too low level</li>\n<li>React, ES6, Graphql</li>\n</ul>\n</li>\n<li>\n<p>Shoutouts</p>\n<ul>\n<li>Nicole Sullivan</li>\n<li>Jessica Harlee</li>\n<li>Lara Hogan</li>\n<li>Jina Anne</li>\n<li>Diana</li>\n</ul>\n</li>\n<li>\n<p>Thanks</p>\n</li>\n<li>\n<p>References</p>\n</li>\n</ul>\n<hr>\n<p>Styled System</p>\n<ul>\n<li>SC and other CSS-in-JS</li>\n<li>Components as an abstraction on top of CSS</li>\n<li>Can still drop back into low-level CSS when needed</li>\n<li>Consumers of the components don't need to think about CSS implementation</li>\n<li>Dynamic/functional styles</li>\n<li>Authoring with s2</li>\n<li>Consuming s2 components</li>\n</ul>\n<hr>\n<p>Cheap UI</p>\n<ul>\n<li>iron triangle</li>\n<li>Good cheap fast</li>\n<li>Mythical man-month brooks law</li>\n</ul>\n<p>Pretty sure that LinkNYC is some sort of self-replicating, ancient alien artificial intelligence</p>\n<p>Developer tooling for design systems</p>\n<ul>\n<li>\n<p>Developer first</p>\n</li>\n<li>\n<p>DRY</p>\n</li>\n<li>\n<p>React + styled components</p>\n<ul>\n<li>Isolated styles</li>\n<li>no clashing</li>\n<li>Overrides happen in separate apps</li>\n</ul>\n</li>\n<li>\n<p>Storybook</p>\n</li>\n<li>\n<p>npm</p>\n</li>\n<li>\n<p>Siloed teams</p>\n</li>\n<li>\n<p>Shared components</p>\n</li>\n<li>\n<p>Separate UI</p>\n</li>\n<li>\n<p>Dev velocity</p>\n</li>\n<li>\n<p>Cheap UI</p>\n<ul>\n<li>Expensive UI</li>\n<li>ROI</li>\n</ul>\n</li>\n<li>\n<p>Redline specs</p>\n</li>\n<li>\n<p>QA cycles</p>\n</li>\n<li>\n<p>Feel the pain before you want the bandaid</p>\n</li>\n<li>\n<p>Open Source</p>\n</li>\n<li>\n<p>Consumed but didn't contribute</p>\n</li>\n<li>\n<p>Open source from the start</p>\n</li>\n<li>\n<p>GitHub</p>\n</li>\n<li>\n<p>PRs and issues</p>\n</li>\n<li>\n<p>Great professional experience for developers</p>\n</li>\n<li>\n<p>don't enforce it</p>\n</li>\n<li>\n<p>Make it so good people want to use it</p>\n</li>\n<li>\n<p>Make it so that teams can make it work for them</p>\n</li>\n<li>\n<p>\"Make it go viral\"</p>\n</li>\n<li>\n<p>Styled system</p>\n</li>\n<li>\n<p>By the time the designers asked for it, we already had it in place</p>\n</li>\n</ul>\n<!--\n- Next\n\t- Docs site\n\t- Chromatic\n\t- Sketchapp html\n\t- Compositor\n-->\n<p>What makes React hard?</p>\n<ul>\n<li>\n<p>today's web is built on a layer of abstraction where design tools have not kept up</p>\n</li>\n<li>\n<p>Browser inspectors and debuggers are too low level</p>\n</li>\n<li>\n<p>typical approach: design driven</p>\n</li>\n<li>\n<p>Dev was mentally ready before design team</p>\n</li>\n<li>\n<p>Catering to Developer needs</p>\n</li>\n<li>\n<p>I’ve seen DS efforts struggle because a lack of understanding on the dev side</p>\n</li>\n<li>\n<p>DRY principle</p>\n</li>\n<li>\n<p>No one wants to write CSS</p>\n</li>\n<li>\n<p>Faster dev velocity</p>\n</li>\n<li>\n<p>\"Cheap UI\"</p>\n</li>\n<li>\n<p>Devs hate redline specs and extra QA cycles</p>\n</li>\n<li>\n<p>Right mix of tools</p>\n<ul>\n<li>react, sc, npm, storybook, graphql</li>\n</ul>\n</li>\n<li>\n<p>shared components</p>\n</li>\n<li>\n<p>Refinement of an idea</p>\n</li>\n<li>\n<p>Bootstrap, Base css, Rebass, css in js, styled components, styled system</p>\n</li>\n<li>\n<p>Siloed teams</p>\n</li>\n<li>\n<p>Encourage everyone to contribute</p>\n</li>\n</ul>\n<p>Collaboration tools</p>\n<ul>\n<li>\n<p>github (issues, PRs, pages)</p>\n</li>\n<li>\n<p>storybook</p>\n</li>\n<li>\n<p>No one wants redline specs</p>\n<ul>\n<li>feel the pain before wanting a solution</li>\n</ul>\n</li>\n<li>\n<p>Slack</p>\n</li>\n<li>\n<p>components</p>\n</li>\n<li>\n<p>React components</p>\n</li>\n<li>\n<p>Composition</p>\n</li>\n<li>\n<p>Functional composition</p>\n</li>\n<li>\n<p>HN quotes</p>\n</li>\n<li>\n<p>Atomic design slide</p>\n</li>\n<li>\n<p>theming</p>\n</li>\n<li>\n<p>Interchangeable</p>\n</li>\n<li>\n<p>Components</p>\n</li>\n<li>\n<p>Interchangeable Components</p>\n</li>\n<li>\n<p>Components as configuration</p>\n</li>\n<li>\n<p>Standard Components</p>\n</li>\n</ul>\n<!--\n\nhttps://mobile.twitter.com/markdalgleish/status/923287092704055296?ref_src=twcamp%5Eshare%7Ctwsrc%5Eios%7Ctwgr%5Eother%7Ctwcon%5E7100%7Ctwterm%5E0\n\nhttps://mobile.twitter.com/markdalgleish/status/931692003405864960?ref_src=twcamp%5Eshare%7Ctwsrc%5Eios%7Ctwgr%5Eother%7Ctwcon%5E7100%7Ctwterm%5E0\n\n\nI love tooling. I love talking about tooling.\nSo much so that I was once called a tool.\n\nhttp://blog.jess3.com/2015/03/jxnblk-an-essential-design-tool.html\n\n-->\n","draft":true},{"path":"blog/dont-boil-the-ocean","title":"Don't Boil the Ocean","date":"2019-03-18T00:00:00.000Z","excerpt":"<ul>\n<li>make it work, make it good, make it fast</li>\n<li>Readme deiven development</li>\n<li>Make it so good people want to use it</li>\n<li>Solve your own problems</li>\n<li>Build what you need</li>\n<li>Anticipate changing requirements</li>\n<li>Balance consistency with flexibility</li>\n<li>Robustness</li>\n<li>Quick to respond to changing requirements</li>\n<li>Avoid premature abstractions</li>\n</ul>\n","draft":true},{"path":"blog/building-blocks","title":"Building Blocks","date":"2019-03-17T00:00:00.000Z","excerpt":"<p>People like building blocks.</p>\n<p>IKEA effect</p>\n<ul>\n<li>basscss</li>\n<li>rebass</li>\n<li>axs</li>\n<li>styled-components &#x26; emotion</li>\n<li>styled system</li>\n</ul>\n","draft":true},{"path":"blog/the-good-the-bad-and-the-cascade","title":"The Good, The Bad, and The Cascade","date":"2019-03-17T00:00:00.000Z","excerpt":"<ul>\n<li>style properties</li>\n<li>Inheritance (not the cascade)</li>\n<li>User style sheets (the cascade)</li>\n<li>In-line block</li>\n<li>Flexbox</li>\n<li>Grid</li>\n</ul>\n<h2>Abstractions</h2>\n<ul>\n<li>Sass</li>\n<li>Variables</li>\n<li>Imports</li>\n<li>Mixins (bad)</li>\n<li>Functions (bad)</li>\n</ul>\n<h2>Standards</h2>\n<ul>\n<li>Custom properties</li>\n</ul>\n<h2>More bad stuff</h2>\n<ul>\n<li>Specificity</li>\n<li>Selectors</li>\n</ul>\n<h2>New Abstractions</h2>\n<ul>\n<li>\n<p>Hashed className s</p>\n</li>\n<li>\n<p>JS module scope</p>\n</li>\n<li>\n<p>Single build tool</p>\n</li>\n<li>\n<p>Portable code</p>\n</li>\n<li>\n<p>Runtime evaluation?</p>\n</li>\n<li>\n<p>CSS as assembly language</p>\n</li>\n</ul>\n","draft":true},{"path":"blog/the-three-tenets-of-styled-system","title":"The Three Tenets of Styled System","date":"2019-03-17T00:00:00.000Z","excerpt":"A look at some of the core ideas built into Styled System"},{"path":"blog/progressive-documentation","title":"Progressive Documentation","date":"2018-09-01T00:00:00.000Z","excerpt":"Attempting to make writing documentation easier and faster"},{"path":"blog/defining-component-apis-in-react","title":"Defining Component APIs in React","date":"2018-07-08T00:00:00.000Z","excerpt":"Over the years, I’ve noticed patterns in how I tend to approach component APIs and building out applications and libraries. The following is a collection of thoughts, opinions, and advice for defining component APIs that are meant to be more flexible, composable, and easier to understand. None of these are hard-and-fast rules, but they’ve helped guide the way I think about organizing and creating components."},{"path":"blog/negative-space-in-react","title":"Negative space in react","date":"2016-08-23T00:00:00.000Z","excerpt":"<blockquote>\n<p>White space is to be regarded as an active element, not a passive background.</p>\n<p>– Jan Tschichold</p>\n</blockquote>\n<p>Negative space is arguably the most important part of a visual composition.</p>\n<p>Just as in music, the rests, breathing room, and headspace are the key players in rhythm.\nWithout them, you just have noise.\nSimilarly, negative space in design helps create the rhythm, contrast, and motion in a visual composition.</p>\n<p>When creating visual rhythm on the web, margin and padding is the abstraction we use most commonly for negative space.\nDespite its importance in the overall composition, margin isn't usually treated as a declarative equal in component based architectures.\nAnd, because of this, it's difficult to determine whether white space belongs to the child component or the parent.</p>\n<h2>Personal bubbles</h2>\n<p>I sometimes like to think of an element’s whitespace as it's <em>personal bubble</em>.\nThat is, different societies of humans have different distances at which they consider normal to keep when having a conversation.\nSome cultures have much smaller personal bubbles than Americans,\nand when people from these cultures visit or immigrate to the US,\namericans may feel uncomfortable with how close the other person is standing to them and unconsciously back away.\nSimilarly, when Americans visit cultures with larger personal bubbles, the American is the one forcing others to back away.</p>\n<p>Components obviously aren't people but they too can differ in the amount of whitespace they need,\nand create interesting dynamics among the different parts of a UI.</p>\n<h2>Approaches</h2>\n<p>There are two predominant ways of handling whitespace in component based systems.\nThe first involves components defining their own margins, which is how\n<a href=\"http://jxnblk.com/rebass\">Rebass</a> and <a href=\"http://jxnblk.com/reflexbox\">Reflexbox</a> provide margin props.\nThe second involves a parent component wrapping child components with padded containers, similar to\nHugo Bessa’s <a href=\"http://hugobessa.com.br/2016/07/20/composable-components/#layout-components\">Spacing component</a>.\nA third, but less common approach is <a href=\"http://jxnblk.com/rebass\">Rebass‘s</a> Space component,\nwhich declaratively creates space between other elements.</p>\n<h3>Margin Props</h3>\n<p>Let's explore the first method where a component defines its own margins.</p>\n<h3>Parent Layout Component</h3>\n<p>Now let's take a look at the second method, where the parent defines margins of its children.</p>\n<h3>Space Component</h3>\n<p>Lastly, let's explore a space component that declaratively adds space between components.</p>\n<h3>Combined Approach</h3>\n<p>We can actually devise a system that allows for all of the approaches listed above.\nTo start, we need a component that manages its own margin.</p>\n<hr>\n<ul>\n<li>HOC for other components</li>\n<li>It accepts m props</li>\n<li>Next, let's create a convenience parent wrapper</li>\n<li>It could work with the m prop or go lower level and apply styles</li>\n<li>Box component is somewhere in between</li>\n<li>Parent spacer component in rebass</li>\n<li>Row, Arrange, Align,</li>\n</ul>\n<p>Each has its trade offs</p>\n<p>Declarative spacer is verbose and can be cumbersome to manage efficiently. It also destroys a convenient aspect of CSS: margin collapsing</p>\n<ul>\n<li>two elements before and after an item</li>\n<li>Changes based on context: inline vs block</li>\n<li>Desire lines from other devs, nbsp &#x26; br</li>\n</ul>\n<p>Parent spacer has its own limitations\nSimilar to traditional CSS grid sys it doesn't allow for much flexibility</p>\n","draft":true,"tags":["react","design","style","css","margin"]},{"path":"blog/patterns-for-style-composition-in-react","title":"Patterns for Style Composition in React","date":"2016-08-13T00:00:00.000Z","excerpt":"While React is extremely flexible in terms of how you can structure your application’s UI, I’ve found that a few patterns for style composition have helped me keep things organized and easy to work with.","tags":["css","css-in-js","design systems","style guides","react"]},{"path":"blog/universal-ui-components","title":"Universal UI Components","date":"2016-07-06T00:00:00.000Z","excerpt":"<p>For a while now, I’ve been interested in the idea of creating portable,\ninteroperable functional UI components that can work in any DOM rendering library,\nwhether it’s\n<a href=\"https://facebook.github.io/react/\">React</a>,\n<a href=\"https://preactjs.com\">Preact</a>,\n<a href=\"https://github.com/dominictarr/hyperscript\">hyperscript</a>,\n<a href=\"https://github.com/shama/bel\">bel</a>,\n<a href=\"https://github.com/maxogden/yo-yo\">yo-yo</a>,\nor some other library.</p>\n<p>The idea of functional UI components is a simple one: pass arguments into a function and it returns a representation of the DOM,\nusually with encapsulated styles and interactivity handled with callbacks to a global state, a la Redux.</p>\n"},{"path":"blog/domain-specific-design-languages","title":"Domain-Specific Design Languages","date":"2016-06-30T00:00:00.000Z","excerpt":"<ul>\n<li>\n<p>definition of DSL</p>\n<blockquote>\n<p>A domain-specific language (DSL) is a computer language specialized to a particular application domain. This is in contrast to a general-purpose language (GPL), which is broadly applicable across domains.\nhttps://en.wikipedia.org/wiki/Domain-specific_language\nA domain-specific language is created specifically to solve problems in a particular domain and is not intended to be able to solve problems outside it (although that may be technically possible). In contrast, general-purpose languages are created to solve problems in many domains.</p>\n</blockquote>\n</li>\n<li>\n<p>consider designing in iOS, it requires domain-specific (i.e. platform-specific) design conventions and patterns, predominantly outlined in Apple's HIG</p>\n</li>\n</ul>\n<p>Deviating from the HIG means you are creating a new design language specific to your application,\nwhich may have its benefits, but also requires more learning on the part of the user.</p>\n<p>Similarly, deviating from a web application's style guide, UI component library, or interaction pattern library\nis equivalent to creating a new design language that users need to learn.</p>\n<p>The web itself has it's own design language.\nUsers have acclimated to using blue underlined links, scrolling through pages, using standard form elements,\nas well as a plethora of other interaction design patterns.</p>\n<p>Though sometimes DSLs are appropriate,\nthe main disadvantage to using a DSL is that it requires domain-specifig knowledge of certain APIs rather than relying on more standard conventions. An example of this would be using coffeescript or JSX, rather than the standardized JavaScript (EMCAScript) syntax</p>\n","draft":true},{"path":"blog/unit-testing-ui","title":"Unit testing UI","date":"2016-06-20T00:00:00.000Z","excerpt":"<p>I recently read\n<a href=\"http://product.voxmedia.com/2016/4/20/11458814/how-designers-can-use-unit-testing-to-build-resilient-and-happy-design-systems\">this excellent article</a>,\nwhere the design team at Vox has devised a testing framework for new UI <a href=\"/blog/posts/components\">components</a> introduced into their pattern library.\nWhile the methods they suggest are excellent, and what I’d consider something that should be industry-standard in our field,\nit got me thinking that this concept could be taken a step further.\nWhat if designers wrote actual unit tests for UI components?\nWhat if those tests were actually applied in user acceptance testing, A/B tests, and tested against performance metrics?</p>\n"},{"path":"blog/components","title":"Components","date":"2016-06-17T00:00:00.000Z","excerpt":"<p>Everything in a UI is a component.\nThis includes buttons, inputs, forms, promotional modules, pages, user flows, etc.\nI use the word <em>component</em> not only because this is how the underlying code is written in libraries like React and Ember,\nbut also because pieces of a well-designed UI system should be <a href=\"https://en.wikipedia.org/wiki/Composability\">composable</a>.</p>\n"},{"path":"blog/zero-configuration-react-static-site-generator","title":"Zero-Configuration React Static Site Generator","date":"2016-02-15T00:00:00.000Z","excerpt":"<p>React is a great way to generate static HTML with a component-based UI.\nOne of the biggest hurdles to working with React is the amount of boilerplate and build configuration it takes to get going.\nI wanted to make it dead-simple to start building static pages with React\nand without the need to install tons of npm modules and configure webpack.</p>\n","tags":["react","static-site-generator"]},{"path":"blog/mathematical-web-typography","title":"Mathematical Web Typography","date":"2015-06-23T00:00:00.000Z","excerpt":"<p>When it comes to designing for the Web\nI like to follow a handful of general principles.\nFirst, design for the medium, or as Frank Chimero puts it,\nfollow <a href=\"http://frankchimero.com/writing/the-webs-grain/\">“the grain of the Web”</a>.\nThe Web is fluid - based on screens and devices of varying sizes –\nand typography on the Web should reflect that.\nSecond, design <a href=\"http://alistapart.com/article/content-out-layout\">content-out</a>,\nwhich usually means designing around a strong typographical base since the large majority of Web content and UI is text.\nAnd last, design with <a href=\"http://alistapart.com/article/more-meaningful-typography\">modular scales</a>.\nThings built on the Web should be fluid and infinitely scalable.\nUsing modular scales in a design compliments that idea and keeps things organized in the face of growing complexity.</p>\n","tags":["css","typography","math"]},{"path":"blog/mini-macbook-review","title":"Mini MacBook Review","date":"2015-06-17T00:00:00.000Z","excerpt":"Why the new MacBook might just be my favorite computer ever","tags":["apple","macbook","review","laptop","tech"]},{"path":"blog/color-palette-documentation-for-living-style-guides","title":"Color Palette Documentation for Living Style Guides","date":"2015-06-15T00:00:00.000Z","excerpt":"<p>Virtually every style guide has a color palette section in its documentation.\nMany times I’ve seen this documentation created manually, where every change to a color requires updating the values in two places – the stylesheet and the style guide.\nThis often leads to one falling out of sync with the other,\nand makes maintaining a living style guide more difficult.</p>\n<p>The problem with this approach is that the values are being defined in two different places.\nFor a true living style guide, the code should serve as the single source of truth.\nExtracting color values from CSS can help keep documentation in sync,\nexpose outdated colors, and point out opportunities for normalizing designs.</p>\n","tags":["css","color","documentation","style guide","living style guide","color contrast","accessibility","a11y"]},{"path":"blog/how-react-geomicons-works","title":"How react-geomicons Works","date":"2015-06-10T00:00:00.000Z","excerpt":"<p><a href=\"http://geomicons.com\">Geomicons Open</a> is an SVG icon set completely hand-coded using the Path element.\nThe first version’s source was built in complete SVG, but I soon realized that the wrapping SVG and Path elements were the exact same for each icon.\nIn an effort to DRY things up, I set up a rudimentary build process that would take source code containing only the Path elements’ <code>d</code> attribute value and create valid SVG code.</p>\n<p>I also built a rough icon injection script...</p>\n<ul>\n<li>geomicons-open as npm module</li>\n<li>paths object</li>\n<li>react-geomicons dependency</li>\n<li>wrapping dumb component</li>\n</ul>\n","draft":true,"tags":["react","svg","icons","geomicons"]},{"path":"blog/static-site-generation-with-react-and-webpack","title":"Static Site Generation with React and Webpack","date":"2015-06-06T00:00:00.000Z","excerpt":"<p>I’ve been dabbling with React for a few months now and using it in several small open source projects\nto better understand the technology.\nReact’s focus on reusablility, along with the ability to install and require components via npm,\nprovides an elegant way to rapidly build application UI in an efficient and consistent way.\nIt’s also a great way to handle server-side rendering and provides high cohesion between markup and display logic.</p>\n","tags":["react","webpack","static-site","tutorial"]},{"path":"blog/rethinking-variables-in-css","title":"Rethinking Variables in CSS","date":"2015-05-08T00:00:00.000Z","excerpt":"<p>CSS was first introduced as a way to reduce the complexity of using inline styles and to help separate concerns. After years of ballooning stylesheets with the same values being used over and over and losing sync, CSS preprocessors introduced variables to help keep values defined in a single place. Soon <a href=\"http://dev.w3.org/csswg/css-variables/\">custom properties</a> will be part of the CSS specification, which promises a native, more robust approach than what preprocessors can do.</p>\n<p>While variables and custom properties make updating multiple instances of the same value trivial, we often still end up with multiple instances of the same property-value definitions spread throughout a global stylesheet.</p>\n","tags":["css","variables","preprocessors","postprocessors","postcss"]},{"path":"blog/5-ways-to-not-shoot-yourself-in-the-foot-with-css","title":"5 ways to not shoot yourself in the foot with CSS","date":"2014-12-30T00:00:00.000Z","excerpt":"<ol>\n<li>Don’t make assumptions</li>\n<li>Don’t be specific</li>\n<li>Don’t override anything</li>\n<li>Don’t entangle it with markup</li>\n<li>Don’t repeat yourself</li>\n</ol>\n"},{"path":"blog/its-okay-to-look-the-same","title":"It’s Okay to Look the Same","date":"2014-04-25T00:00:00.000Z","excerpt":"<p>Every once in a while I hear someone complain about the visual homogenization of the web, and front-end frameworks often get the brunt of the attack. This visual sameness isn’t necessarily a bad thing.</p>\n"},{"path":"blog/i-dont-know-how-to-design","title":"I don’t know how to design","date":"2014-04-16T00:00:00.000Z","excerpt":"<p>I’ll admit it.</p>\n"},{"path":"blog/designing-in-the-browser-faster","title":"Designing in the Browser Faster","date":"2014-04-14T00:00:00.000Z","excerpt":"<p>I’ve been dabbling with HTML and CSS for years—building small websites for myself and friends and building prototypes to test designs. And, while I’ve been fascinated with the idea of designing in the browser for a long time, it wasn’t until recently that it’s become much, much faster for me than using traditional design software.</p>\n"},{"path":"blog/an-update-on-the-hamburger-menu","title":"An Update on the Hamburger Menu","date":"2014-04-12T00:00:00.000Z","excerpt":"<p>About a year ago, I wrote <a href=\"http://jxnblk.tumblr.com/post/36218805036/hamburgers-basements-why-not-to-use-left-nav-flyouts\">Hamburgers &#x26; Basements: Why Not to Use Left Nav Flyouts</a>.</p>\n<p>Since then, a few things have happened.</p>\n"},{"path":"blog/im-sick-of-your-tiny-tiny-type","title":"I’m Sick of Your Tiny, Tiny Type","date":"2013-01-29T00:00:00.000Z","excerpt":"<p>Your tiny type is hard to read – no, not hard to read, impossible to read. I carry my phone with me everywhere, but I always seem to forget my magnifying glass. I tap the Safari Reader button, but that’s not a solution to the problem. That’s a band-aid for your bad typesetting.</p>\n"},{"path":"blog/organizing-mobile-navigation-based-on-information-seeking-behavior","title":"Organizing Mobile Navigation Based on Information-Seeking Behavior","date":"2013-01-16T00:00:00.000Z","excerpt":"<p>When opening an application, a user should be able to understand its functionality, see relevant content, and get to where they want to go. Applications that obscure navigation with the intent of focusing on content can make finding specific information difficult. On the other hand, skewing towards too much navigation can overwhelm the user. Mobile apps should balance navigation for users with different information needs.</p>\n"},{"path":"blog/buckets-and-jumpoffs-using-content-centric-contextual-navigation","title":"Buckets and Jumpoffs: Using Content-Centric Contextual Navigation","date":"2012-12-07T00:00:00.000Z","excerpt":"<p>While table views provide a clear and simple way to navigate certain types of content, mobile should be about putting content and user goals first and navigation second. Don't overload the user with navigation choices, show meaningful content instead. Even though tab bars are great – sitting below the content, out of the way until the user needs them – there are new opportunities to explore content-centric contextual navigation when designing for mobile.</p>\n"},{"path":"blog/the-advantages-of-table-views-over-left-nav-flyouts","title":"The Advantages of Table Views Over Left Nav Flyouts","date":"2012-12-01T00:00:00.000Z","excerpt":"At first glance, these two navigation patterns seem very similar, but there are a few points that give table views a huge leg up. When dealing with a multi-tiered hierarchy or a variable amount of navigation items – such as text messages, emails, folksonomic categories, folders, files, etc. – table views can be a great solution. Lists are generally easier to scan than tiles, and vertical scrolling is an easy interaction for touchscreen mobile devices."},{"path":"blog/hamburgers-and-basements-why-not-to-use-left-nav-flyouts","title":"Hamburgers & Basements: Why Not to Use Left Nav Flyouts","date":"2012-11-21T00:00:00.000Z","excerpt":"<blockquote>\n<p><strong><em>\"Good design makes a product understandable\"</em></strong> – Dieter Rams</p>\n</blockquote>\n<p>Good navigation should do at least three things well: (1) it should allow the user to navigate; (2) it should serve as wayfinding, letting the user know where they are; and (3) it should help the user understand what the product is capable of. If your navigation is not doing these three things, something's wrong.</p>\n"},{"path":"blog/microbeats-is-the-best-journal-ive-ever-kept","title":"Microbeats is the Best Journal I’ve Ever Kept","date":"2012-11-07T00:00:00.000Z","excerpt":"<p>I’ve been producing electronic music on my computer for about a decade now, and I don’t have a whole lot to show for it. After moving to DC from Shanghai, where I played a lot of live sets and DJ gigs, I realized there wasn’t much of a music scene in DC, and I stopped playing out. After a few years, I noticed that I generally wasn’t being inspired, and I wasn’t growing much as an artist. I also noticed that I had a tendency to never finish the tracks that I’d started. I was pretty good at creating catchy little loops, but they never evolved into anything beyond that.</p>\n"}],"about":{"path":"blog/about","excerpt":"<p>Since 2020, Jackson has been teaching himself game development with Unity and is working on <a href=\"https://novanticagame.com\">Novantica</a>,\na sci-fi adventure game, set in a futuristic urban open world where time travel is common,\ngod-like AI govern the world, and a mysterious event has disrupted the city.\nYou can <a href=\"https://store.steampowered.com/app/2437530/Novantica/\">wishlist Novantica on Steam</a>.</p>\n<p>Jackson has worked on several open source projects that helped defined modern approaches to styling front end applications.\nStarting in 2013, he worked with Adam Morse and John Otander on <a href=\"https://cssstats.com\">CSS Stats</a>, a web application to statically analyze a URLs CSS.\nIn 2015, he created <a href=\"https://basscss.com\">Basscss</a>, the first atomic/utility-based CSS framework that helped popularize using multiple classnames\non a single element to style HTML.\nBasscss used a small set of theme values for font-size, color palettes, margin and padding scales, and more,\nwhich is now common practice in front end design systems.\nIf you've seen (or cursed at) code that looks like `class=\"block mb2 blue\"`, then you've seen his work.\nIn 2017, he released v1 of <a href=\"https://github.com/rebassjs/rebass\">Rebass</a> (his first time on <a href=\"https://news.ycombinator.com/item?id=14704552\">Hacker News</a>),\na library of stateless functional React components with styling, which help introduce the concept of styled UI components in React.\nExtracting the utility style props from Rebass, he created <a href=\"https://github.com/styled-system/styled-system\">Styled System</a> in 2017.\nIn 2019, he released <a href=\"https://github.com/system-ui/theme-ui\">Theme UI</a>, an extension of these ideas that provided utilities for dark mode, styling content in MDX,\nand a universal `sx` prop to style elements inline with theme-based values.</p>\n<p>Jackson has also worked on various other open source projects.\nHe created <a href=\"https://github.com/jxnblk/mdx-deck\">MDX Deck</a> as a simple way to make slide presentations with MDX.\nHelped John Otander with the conceptual design and syntax of <a href=\"https://mdxjs.com/community/about/\">MDX</a>, a combination of markdown and JSX.\nCreated several color tools, including <a href=\"https://colorable.jxnblk.com/\">Colorable</a> for testing color contrast, Palx, <a href=\"https://jxnblk.github.io/Spectral/\">Spectral</a>, and <a href=\"https://jxnblk.github.io/hello-color\">Hello Color</a>.\nSVG-related tools, including <a href=\"https://jxnblk.github.io/loading/\">Loading</a>, <a href=\"https://github.com/jxnblk/geomicons-wired\">Geomicons</a>, Microicon, <a href=\"https://jxnblk.github.io/paths/\">Paths</a>, and <a href=\"https://jxnblk.github.io/reline/\">Reline</a>.</p>\n<p>Jackson also produces electronic music, previously running a project called <a href=\"https://microbeats.cc/\">Microbeats</a>, in which each track was created in one hour or less.\nHe is one-half of <a href=\"https://soundcloud.com/mrsjxn\">MrsJxn</a>, a collaboration with Adam Morse.\nHe's also dabbled with interactive music apps like <a href=\"https://jxnblk.github.io/skullcat/\">Skullcat</a>.\nCheckout my <a href=\"https://soundcloud.com/jxnblk\">SoundCloud</a>.</p>\n<p>Jackson currently works as a design engineer at <a href=\"https://val.town\">Val Town</a>.\nPreviously, he worked at Gatsby JS, Priceline, The Grid, Etsy, Kickstarter, Stitch Fix, Living Social, and Opower.\nHe studied sociology, Japanese language, and graphic design at Marshall University.</p>\n","html":"<p>Since 2020, Jackson has been teaching himself game development with Unity and is working on <a href=\"https://novanticagame.com\">Novantica</a>,\na sci-fi adventure game, set in a futuristic urban open world where time travel is common,\ngod-like AI govern the world, and a mysterious event has disrupted the city.\nYou can <a href=\"https://store.steampowered.com/app/2437530/Novantica/\">wishlist Novantica on Steam</a>.</p>\n<p>Jackson has worked on several open source projects that helped defined modern approaches to styling front end applications.\nStarting in 2013, he worked with Adam Morse and John Otander on <a href=\"https://cssstats.com\">CSS Stats</a>, a web application to statically analyze a URLs CSS.\nIn 2015, he created <a href=\"https://basscss.com\">Basscss</a>, the first atomic/utility-based CSS framework that helped popularize using multiple classnames\non a single element to style HTML.\nBasscss used a small set of theme values for font-size, color palettes, margin and padding scales, and more,\nwhich is now common practice in front end design systems.\nIf you've seen (or cursed at) code that looks like `class=\"block mb2 blue\"`, then you've seen his work.\nIn 2017, he released v1 of <a href=\"https://github.com/rebassjs/rebass\">Rebass</a> (his first time on <a href=\"https://news.ycombinator.com/item?id=14704552\">Hacker News</a>),\na library of stateless functional React components with styling, which help introduce the concept of styled UI components in React.\nExtracting the utility style props from Rebass, he created <a href=\"https://github.com/styled-system/styled-system\">Styled System</a> in 2017.\nIn 2019, he released <a href=\"https://github.com/system-ui/theme-ui\">Theme UI</a>, an extension of these ideas that provided utilities for dark mode, styling content in MDX,\nand a universal `sx` prop to style elements inline with theme-based values.</p>\n<p>Jackson has also worked on various other open source projects.\nHe created <a href=\"https://github.com/jxnblk/mdx-deck\">MDX Deck</a> as a simple way to make slide presentations with MDX.\nHelped John Otander with the conceptual design and syntax of <a href=\"https://mdxjs.com/community/about/\">MDX</a>, a combination of markdown and JSX.\nCreated several color tools, including <a href=\"https://colorable.jxnblk.com/\">Colorable</a> for testing color contrast, Palx, <a href=\"https://jxnblk.github.io/Spectral/\">Spectral</a>, and <a href=\"https://jxnblk.github.io/hello-color\">Hello Color</a>.\nSVG-related tools, including <a href=\"https://jxnblk.github.io/loading/\">Loading</a>, <a href=\"https://github.com/jxnblk/geomicons-wired\">Geomicons</a>, Microicon, <a href=\"https://jxnblk.github.io/paths/\">Paths</a>, and <a href=\"https://jxnblk.github.io/reline/\">Reline</a>.</p>\n<p>Jackson also produces electronic music, previously running a project called <a href=\"https://microbeats.cc/\">Microbeats</a>, in which each track was created in one hour or less.\nHe is one-half of <a href=\"https://soundcloud.com/mrsjxn\">MrsJxn</a>, a collaboration with Adam Morse.\nHe's also dabbled with interactive music apps like <a href=\"https://jxnblk.github.io/skullcat/\">Skullcat</a>.\nCheckout my <a href=\"https://soundcloud.com/jxnblk\">SoundCloud</a>.</p>\n<p>Jackson currently works as a design engineer at <a href=\"https://val.town\">Val Town</a>.\nPreviously, he worked at Gatsby JS, Priceline, The Grid, Etsy, Kickstarter, Stitch Fix, Living Social, and Opower.\nHe studied sociology, Japanese language, and graphic design at Marshall University.</p>\n"}}