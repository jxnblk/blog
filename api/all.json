{"posts":[{"path":"blog/interior-scene-transitions","slug":"interior-scene-transitions","title":"Interior Scene Transitions in Unity","description":null,"date":"2023-10-19T00:00:00.000Z","excerpt":"<p><a href=\"https://novanticagame.com\">Novantica</a> is set in an open world environment with various interior scenes that asynchronously load in when the player is nearby.\nWhen I started developing the game, I was originally planning to use a top-down third-person perspective, like many of my favorite old adventure games.\nBecause it was set in an urban environment, I also wanted the player to be able to look up towards the sky and get a sense of the urban architecture.\nI tried a few different approaches to shifting the camera based on how the player was moving, but never quite achieved what I'd hoped to.\nEventually I decide to make the camera work like many third-person perspective games and allow the user to move the camera using the right stick on a controller.</p>\n<p>This approach worked really well for the open outdoor areas, but made the interior scenes feel cramped and awkward.\nMany other games just leave things to the player to figure out, but I've never really liked how games did that.\nI can't tell you how many times I would stop in the middle of a cave in <em>Tears of the Kingdom</em> just to look around and try to understand where, exactly, Link was in relation to the cave.\nThis free camera movement also made some of the puzzle mechanics in the Novantica awkward – e.g. making it difficult to see where a box needed to be pushed.</p>\n<p>Then, I had an idea I wanted to test out...</p>\n<iframe\n  title=\"Screencap of Novantica game interior camera transition\"\n  src=\"https://jxnblk-redditembed2.web.val.run?id=17at2r7&sub=Unity3D\"\n  width=\"960\"\n  style=\"width:100%;aspect-ratio:16/10;border:none\"\n></iframe>\n<!--\n<blockquote class=\"reddit-embed-bq\" style=\"height:500px\" data-embed-height=\"500\"><a href=\"https://www.reddit.com/r/Unity3D/comments/17at2r7/interior_scene_transition_what_do_you_think/\">Interior scene transition - what do you think?</a><br> by<a href=\"https://www.reddit.com/user/vantomgames/\">u/vantomgames</a> in<a href=\"https://www.reddit.com/r/Unity3D/\">Unity3D</a></blockquote><script async=\"\" src=\"https://embed.reddit.com/widgets.js\" charset=\"UTF-8\"></script>\n-->\n<br />\n","html":"<p><a href=\"https://novanticagame.com\">Novantica</a> is set in an open world environment with various interior scenes that asynchronously load in when the player is nearby.\nWhen I started developing the game, I was originally planning to use a top-down third-person perspective, like many of my favorite old adventure games.\nBecause it was set in an urban environment, I also wanted the player to be able to look up towards the sky and get a sense of the urban architecture.\nI tried a few different approaches to shifting the camera based on how the player was moving, but never quite achieved what I'd hoped to.\nEventually I decide to make the camera work like many third-person perspective games and allow the user to move the camera using the right stick on a controller.</p>\n<p>This approach worked really well for the open outdoor areas, but made the interior scenes feel cramped and awkward.\nMany other games just leave things to the player to figure out, but I've never really liked how games did that.\nI can't tell you how many times I would stop in the middle of a cave in <em>Tears of the Kingdom</em> just to look around and try to understand where, exactly, Link was in relation to the cave.\nThis free camera movement also made some of the puzzle mechanics in the Novantica awkward – e.g. making it difficult to see where a box needed to be pushed.</p>\n<p>Then, I had an idea I wanted to test out...</p>\n<iframe\n  title=\"Screencap of Novantica game interior camera transition\"\n  src=\"https://jxnblk-redditembed2.web.val.run?id=17at2r7&sub=Unity3D\"\n  width=\"960\"\n  style=\"width:100%;aspect-ratio:16/10;border:none\"\n></iframe>\n<!--\n<blockquote class=\"reddit-embed-bq\" style=\"height:500px\" data-embed-height=\"500\"><a href=\"https://www.reddit.com/r/Unity3D/comments/17at2r7/interior_scene_transition_what_do_you_think/\">Interior scene transition - what do you think?</a><br> by<a href=\"https://www.reddit.com/user/vantomgames/\">u/vantomgames</a> in<a href=\"https://www.reddit.com/r/Unity3D/\">Unity3D</a></blockquote><script async=\"\" src=\"https://embed.reddit.com/widgets.js\" charset=\"UTF-8\"></script>\n-->\n<br />\n<!-- more -->\n<p>In the video above, I tested out a simple way to make the world fade away and draw focus on the interior scene when entering.\nThis felt like it gave the puzzles in these scenes a bit more breathing room and allows the player to position the camera in a top-down way without feeling claustrophobic.\nI really liked the general effect, but the implementation needed some work.</p>\n<p>This first version uses a URP <a href=\"https://docs.unity3d.com/Packages/com.unity.render-pipelines.universal@17.0/manual/camera-stacking.html\">Camera Stack</a> with the culling mask rendering the <em>Interior</em> layer, along with some of the other mechanic-related layers.\nThe world is faded out using <em>Post Exposure</em> in Post Processing's <em>Color Adjustments</em>, and the interior camera is enabled.\nThis made it so that the background color had to be black (or a dimmed world) and so that the interior would suddenly pop into view without a smooth transition.</p>\n<p>To be able to cross-fade between the two, I decided to use a RenderTexture to render the interior camera (with the interior-specific layers) and add that RenderTexture to a RawImage component that the main camera could render.\nBy controlling the alpha channel of the RawImage component, the interior scene could be faded in and out over top of the main camera's view.\nThis also gave me control of the background color used when showing this isolated interior view.\nI could render any solid background color or even be transparent to allow other objects to cover up the main camera's view.</p>\n<p>I tried using a blur effect on the view from the main camera as a background, which looked kind of cool, but felt disorienting and distracting when moving the camera around. So, I decided to stick with a solid color.</p>\n<p>Most of the logic needed for this effect is handled by a single script attached to the new interior camera.\nThis script uses a reference to the interior camera itself, a RenderTexture for the output of this camera, and a RawImage that will display the RenderTexture.\nI use LeanTween for the transition and expose the duration and timing functions for customization.\nI also have a boolean for detecting whether the interior view is active or not.</p>\n<pre><code class=\"language-cs\">using UnityEngine;\nusing UnityEngine.UI;\n\npublic class InteriorCamera : MonoBehaviour {\n  public Camera cam; // Interior layer w/ culling\n  public RenderTexture texture;\n  public RawImage output; // UI layer + UI Camera Stack\n  public float duration = 0.5f;\n  public LeanTweenType easeIn = LeanTweenType.easeInCubic;\n  public LeanTweenType easeOut = LeanTweenType.easeOutCubic;\n\n  [Header(\"State\")]\n  public bool active = false;\n}\n</code></pre>\n<p>For the method to fade into the isolated interior view, I check whether the isolated view is already active and return early if needed.\nThe interior camera and RawImage are both enabled, then I use <code>LeanTween.value</code> to pass a float to the <code>UpdateFade</code> method.\nThe <code>UpdateFade</code> method changes the alpha value of a private <code>color</code> field.\nIf I decide to transition something else in addition to the RawImage, it can be handled in <code>UpdateFade</code>.</p>\n<pre><code class=\"language-cs\">  Color color = Color.white;\n\n  public void FadeIn () {\n    if (active) return;\n    cam.enabled = true;\n    output.enabled = true;\n    LeanTween.value(gameObject, UpdateFade, 0f, 1f, duration)\n      .setEase(easeIn)\n      .setOnComplete(() => {\n        Debug.Log($\"[InteriorCamera] FadeIn\");\n      });\n    active = true;\n  }\n\n  void UpdateFade (float n) {\n    color.a = n;\n    output.color = color;\n  }\n</code></pre>\n<p>For the method to fade out, it's the same thing in reverse, but I make use of LeanTween's <code>setOnComplete</code> method to disable the camera and RawImage after the transition is complete.</p>\n<pre><code class=\"language-cs\">  public void FadeOut () {\n    if (!active) return;\n    LeanTween.value(gameObject, UpdateFade, 1f, 0f, duration)\n      .setEase(easeOut)\n      .setOnComplete(() => {\n        Debug.Log($\"[InteriorCamera] FadeOut\");\n        cam.enabled = false;\n        output.enabled = false;\n      });\n    active = false;\n  }\n</code></pre>\n<p>You can see what this looks like in the screenshots below.</p>\n<figure>\n  <img\n    src='https://blog.jxnblk.com/images/isolated-interior/isolated-interior-outside.jpg'\n    alt='Screenshot of player standing outside building'\n  />\n  <figcaption>\n    The default view in the game, where the whole world is visible\n  </figcaption>\n</figure>\n<figure>\n  <img\n    src='https://blog.jxnblk.com/images/isolated-interior/isolated-interior-inside.jpg'\n    alt='Screenshot of player standing inside building'\n  />\n  <figcaption>\n    The isolated interior view when the player enters\n  </figcaption>\n</figure>\n<p>Because <a href=\"https://novanticagame.com\">Novantica</a> supports multiple resolutions, this effect doesn't work when the resolution of the game isn't 4K.\nTo handle different resolutions and changing the resolution while playing, I added a method to set the RenderTexture to match the main camera resolution and use <code>LateUpdate</code> to check when it has changed.</p>\n<pre><code class=\"language-cs\">  float aspect = 1f;\n  int width = 3840;\n  int height = 2160;\n\n  void Start () {\n    Init();\n  }\n\n  void Init () {\n    aspect = Camera.main.aspect;\n    width = Camera.main.pixelWidth;\n    height = Camera.main.pixelHeight;\n    texture = new RenderTexture(width, height, 32);\n    cam.targetTexture = texture;\n    output.texture = texture;\n  }\n\n  void LateUpdate () {\n    if (!active) return;\n    if (Camera.main.aspect != aspect || Camera.main.pixelWidth != width) {\n      Init();\n    }\n  }\n</code></pre>\n<p>To use this script, I have an <code>InteriorTrigger</code> script that uses trigger colliders to detect when the player is inside a building.\nI use a singleton pattern in this <code>InteriorCamera</code> script to allow the trigger components to enable and disable the interior camera across different scenes (each interior is a separate Addressable scene in the game).</p>\n<p>You can use whatever makes sense for your game's architecture to enable and disable the interior camera, but the singleton setup looks something like this:</p>\n<pre><code class=\"language-cs\">  public static InteriorCamera instance;\n\n  void Awake () {\n    if (instance == null) instance = this;\n    else Destroy(this.gameObject);\n  }\n</code></pre>\n<p>The end result:</p>\n<iframe\n  title=\"Screencap of Novantica game interior camera transition\"\n  src=\"https://jxnblk-redditembed2.web.val.run?id=17bkh8g&sub=Unity3D\"\n  width=\"960\"\n  style=\"width:100%;aspect-ratio:16/10;border:none\"\n></iframe>\n<!--\n<blockquote class=\"reddit-embed-bq\" style=\"height:500px\" data-embed-height=\"500\">\n<a href=\"https://www.reddit.com/r/Unity3D/comments/17bkh8g/interior_scene_transition_take_two/\">Interior scene transition - take two </a>\n<br> by <a href=\"https://www.reddit.com/user/vantomgames/\">u/vantomgames</a> in<a href=\"https://www.reddit.com/r/Unity3D/\">Unity3D</a></blockquote><script async=\"\" src=\"https://embed.reddit.com/widgets.js\" charset=\"UTF-8\"></script>\n<br />\n-->\n<p>If you'd like to set up something similar in your project, here is the full source code for the component:</p>\n<script src=\"https://gist.github.com/jxnblk/296850435694b95569ff09347756ce9e.js\"></script>\n<!--\n\n- approach\n- code\n- results\n- tweaks/adjustments\n\n-->\n","tags":["devlog","unity","scene management"],"image":"https://blog.jxnblk.com/images/isolated-interior/devlog-04.jpg"},{"path":"blog/modular-characters-part-two","slug":"modular-characters-part-two","title":"Modular Characters Part II","description":null,"date":"2023-10-17T00:00:00.000Z","excerpt":"<p>After redesigning the NPC characters in Novantica to use modular parts and color schemes, I realized that the approach I had set up wouldn't for the game due to poor performance.</p>\n","html":"<p>After redesigning the NPC characters in Novantica to use modular parts and color schemes, I realized that the approach I had set up wouldn't for the game due to poor performance.</p>\n<!-- more -->\n<p><em>This is a two-part series. Read <a href=\"/posts/modular-characters-part-one\">Modular Characters Part I</a> here.</em></p>\n<!--\n- perf\n- other games - rendering crowds\n- GPUi thing\n- Mesh Animator\n  - magic\n  - special shader\n  - bakes animation frames into texture\n  - custom script to animate the texture\n  - trade off: memory consumption\n- exporting separate characters based on the modular parts\n  - less modular than before\n  - still using texture swap\n- first attempt\n  - baking idle, walking, sitting poses for each model\n  - 60 fps\n  - way too big\n  - instantiating a character would cause the game to pause on a frame\n- baking just idle and walking 30 FPS\n  - smooth instantiation\n- sitting NPCs\n  - tried mesh animator mesh mode, didn't work\n  - used the same idea, but baked static meshes for each pose\n    - loop each character\n    - loop each pose\n    - bake mesh\n  - standard URP shader\n  - custom script to randomize sitting pose\n- results\n  - before: 15-30 FPS on Steam Deck ~64 npcs\n  - after: 60 FPS on Steam Deck ~128 npcs\n\n-->\n","draft":true,"tags":["devlog","unity","blender","character design","mixamo"]},{"path":"blog/modular-characters-part-one","slug":"modular-characters-part-one","title":"Modular Characters Part I","description":null,"date":"2023-10-16T00:00:00.000Z","excerpt":"<p><img\nsrc='https://blog.jxnblk.com/images/modular-npcs/in-game-crowd.webp'\nalt='Screenshot from Novantica with NPC crowd walking in the street'\n/></p>\n<p>Since <a href=\"https://novanticagame.com\">Novantica</a> is set in a futuristic city, I always wanted to make sure the game had a certain level of city life – people walking around, bots zooming by, drones buzzing, trams gliding, and bikes rolling along.\nI hadn't done much 3D modeling before learning Unity, and, while modeling props, buildings, and other blockish things didn't seem to difficult, I struggled with creating humanoid characters.\nI knew that I wanted something low-poly, simple, and a bit cartoonish for the game's characters, but I'll admit that character design is probably not my strong suit.</p>\n","html":"<p><img\nsrc='https://blog.jxnblk.com/images/modular-npcs/in-game-crowd.webp'\nalt='Screenshot from Novantica with NPC crowd walking in the street'\n/></p>\n<p>Since <a href=\"https://novanticagame.com\">Novantica</a> is set in a futuristic city, I always wanted to make sure the game had a certain level of city life – people walking around, bots zooming by, drones buzzing, trams gliding, and bikes rolling along.\nI hadn't done much 3D modeling before learning Unity, and, while modeling props, buildings, and other blockish things didn't seem to difficult, I struggled with creating humanoid characters.\nI knew that I wanted something low-poly, simple, and a bit cartoonish for the game's characters, but I'll admit that character design is probably not my strong suit.</p>\n<!-- more -->\n<figure>\n  <img\n    src='https://blog.jxnblk.com/images/modular-npcs/early-sketches.jpg'\n    alt='Rough character sketches'\n  />\n  <figcaption>\n    Early character sketches\n  </figcaption>\n</figure>\n<p>I watched a lot of video tutorials and studied characters from other games, and I settled on a general style that I felt was good enough, but wanted to polish the character artwork before releasing the game.\nI also wanted to improve upon the diversity and variety, while giving the NPCs just a little bit more personality.</p>\n<figure>\n  <img\n    src='https://blog.jxnblk.com/images/modular-npcs/early-aries.jpg'\n    alt='Screenshot of low poly character standing in the street'\n  />\n  <figcaption>\n    A very early, prototype version of the main character Aries\n  </figcaption>\n</figure>\n<figure>\n  <img\n    src='https://blog.jxnblk.com/images/modular-npcs/old-extras.jpg'\n    alt='Screenshot of the earlier versions of the NPC extras'\n  />\n  <figcaption>\n    The first version of NPC extras\n  </figcaption>\n</figure>\n<p>The existing NPCs were just a set of different models, with different hair styles, body shapes, and clothing. As you walked through the city, you'd inevitably encounter the same model over and over again.\nI could explain it away in the game by saying that the story involves time travel, but I wanted more random variety of the NPCs populating the city.\nThe best way I could think of achieving this was by modularizing the characters so that I could randomly generate any number of NPCs using primitive parts and different color palettes.</p>\n<figure>\n  <img\n    src='https://blog.jxnblk.com/images/modular-npcs/main-characters-before-after.jpg'\n    alt='Screenshot of the main characters, before and after'\n  />\n  <figcaption>\n    Main characters, before and after\n  </figcaption>\n</figure>\n<p>I started with rebuilding the core characters in Blender to try to nail down an approach and style that fit better with the feel of the game.\nOnce I was happy with the general look and feel, I started building out modular characters based on this style.\nStarting with a base body type, I added multiple different models for hair styles, tops, bottoms, shoes, and accessories like sunglasses and hats.</p>\n<figure>\n  <img\n    src='https://blog.jxnblk.com/images/modular-npcs/blender-parts.jpg'\n    alt='Screenshot of the model in Blender'\n  />\n  <figcaption>\n    The first body type with all modular parts shown and an example of only showing one set of the modular parts\n  </figcaption>\n</figure>\n<p>For coloring the models, I created several new textures that are UV mapped based on skin, hair, and colors for the tops, bottoms, shoes, and accessories.\nThis way I could swap the texture on the model to change the complexion and colors of the outfits independent from the parts.</p>\n<figure>\n  <img\n    src='https://blog.jxnblk.com/images/modular-npcs/textures.jpg'\n    alt='Screenshot of the model in Blender'\n  />\n  <figcaption>\n    Some of the textures used to color the modular characters\n  </figcaption>\n</figure>\n<p>Once I had a decent number of parts, I exported all the parts together as a single FBX file, which I uploaded to Mixamo to rig for the game.</p>\n<figure>\n  <img\n    src='https://blog.jxnblk.com/images/modular-npcs/mixamo-rigging.jpg'\n    alt='Screenshot of rigging the character in Mixamo'\n  />\n  <figcaption>\n    Rigging the model with all modular parts together\n  </figcaption>\n</figure>\n<p>I brought the rigged model into Unity and created a material for the new textures.\nIn Unity, each modular part is a separate game object within the model, and I wrote a script to randomize the different part shown for each section of the model, i.e. hair, top, bottom, shoes, and accessory.</p>\n<figure>\n  <img\n    src='https://blog.jxnblk.com/images/modular-npcs/game-objects.jpg'\n    alt='Screenshot of the models hierarchy in Unity'\n  />\n  <figcaption>\n    The modular parts are all separate game objects in Unity\n  </figcaption>\n</figure>\n<figure>\n  <img\n    src='https://blog.jxnblk.com/images/modular-npcs/unity-scripts.jpg'\n    alt='Screenshot of the modular character scripts inspectors'\n  />\n  <figcaption>\n    The Unity script allows for an array of named sections, each with an array of possible parts to render\n  </figcaption>\n</figure>\n<p>The <code>ModularCharacter</code> script randomizes which part to show for each section, and the <code>ModularColors</code> script randomizes which texture to use for the whole model.</p>\n<script src=\"https://gist.github.com/jxnblk/3e21f2494863b4e13a79c783bb05f248.js\"></script>\n<p>Although I ended up not using it, I also had an array of rules to ensure that specific tops would always match their bottoms for things like aprons and suits.</p>\n<p>By randomizing the parts of each section along with the colors used in the textures and the scale of the model, this gave me a huge variety of different possibilities for each NPC's prefab instance.</p>\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">Modular NPC extras – WIP <a href=\"https://t.co/Oo70RK4w8d\">pic.twitter.com/Oo70RK4w8d</a></p>&mdash; Brent Jackson (@jxnblk) <a href=\"https://twitter.com/jxnblk/status/1697718113041551800?ref_src=twsrc%5Etfw\">September 1, 2023</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<blockquote class=\"twitter-tweet\"><p lang=\"zxx\" dir=\"ltr\"><a href=\"https://t.co/5eJseDIDUi\">pic.twitter.com/5eJseDIDUi</a></p>&mdash; Brent Jackson (@jxnblk) <a href=\"https://twitter.com/jxnblk/status/1713916006962192648?ref_src=twsrc%5Etfw\">October 16, 2023</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>At this point, I was quite pleased with the results.\nI continued by adding another body shape and adding blend shapes to the models and scripts and started replacing the prefabs used in the <code>Crowd</code> script that randomly places the NPCs near the character and gives them a destination to walk to.</p>\n<p>The results felt a lot better in the game, and it was much more difficult to spot \"clones\" of other characters with this much variety.</p>\n<blockquote class=\"twitter-tweet\"><p lang=\"zxx\" dir=\"ltr\"><a href=\"https://t.co/0hzGEAWZpt\">pic.twitter.com/0hzGEAWZpt</a></p>&mdash; Brent Jackson (@jxnblk) <a href=\"https://twitter.com/jxnblk/status/1713932201975300490?ref_src=twsrc%5Etfw\">October 16, 2023</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>At this point, and if you know much about Unity, you can probably guess what happened next: the FPS tanked.\nRendering a crowd of animated NPCs can already be taxing, and with this new modular character approach, each prefab now had multiple Skinned Mesh Renderers to draw which caused the CPU usage to spike.</p>\n<p>I was still happy with the look of these new characters and wasn't about to roll back all these changes, so I started experimenting with ways to make this work in the game without killing the performance.\nI'll explain what I did in the next devlog post, so stay tuned...</p>\n","tags":["devlog","unity","blender","character design","mixamo"],"image":"https://blog.jxnblk.com/images/modular-npcs/modular-characters.jpg"},{"path":"blog/unity-inputsystem-detector","slug":"unity-inputsystem-detector","title":"Unity InputSystem Touchscreen Detector","description":null,"date":"2023-10-05T00:00:00.000Z","excerpt":"<p>When I first started working on <a href=\"https://novanticagame.com\">Novantica</a>, I was considering releasing on iOS in addition to Steam and used TestFlight to manage development builds on my phone.\nI've always intended for the game to work well with gamepads/controllers, but I also wanted a way to play test the game using an on-screen virtual controller.</p>\n<p>I decided to use the <a href=\"https://docs.unity3d.com/Packages/com.unity.inputsystem@1.7/manual/index.html\">InputSystem</a> package so that the game would support most gamepads and it includes a very easy way to build a custom on-screen controller with the <a href=\"https://docs.unity3d.com/Packages/com.unity.inputsystem@1.7/manual/OnScreen.html\">OnScreenControl</a> component.\nFor the iOS build of the game, a custom on-screen controller shows, and automatically hides when a controller is connected.\nIt took a bit of fiddling with the InputSystem to get this to work, and I'd like to share how I set this up.</p>\n<p>First, make sure you have the InputSystem installed and enabled in your project.\nFind or create some images assets to use for any joysticks or buttons you want to use for the on-screen controller, then create a UI canvas for the controller, adding and positioning the joystick and buttons to suit your needs.</p>\n<p>The controller I had in the iOS builds looked like this:</p>\n<p>[IMAGE]</p>\n<p>Next, create a new script for hiding and showing the on-screen virtual controller.</p>\n<p>[GIST]</p>\n<p>Add this script to a parent component and hook up the UI canvas in the inspector.\nTo test this out in the editor, enter play mode, and you should see the on-screen virtual controller.\nNow connect a gamepad to your computer; the virtual controller should disappear.\nDisconnecting the physical controller should make the on-screen virtual controller reappear.</p>\n","html":"<p>When I first started working on <a href=\"https://novanticagame.com\">Novantica</a>, I was considering releasing on iOS in addition to Steam and used TestFlight to manage development builds on my phone.\nI've always intended for the game to work well with gamepads/controllers, but I also wanted a way to play test the game using an on-screen virtual controller.</p>\n<p>I decided to use the <a href=\"https://docs.unity3d.com/Packages/com.unity.inputsystem@1.7/manual/index.html\">InputSystem</a> package so that the game would support most gamepads and it includes a very easy way to build a custom on-screen controller with the <a href=\"https://docs.unity3d.com/Packages/com.unity.inputsystem@1.7/manual/OnScreen.html\">OnScreenControl</a> component.\nFor the iOS build of the game, a custom on-screen controller shows, and automatically hides when a controller is connected.\nIt took a bit of fiddling with the InputSystem to get this to work, and I'd like to share how I set this up.</p>\n<p>First, make sure you have the InputSystem installed and enabled in your project.\nFind or create some images assets to use for any joysticks or buttons you want to use for the on-screen controller, then create a UI canvas for the controller, adding and positioning the joystick and buttons to suit your needs.</p>\n<p>The controller I had in the iOS builds looked like this:</p>\n<p>[IMAGE]</p>\n<p>Next, create a new script for hiding and showing the on-screen virtual controller.</p>\n<p>[GIST]</p>\n<p>Add this script to a parent component and hook up the UI canvas in the inspector.\nTo test this out in the editor, enter play mode, and you should see the on-screen virtual controller.\nNow connect a gamepad to your computer; the virtual controller should disappear.\nDisconnecting the physical controller should make the on-screen virtual controller reappear.</p>\n","draft":true,"tags":["devlog","unity","input","controller","mobile","touchscreen","tutorial"]},{"path":"blog/the-mystery-of-the-mustard-people","slug":"the-mystery-of-the-mustard-people","title":"The Mystery of the Mustard People","description":null,"date":"2023-08-21T00:00:00.000Z","excerpt":"<p>One of the more perplexing bugs I encountered working on <a href=\"https://novanticagame.com\">Novantica</a> so far was when all the NPC extras in the game suddenly turned a greenish-yellow color.\nI had just swapped out URP materials for ones using a new shader, so I suspected that change made this happen,\nbut I didn't want to revert back to the old materials.\nTo add icing to the cake, this issue was only happening in builds, not in the editor.\nI started to dig in, but didn't realize it would take so long to track down.</p>\n","html":"<p>One of the more perplexing bugs I encountered working on <a href=\"https://novanticagame.com\">Novantica</a> so far was when all the NPC extras in the game suddenly turned a greenish-yellow color.\nI had just swapped out URP materials for ones using a new shader, so I suspected that change made this happen,\nbut I didn't want to revert back to the old materials.\nTo add icing to the cake, this issue was only happening in builds, not in the editor.\nI started to dig in, but didn't realize it would take so long to track down.</p>\n<!-- more -->\n<p><img src=\"https://blog.jxnblk.com/images/mustard/pizza.jpg\" alt=\"Screenshot showing yellow colored NPCs\"></p>\n<p>At first, since I didn't know how to reproduce the issue in the editor,\nI tried swapping different materials and shaders on one of the character models to see if it was related to any prefabs used to spawn the extras.\nNo luck, the character was still yellow.\nAfter a bit of fruitless searching on the Unity forums,\nI tried moving the model to different scenes and sometimes the material worked and other times not.\nI also noticed that the NPCs that were loaded from additive scenes didn't suffer the same ailment, as seen in the screenshot above.\nThose scenes were <a href=\"https://docs.unity3d.com/2021.3/Documentation/Manual/com.unity.addressables.html\">Addressables</a>, so I started to suspect it was something related to how I'd set up shared materials across scenes with the Addressables system.</p>\n<figure>\n  <img src='https://blog.jxnblk.com/images/mustard/addressables.png' alt='Screenshot of Unity Addressables editor options' />\n  <figcaption>\n    Changing this option to <em>Use Existing Build</em> made the issue reproducible in the editor\n  </figcaption>\n</figure>\n<p>I switched the Unity Addressables <em>Play Mode Script</em> option to <em>Use Existing Build</em> and was able to start reproducing the issue in the editor.\nIt felt like I was onto something.</p>\n<p><img src=\"https://blog.jxnblk.com/images/mustard/hotel.jpg\" alt=\"\"></p>\n<p>The next thing I tried was adding all the game's materials and textures to a new Addressables group.\nThis seemed to fix the yellow people problem, but now the materials were missing from some of the additively loaded Addressable scenes.\nIf you're familiar with Unity, the magenta colored objects in the screenshot above mean that the materials are missing.\nI tried a few different ways of grouping the materials in Addressables, but still wasn't able to get everything working as expected.</p>\n<p>At this point, I went outside to take a walk and clear my head.\n<em>Why were the characters turning yellow?</em>\n<em>They should be rendering in magenta if the material was missing.</em>\n<em>The shader looked like it was supposed to but only the color was off...</em></p>\n<p>Then it dawned on me.\nWhen I got back to the computer, I swapped the texture on the character material to confirm my suspicion.\nThe material <em>was</em>, in fact, working, but the UV maps were wrong.\nBut why?</p>\n<figure>\n  <img src='https://blog.jxnblk.com/images/mustard/character-texture.png' alt='The texture used to color the low poly character models' />\n  <figcaption>\n    The texture used to color the low poly character models.\n  </figcaption>\n</figure>\n<p>This time, I found some <a href=\"https://forum.unity.com/threads/warning-to-all-my-friends-beware-optimise-mesh-data.544735/\">useful hints</a> from the forums.\nIt turns out the default <em>Optimize Mesh Data</em> setting on the imported character models was causing the UV map to get lost somewhere along the way.\nAs you can see in the texture above, the UV map controls how the low poly models are colored.\nFor some reason, the UV map was only set for one of these colors.</p>\n<figure>\n  <img\n    src='https://blog.jxnblk.com/images/mustard/optimize-mesh.png'\n    alt='Screenshot of the Optimize Mesh option for the imported model'\n  />\n  <figcaption>\n    The default setting for Optimize Mesh was the culprit all along\n  </figcaption>\n</figure>\n<p>After disabling this on all the imported FBX models, everything was rendering as expected again.\nCase closed.</p>\n<p>If you've run into similar issues with Unity, I hope this post was helpful,\nbut if you know of another or better way to avoid this issue, please let me know.</p>\n<p><em>Alternative titles considered for this post:</em></p>\n<ul>\n<li>What is up with all these wasabi people?</li>\n<li>Perplexed by the pea soup people</li>\n<li>The curious case of caper colored characters</li>\n</ul>\n","tags":["devlog","unity","materials","shaders"]},{"path":"blog/making-sourdough-and-learning-unity","slug":"making-sourdough-and-learning-unity","title":"Making Sourdough & Learning Unity","description":"How I started teaching myself Unity development and why I'm building a game","date":"2023-08-19T00:00:00.000Z","excerpt":"<p>In March 2020, I remember the former mayor one day telling people to go out for dinner and see a show – and the next day hearing that it wasn't safe to get within six feet of another person. If you haven't been to New York before, it's not easy to walk around outside and not get within six feet of another person. In hindsight, it was relatively safe to be outdoors, but at the time, we were afraid to step outside the door for a few weeks.</p>\n<p>I also remember a lot of people thinking that the whole thing would blow over in a month or two, but everything that I had been reading made me suspect that was far too optimistic.\nAs someone who walks to get to 99% of the places I'm going and thoroughly enjoys it, I realized that I would have to pick up a few new hobbies to keep my sanity.</p>\n","html":"<p>In March 2020, I remember the former mayor one day telling people to go out for dinner and see a show – and the next day hearing that it wasn't safe to get within six feet of another person. If you haven't been to New York before, it's not easy to walk around outside and not get within six feet of another person. In hindsight, it was relatively safe to be outdoors, but at the time, we were afraid to step outside the door for a few weeks.</p>\n<p>I also remember a lot of people thinking that the whole thing would blow over in a month or two, but everything that I had been reading made me suspect that was far too optimistic.\nAs someone who walks to get to 99% of the places I'm going and thoroughly enjoys it, I realized that I would have to pick up a few new hobbies to keep my sanity.</p>\n<!-- more -->\n<p>Like so many others suddenly given more time to pursue domestic endeavors, I started trying to cook things that I'd never tried before.\nAfter a few loaves of bread and even more cleaning than I usually do, I realized that I'd need more creative outlets to occupy my time.\nI also found myself playing an unhealthy dose of games like Animal Crossing, which sparked an itch that I've had ever since I was a child.</p>\n<p>That summer, Unity started offering all its online learning courses for free, and I started to dive in.\nThis wouldn't be the first time I thought about developing video games.\nWhen I was in elementary school in the 1980s, my neighbor and childhood best friend's dad had brought home an IBM PC.\nWe were all familiar with the Apple IIes at school, but this thing was a completely different beast.\nIt had one of those green and black displays (high tech compared to printers),\nand flipping the power switch on the back made it sound like an airplane was taking off inside my neighbor's basement.\nEven at that time, it was not a new computer – we affectionately called it \"The Dinosaur.\"</p>\n<p>Other than drawing awesome pictures with LOGO at school, this was probably my first introduction to programming languages.\nWe learned how to do a few things in BASIC, then immediately started to plan out how to build our own video game.\nI sketched out a bunch of characters and sprites on graph paper, but we never finished our <em>Bomber Man</em> clone.</p>\n<p>A few years later, this same friend introduced me to a ray tracing program that I used to render my first 3D models.\nI remember saying to my friend, <em>can you imagine when computers are powerful enough to do this in real time? And maybe even simulate sound waves for audio?</em>\nHe told me that it'd probably be a while before they'd be able to do that.</p>\n<p>I continued to play video games through high school and was blown away by this thing called the Internet, but never really tinkered with the idea of game development again for years.\nI learned Flash in college and made a few experimental, interactive art sort of things, but nothing that would clearly be considered a \"game.\"</p>\n<p>Then, some time into my career as a web developer, I realized that JavaScript libraries and browser capabilities had reached a point where you could feasibly make a game using Web technology.\nI built a few prototypes for music-based, education-focused games using Web Audio APIs, but never saw any of these to completion.</p>\n<p>Fast forward to 2020. I'm reading Unity docs and watching tutorials on YouTube at 2x speed, thinking to myself: <em>this all looks a lot more accessible than I thought.</em>\nComing from a web development background, C# feels like what TypeScript wants to be – one day, when it grows up – and although the Unity desktop application takes a while to learn the ropes, it's not as quirky as some other professional-level applications that I've used in the past.\n<em>If you're curious about learning Unity, I'd highly recommend one of their tutorial game starters.\nThey have a lot of things set up for you, and it only takes a few hours to go from nothing to a playable prototype.</em></p>\n<p>As I continued to learn Unity, I toyed around with a few different prototypes, but always kept coming back to the idea of building an adventure game.\nI loved adventure and RPG games like <em>Zelda</em>, <em>Earth Bound</em>, and <em>Final Fantasy VII</em> when I was younger, and it's one of the genres I still really enjoy as an adult.\nI also thought it might be a good way to keep the game mechanics focused and keep a narrow scope for the project, without having to worry about the physics of things flying around – <em>I'll write more about the Hoverboard later.</em></p>\n<p>Like many other sci-fi fans, I had started writing notes for an interactive time travel novel about 15 years ago.\nSince I'm nowhere near turning that into a story of its own, I decided to rework the story into a game format.\nOne of the biggest changes from the original story was that I wanted to make a game that both teenagers and adults could enjoy.\nThe original story was too dark and wouldn't lend itself to some of the themes I started aiming for.\nI didn't want to fall into the ludonarrative dissonance trap of having a young protagonist living a double life as a mass murderer, so I started to build out mechanics that could work in a completely non-violent game.\nI also wanted to avoid the apocalyptic sci-fi trope that so many games adopt.\nWhile it can make for beautiful looking art, I wanted this game to paint a positive outlook on the future, as well as try to capture some of the beauty of urban life and all the people and social connections you make in a city.\nWe'll see how well I can pull this off.</p>\n<p>Fast forward to today.\nComing from knowing next to nothing about Unity, three years later I'm preparing to publish my first game on Steam.\nThere's still a lot of work to be done to take it to the finish line, and I'm planning on writing more on this blog as I progress.\nThe next posts will likely be more development-related as I try to share what I've learned so far and the hurdles and challenges I'll encounter in the future.\nThanks for reading, and I hope you'll follow along!</p>\n<!--\n- continuing\n- sci-fi novel\n- adapting for young adults\n- themes\n  - non-violent – ludonarrative dissonance\n  - adventure + puzzles\n  - story driven\n  - not post-apocalyptic / positive vibes\n  - late capitalism\n  - time travel\n-->\n","tags":["devlog","unity","life"]},{"path":"blog/two-steps-forward","slug":"two-steps-forward","title":"Two Steps Forward, One Step Back","description":"Building UI with design constraints from utlity CSS to CSS-in-JS","date":"2020-03-06T00:00:00.000Z","excerpt":"Building UI with design constraints from utlity CSS to CSS-in-JS","html":"<p>If you've ever seen code that looks like this, I'm sorry:</p>\n<pre><code class=\"language-html\">&#x3C;div class=\"p3 bold white bg-blue\">\n  I'm sorry\n&#x3C;/div>\n</code></pre>\n<p>If you've ever seen code that looks like this, you're welcome:</p>\n<pre><code class=\"language-jsx\">&#x3C;Box\n  padding={3}\n  fontWeight='bold'\n  color='white'\n  bg='blue'>\n  Hello\n&#x3C;/Box>\n</code></pre>\n<p>Back in 2013, <a href=\"https://twitter.com/mrmrs_\">Adam Morse</a> and I were following along the incredible work that <a href=\"https://mobile.twitter.com/stubbornella/\">Nicole Sullivan</a> and others like <a href=\"https://github.com/necolas\">Nicolas Gallagher</a> were doing with Object-Oriented CSS (OOCSS).\nOur explorations around working with CSS-related tech-debt led to the creation of <a href=\"https://basscss.com\">Basscss</a> and <a href=\"https://tachyons.io\">Tachyons</a> and the birth of \"Utility CSS\".\nThese libraries inspired other design systems such as Buzzfeed's <a href=\"https://solid.buzzfeed.com/\">Solid</a> and GitHub's <a href=\"https://primer.style/css/\">Primer CSS</a>. Even <a href=\"https://getbootstrap.com\">Bootstrap</a> eventually added more utility-centric styles.</p>\n<p>This methodology became known by many names, including <em>Atomic CSS</em>, <em>Functional CSS</em>, and <em>Utlity CSS</em>,\nbut I've started referring to it as <em>Atomic/Functional/Utility CSS</em> or AFUCSS.\nThis sort of sounds like <em>Hey, F you!</em>, which is a pretty <a href=\"https://medium.com/buzzfeed-design/how-i-learned-to-stop-worrying-and-love-the-atomic-class-98d6ccc45781#.yqnsfkbx2\">typical response</a> when most people first encounter this flavor of CSS.</p>\n<h2>What problems did this solve?</h2>\n<p>Whatever your opinion on this methodology was, it tended to help with a few common problems of working with CSS at scale.</p>\n<ul>\n<li>It connected elements directly to styles, avoiding selector abstractions and the need to name things.</li>\n<li>It encouraged designers and developers to use scales and constraints on margin, padding, font sizes, colors, and other properties.</li>\n<li>It helped mitigate \"append-only\" stylesheets by reusing styles.</li>\n<li>It avoided some of the pitfalls of \"specificity wars\" incurred by the cascade.</li>\n<li>Although it had a learning curve, once you had internalized one of the many implementations, it could increase your development velocity.</li>\n</ul>\n<p>Around the same time, we started working on <a href=\"https://cssstats.com\">CSS Stats</a>,\nwhich helped validate some of our hypotheses about CSS filesize and front-end performance.\nApplying this methodology to production web applications at the time helped shave of hundreds of kilobytes of CSS that was being shipped to end users.</p>\n<h2>What did it fail to do?</h2>\n<p>Despite Tachyons' popularity, no single library ever took over\nthe industry at a level that would negate the steep learning curve involved.\nThis meant that not only did developers have to learn a new methodology, but also an inevitably large custom classname API.</p>\n<p>CSS is a powerful and nuanced language, but utility CSS can never fully replace it.\nEventually, you'll need to add one-off styles that just aren't covered by the library you're using, and there isn't always a clear way to extend what you're working with.\nWithout a clear way to handle things like this, developers\ntend to add inconsistent hacks and append-only styles.</p>\n<p>As any utility-based CSS library grows, so does the amount of CSS you ship to your users,\nleaving you reliant on more build tools to remove styles that you were never going to use in the first place.\nWhile it was generally better than other methodologies at the time with regard to CSS filesize, it still wasn't ideal.</p>\n<p>It's also worth noting that this methodology was created before React was released\nand was intended for use in template-based user interfaces, including Rails and PHP.\nIt was never designed for functional component-based UI and doesn't take advantage of this new paradigm.</p>\n<h2>Components</h2>\n<p>With the introduction of component-based UI libraries like React,\nthe promise of a better way to handle authoring CSS at scale was on the horizon.\nAfter Christopher \"Vjeux\" Chedeau gave a talk titled <a href=\"https://vimeo.com/116209150\">CSS in your JS</a> in 2015, the React community began exploring the possibilities of combining styles with components, which resulted in a cornucopia of new libraries for authoring CSS in JavaScript.\nFor an excellent writeup of why you would want to do this, see <a href=\"https://gist.github.com/threepointone/731b0c47e78d8350ae4e105c1a83867d\">Sunil Pai's response to Jonathan Snook</a>.</p>\n<h2>Two steps forward</h2>\n<p>CSS-in-JS libraries help solve a lot of the same issues Utility-based CSS methodologies were focused on (and more) in a <em>much</em> better way.\nThey connect styles directly to elements without needing to name things or create abstractions in class selectors.\nThey avoid append-only stylesheets with encapsulation and hashed classnames.\nThese libraries work with existing build tools, allowing for code splitting, lazy loading, and dead code elimination with virtually zero effort,\nand they don't require additional tools like Sass or PostCSS.\nMany libraries also include CSS performance optimizations, such as <em>critical CSS</em>, enabled by default so that developers don't need additional tooling or even need to think about them.</p>\n<p>No wonder people have been raving about this.</p>\n<p>Another great thing about CSS-in-JS libraries, is that they're based on standard CSS syntax, properties, and values.\nThey remove the need for cryptic, non-standard APIs and dramatically reduce the barrier to entry when compared to utility-based CSS.</p>\n<h2>One step back</h2>\n<p>While CSS-in-JS libraries help with a lot of issues,\nsome of the key benefits to libraries like Basscss and Tachyons\ngot lost in the mix.\nInstead of using design constraints to define styles, developers are left with open-ended tools that tend to encourage one-off styles.\nThe learning curve was reduced, but developers were left with more choices to make.</p>\n<h2>A new system</h2>\n<p>With the new ecosystem of CSS-in-JS libraries, I began exploring\nways to incorporate design constraints in components.\nThis resulted in <a href=\"https://rebassjs.org\">Rebass</a> in 2015, then <a href=\"https://styled-system.com\">Styled System</a> in 2017.\nRebass introduced the notion of using style props that mapped to commonly used CSS properties and was an early attempt at recreating some of the developer ergonomics from Basscss.\nStyled System abstracted these style props into utility functions for use in libraries like <a href=\"https://styled-components.com\">Styled Components</a>,\nallowing you to create your own Rebass-like components.\nRather than applying a mixed bag of classnames to a component, Styled System promotes <em>style as a function of props</em> with a sort of <em>learn-once-use-everywhere</em> API.</p>\n<p>Many teams use libraries like Styled System to create component libraries and design systems to great success.\n<em><a href=\"https://chakra-ui.com\">Chakra UI</a></em>,\nGitHub's <em><a href=\"https://primer.style/components/\">Primer Components</a></em>,\nArtsy's <em><a href=\"https://palette.artsy.net/\">Palette</a></em>,\nSproutSocial's <em><a href=\"https://seeds.sproutsocial.com/\">Seeds</a></em>,\nand Modulz's <em><a href=\"https://radix.modulz.app/\">Radix</a></em>\nall use Styled System to create components that use styles defined in <em>themes</em> with a common props API.\nThese help teams efficiently build UI with consistent branding and a common design language.</p>\n<h2>Outside the <code>&#x3C;Box /></code></h2>\n<p>Styled System is great for teams that have the time and resources to build out a custom component library,\nbut it does require some effort to start using.\nInstead of <em>one <code>&#x3C;Box /></code> to rule them all,</em>\nmany of these component libraries have their own custom versions\nthat require documentation, and limit <a href=\"/blog/interoperability\">interoperability</a>.\nHow can the concepts encoded in libraries like Styled System and the component libraries it powers be extended to designers and developers without the resources to build a custom component library,\nwhile making it even easier for large teams to take advantage of network effects in the ecosystem?\nNo one wants another off-the-shelf component library, do they?</p>\n<h2>The Design Graph</h2>\n<p>Instead of building <em>yet another</em> component library, what would a framework for styling modern component-based applications look like?\nLeveraging the concepts of a <a href=\"/blog/design-graph\"><em>Design Graph</em></a>, design constraints, and a standard <a href=\"https://theme-ui.com/theme-spec\">theme specification</a> for other library authors to follow,\n<a href=\"https://theme-ui.com\">Theme UI</a>\nis the next step up this ladder of abstraction.</p>\n<p>Although it's loosely based on similar concepts from utility CSS methodologies,\nTheme UI gets rid of the cryptic, non-standard APIs and syntax, the lack of interoperability, the need for separate build tools, and the steep learning curve found in libraries like Tachyons.\nIt keeps the coupling of styles to elements, readability, developer ergonomics of making changes in situ,\nand adds a more powerful constraint-based system for managing styles.</p>\n<h2>A superset of CSS-in-JS</h2>\n<p>Rather than memorizing hundreds of class selectors that only represent a subset of the CSS language, or a handful of style props, Theme UI gives you a superset of CSS that can be applied to any element with its <code>sx</code> prop.\nTheme-based values can be applied to common CSS properties for things like typography, color, and layout, and any bespoke, one-off styles can be added where needed, serving as an <em>escape hatch</em>.</p>\n<p><strong>Utility CSS creates a subset of CSS, with a custom syntax.\nThe <code>sx</code> prop is a superset of CSS that uses standard syntax.</strong></p>\n<p>Naming things is hard, and the <code>sx</code> prop lets you style any application\nwithout needing to name things like class selectors and components.\nAs my friend and colleague <a href=\"https://twitter.com/4lpine\">John Otander</a> puts it,\n<em>\"Fuck naming shit when you don’t have to.\"</em></p>\n<p>Theme UI's <code>sx</code> prop is intended to help maintain a minimal API surface area.\nMost properties used in this prop are the same as standard CSS,\nwith optional, additional ways to use values for these properties.\nInstead of each component having its own custom set of style props, <em>every</em> element can be styled with the same <code>sx</code> prop.\nComponent variants are also written in the same format.\nWriting styles in JS object notation might be somewhat new, but if you know JavaScript, you likely already know the syntax.</p>\n<!--\n- superset of css\n- naming things\n- collocated styles + readability\n- minimal API surface area\n-->\n<h2>Don't take my word for it</h2>\n<p>Tons of people are already taking advantage of the <em>Design Graph</em> with Theme UI\nto build themes, applications, and other tools.</p>\n<ul>\n<li><a href=\"https://docz.site\">Docz</a> uses Theme UI to let you customize the styles for your documentation site.</li>\n<li><a href=\"https://flex.arshad.io/\">Flex</a> is a markdown/MDX based page builder that uses Theme UI for theming.</li>\n<li><a href=\"https://novela.narative.co/\">Novela</a> is a beautiful Gatsby theme for blogging, built with Theme UI.</li>\n<li><a href=\"https://hackathons.hackclub.com/\">Hack Club</a> connects you to high school hackathons and is styled with Theme UI.</li>\n<li>Plus a <a href=\"https://twitter.com/jxnblk/status/1235658542306246657\">whole lot more</a></li>\n</ul>\n<p>If you've built something with Theme UI, I'd love to hear about it.</p>\n<h2>Demand better</h2>\n<p>If you're building an application with React in 2020,\ndon't settle for CSS methologies from 2013.\nDemand more for your team,\nand help me build the future of styling for the Web.</p>\n<hr>\n<p><strong>Further reading:</strong></p>\n<ul>\n<li><a href=\"http://mrmrs.cc/writing/scalable-css/\">CSS and Scalability</a></li>\n<li><a href=\"/blog/patterns-for-style-composition-in-react/\">Patterns for Style Composition in React</a></li>\n<li><a href=\"https://jon.gold/2015/07/functional-css/\">Functional Programming, CSS, and your sanity</a></li>\n<li><a href=\"https://johno.com/styling-themes/\">Styling themes</a></li>\n<li><a href=\"https://johno.com/guessable/\">Guessable</a></li>\n</ul>\n<p><em>Thanks to <a href=\"https://twitter.com/4lpine\">John Otander</a> and <a href=\"https://twitter.com/broccolini\">Diana Mounter</a></em></p>\n<!--\n- Reference:\n  - http://mrmrs.cc/writing/scalable-css/\n  - https://gist.github.com/threepointone/731b0c47e78d8350ae4e105c1a83867d\n  - https://mobile.twitter.com/chantastic/status/1227262007469981703\n- From Johno\n  - tech debt was measurable in CSS Stats - data-driven\n  - theming is an afterthought in most css-in-js libs\n  - style as a function of props (not a mix of classnames)\n  - theme-ui avoids the need to name things (selectors, components)\n  - \"Fuck naming shit when you don’t have to\"\n- Theme UI things\n  - https://mobile.twitter.com/samjbmason/status/1235537136335622145\n  - https://theme-ui-gallery.netlify.com/\n  - https://mobile.twitter.com/gill_kyle/status/1212508600007938048\n  - https://mobile.twitter.com/PaulieScanlon/status/1234434804885655554\n  - https://mobile.twitter.com/dandenney/status/1233123707654148096\n  - https://gatsby-theme-terminal.netlify.com/\n  - https://mobile.twitter.com/atav1k/status/1230780663047036928\n  - https://mobile.twitter.com/atav1k/status/1228481206813020161\n  - Docz\n  - Narative Novela\n  - Flex: https://flex.arshad.io/\n  - https://mobile.twitter.com/tuistio/status/1235658946540601345\n-->\n"},{"path":"blog/design-graph","slug":"design-graph","title":"The Design Graph","description":"A constraint-based system for organizing styles in UI design","date":"2020-02-18T00:00:00.000Z","excerpt":"A constraint-based system for organizing styles in UI design","html":"<!--\nimport Graph from '../../components/graph'\n-->\n<p>Working on various websites and web apps for over a decade,\nI've gravitated around certain words and phrases to talk about design constraints in user interfaces.\nDespite the rich vocabulary for talking about visual design,\nit feels like there isn't a great way to accurately describe the interconnected nature of working with design constraints.\nTalking about <em>color palettes</em>, using <em>typographic scales</em>,\n<em>themes</em> to codify the <em>design language</em>,\nor the <em>component API</em> of a particular library has often felt a little too disjointed for what I think should be a tightly woven system.</p>\n<p>The term <em>design systems</em> used to somewhat fill this void, however it's taken on a much larger meaning over the past few years\nand includes the people, organizations, and processes (among many other things), in addition to the implementation details.\nSo, how can we talk about the implementation details of UI design in a more precise way?\nAnd, how can we build upon these concepts to push UI design to a higher level of abstraction?</p>\n<p>While working on tools that prioritize <a href=\"/blog/interoperability\">interoperability</a>, <a href=\"/blog/themeability\">themeability</a>, <a href=\"/blog/portability\">portability</a>, and the <a href=\"/blog/a-conceptual-look-at-theming\">concepts</a> of libraries like <a href=\"https://theme-ui.com\">Theme UI</a>,\nI've started thinking about a more holistic view that I call the <em>Design Graph</em>.</p>\n<h2>What is the Design Graph?</h2>\n<blockquote>\n<p>The Design Graph is a constraint-based system for organizing styles in UI design.</p>\n</blockquote>\n<p>The Design Graph isn't an actual implementation, but rather a conceptual model\nthat includes pairwise relationships between its parts, or <em>nodes</em> to borrow a term from graph theory.\n<a href=\"https://theme-ui.com\">Theme UI</a> is one implementation that attempts to adhere to this model,\nand it's a great example of how the Design Graph can become more than the sum of its parts.\nTheme UI's source code isn't particularly complex or large, and it's similar to a few other libraries out there.\nThe thing that really differentiates Theme UI is that it's meant to be built upon, hacked on, and iterated on to enable a higher level of\n<a href=\"/blog/interoperability\">interoperability</a> across libraries.\n<strong>If you only look at what Theme UI <em>does</em>, you'll easily miss what it can <em>enable.</em></strong></p>\n<p>If you use Theme UI to build Gatsby themes, a component library, or a website,\nthese things should all <em>just work</em> with other tools like <a href=\"https://blocks-ui.com\">Blocks UI</a>.\nIn the future, imagine if there are VS Code and Figma plugins, documentation generators, static analysis tools, and more\nthat follow the same Design Graph schema so that the component library you have today gets a whole lot better over time.\nI want this imaginary future.</p>\n<h2>What is this for?</h2>\n<p>Beyond a larger ecosystem effect,\nthe Design Graph is meant to help answer some practical questions when implementing design systems, such as:</p>\n<h3><em>What should we call this?</em></h3>\n<p>Naming things is hard.\nThe fewer things you need to name, the more time and energy you can spend solving more important problems for your product.\nWith a standard interface and naming conventions for storing raw values in your UI,\nmore and more tools and abstractions can be built on top of this lower-level framework.\nBy naming things in a consistent way, we get <em>interoperability</em> for free.</p>\n<h3><em>Where should we put this?</em></h3>\n<p>Although people love to organize things, we're really terrible at doing so in a way that makes sense to others.\nThe Design Graph doesn't try to completely solve this, but it provides guidance for where certain aspects of your UI design should live.\nFor example, raw color values belong in the <code>colors</code> <em>scale</em>, and variations of your button styles belong in the <code>buttons</code> <em>variants</em>.</p>\n<h3><em>How do we use this?</em></h3>\n<p>Creating sensible but flexible component APIs is hard.\nWhen building out a library of components, it's generally beneficial to reuse props APIs across multiple components whenever possible.\nThis helps maintain a <em>minimum API surface area</em> and allows for a <em>learn once, use anywhere</em> effect.\nWith Theme UI,\ncontextual component styles can be set with the <code>variant</code> prop, and can be augmented or overridden with the <code>sx</code> prop, which acts as a sort of escape hatch.</p>\n<h2>What does it look like?</h2>\n<p>I would consider this a work-in-progress, but from a high level, the Design Graph includes the following core <em>nodes</em>:</p>\n<ul>\n<li><strong>Scales</strong> are limited collections of raw values that map to specific style properties.\nFor example, values for <code>font-size</code> are stored in the <code>fontSizes</code> scale.</li>\n<li><strong>Components</strong> are elements that have styles constrained by <em>scales</em>.</li>\n<li><strong>Variants</strong> are partial styles that map to specific components.\nFor example, a button might have <em>primary</em> and <em>secondary</em> variants, or <em>large</em> and <em>small</em> variants.</li>\n<li><strong>Themes</strong> are collections of <em>scales</em> (and possibly <em>variants</em>) that encapsulate a particular visual design language.\nIdeally, themes follow a common interface (or schema) and can be swapped out in different implementations.</li>\n</ul>\n<p>These nodes are inherently interconnected and help form the larger graph.</p>\n<h2>Themes to Scales</h2>\n<p>A <em>theme</em> object is composed of multiple <em>scales</em>. These scales could include fonts, font sizes, colors, and more.</p>\n<p><img src=\"https://blog.jxnblk.com/images/design-graph-1.webp\" alt=\"Illustration of theme and scale nodes\"></p>\n<!--\n<Graph\n  title='Illustration of theme and scale nodes'\n  nodes={[\n    [8, 12, 6, 'Theme'],\n    [18, 4, , 'Fonts'],\n    [28, 10, , 'Colors'],\n    [23, 20, , 'Space'],\n  ]}\n  edges={[\n    [0, 1],\n    [0, 2],\n    [0, 3],\n  ]}\n/>\n-->\n<h2>Scales to Components</h2>\n<p>A <em>component's</em> styles use <em>scales</em>.</p>\n<p><img src=\"https://blog.jxnblk.com/images/design-graph-2.webp\" alt=\"Illustration of scale and component nodes\"></p>\n<!--\n<Graph\n  title='Illustration of scale and component nodes'\n  nodes={[\n    [26, 14, 6, 'Component'],\n    [8, 4, , 'Fonts'],\n    [4, 12, , 'Colors'],\n    [10, 20, , 'Space'],\n  ]}\n  edges={[\n    [0, 1],\n    [0, 2],\n    [0, 3],\n  ]}\n/>\n-->\n<h2>Scales to Variants</h2>\n<p><em>Variants</em> also use <em>scales</em>.\nVariants are usually the parts of a component's styles that might change contextually or dynamically.</p>\n<p><img src=\"https://blog.jxnblk.com/images/design-graph-3.webp\" alt=\"Illustration of scale and variant nodes\"></p>\n<!--\n<Graph\n  title='Illustration of scale and variant nodes'\n  nodes={[\n    [24, 5, 5, 'Variant'],\n    [24, 18, 5, 'Variant'],\n    [10, 4, , 'Fonts'],\n    [4, 12, , 'Colors'],\n    [10, 20, , 'Space'],\n  ]}\n  edges={[\n    [0, 2],\n    [0, 3],\n    [0, 4],\n    [1, 2],\n    [1, 3],\n    [1, 4],\n  ]}\n/>\n-->\n<h2>Component to Variants</h2>\n<p>A <em>component</em> can use multiple <em>variants</em>. Some variants can also be shared across multiple components.\nFor example, you could share accessible color combinations with a badge component and an alert or message component.</p>\n<p><img src=\"https://blog.jxnblk.com/images/design-graph-4.webp\" alt=\"Illustration of component and variant nodes\"></p>\n<!--\n<Graph\n  title='Illustration of component and variant nodes'\n  nodes={[\n    [26, 14, 6, 'Button'],\n    [8, 6, 4, 'Primary'],\n    [4, 20, 4, 'Secondary'],\n  ]}\n  edges={[\n    [0, 1],\n    [0, 2],\n  ]}\n/>\n-->\n<h2>Putting it all together</h2>\n<p>As an example to demonstrate how some of these pieces fit together, a <em>theme</em> with typographic <em>scales</em> can be used to create a <em>component</em> that accepts multiple <em>variants</em>.</p>\n<pre><code class=\"language-js\">// example theme with typographic scales\n{\n  fonts: {\n    body: 'Helvetica',\n    heading: 'Garamond',\n  },\n  fontWeights: {\n    body: 400,\n    heading: 700,\n    bold: 700,\n  },\n  lineHeights: {\n    body: 1.625,\n    heading: 1.25,\n  },\n  fontSizes: [ 12, 14, 16, 20, 24, 32, 48 ],\n}\n</code></pre>\n<p>These <em>scales</em> can be used to create <em>variants</em>.</p>\n<pre><code class=\"language-js\">// example variants\ntext: {\n  heading: {\n    fontFamily: 'heading',\n    fontWeight: 'heading',\n    lineHeight: 'heading',\n    fontSize: 5,\n  },\n  title: {\n    fontFamily: 'heading',\n    fontWeight: 'heading',\n    lineHeight: 'heading',\n    fontSize: 6,\n  },\n  lead: {\n    fontFamily: 'body',\n    fontWeight: 'body',\n    lineHeight: 'body',\n    fontSize: 3,\n  },\n  small: {\n    fontFamily: 'body',\n    fontWeight: 'body',\n    lineHeight: 'body',\n    fontSize: 0,\n  },\n}\n</code></pre>\n<p>Then these <em>variants</em> can be used in a <em>component</em>.</p>\n<pre><code class=\"language-jsx\">&#x3C;Text as='h1' variant='heading'>\n  Hello\n&#x3C;/Text>\n&#x3C;Text variant='lead'>\n  This component has variants.\n&#x3C;/Text>\n</code></pre>\n<h2>More than the sum of its parts</h2>\n<p>Beyond a single application or site, the Design Graph is the sort of thing that can exist at a larger level across an entire organization or across multiple organizations.\nIn a way, the more libraries and applications that adopt this concept, the larger the graph gets,\nand the more tooling we can share.\nImagine installing a component from npm, and it's already compatible with your design system.\nOr imagine reusing a core set of components with variants across multiple clients with drastically different visual designs.\nImagine all these components can be visually tweaked from your design tool using a plugin\nand the changes are reflected back in your text editor.\nIf you're interested in helping build and shape this vision, join us on <a href=\"https://github.com/system-ui/theme-ui\">GitHub</a> or let me know what you think on <a href=\"https://twitter.com/jxnblk\">Twitter</a>.</p>\n<p><em>Thanks to John Otander for related explorations in <a href=\"https://github.com/system-ui/designql\">DesignQL</a>, Jina Anne for all the work on design tokens, and Diana Mounter for infinite inspiration.</em></p>\n"},{"path":"blog/a-conceptual-look-at-theming","slug":"a-conceptual-look-at-theming","title":"A Conceptual Look at Theming","description":"An exploration on the relationship between global and component-based styles and a mental model for styling applications.","date":"2019-08-10T00:00:00.000Z","excerpt":"An exploration on the relationship between global and component-based styles and a mental model for styling applications.","html":"<p>The word <em>theme</em> can mean a lot of different things and invoke a lot of different interpretations,\nwhich can be both a blessing and a curse.\nIn user interface design, the term <em>theming</em> is used for various purposes, including end-user customization, white labels, customizable UI components, and color variations such as dark and light modes.\nHere, I'd like to step back and look at some of the foundational concepts that libraries like <a href=\"https://theme-ui.com\">Theme UI</a>, <a href=\"https://styled-system.com\">Styled System</a>, <a href=\"https://rebassjs.org\">Rebass</a>, and <a href=\"https://basscss.com\">Basscss</a> have been driven by.\nI've tried to codify some of these concepts in different implementations and APIs in various open source projects dating back to 2013,\nbut many of these projects are aimed at a similar problem space.\nThis isn't meant to be an exhaustive analysis of theming in general, but more of a framework for how to think about UI design and design systems,\nand how you can apply some of this thinking to your own work.</p>\n<h2>Spectrum</h2>\n<pre><code>Global &#x3C;--> Component\n</code></pre>\n<p>When it comes to styling, there is a dichotomy between styles that are global and styles that are scoped to individual components.\nGenerally speaking, CSS tends towards the former and libraries like <a href=\"https://styled-components.com\">Styled Components</a> tend towards the latter.\nWhen using any technology, how decoupled versus how scoped you choose to create your styles varies from application to application,\nand each approach has its merits.\nConsidering the spectrum spanning from global to component-based styles can be\na good yardstick for making decisions about styling responsibility when constructing a design system.</p>\n<h2>Stylesheets</h2>\n<p>In the pure ideal that is <a href=\"http://www.csszengarden.com/\">CSS Zen Garden</a>, styles are completely decoupled from components,\nallowing the components to remain the same while the styles are swapped out one-by-one.\nIn practice, this is virtually impossible to achieve in a real world application with tens, hundreds, or thousands of contributors,\nand in situations that have devolved into <em>append-only stylesheets</em>.\nThe global stylesheet can be thought of as a large object composed of many nested style objects that are intended for other components.\nCSS rulesets are mapped to components via CSS selectors,\nwhich is effectively a language-specific function\nthat takes stylesheets and full HTML element trees as inputs, and applies styles to element trees.</p>\n<p>With this sort of approach, <a href=\"https://en.wikipedia.org/wiki/Dead_code_elimination\">dead code elimination</a>, <a href=\"https://en.wikipedia.org/wiki/Tree_shaking\">tree shaking</a>, and dynamic <a href=\"https://webpack.js.org/guides/code-splitting/\">code splitting</a> of the styles is extremely difficult,\nbut styles are available <em>anywhere and everywhere</em> they <em>might</em> be needed.\nFor small sites and smaller teams, this approach can sometimes be the quickest and cheapest approach.</p>\n<h2>Components</h2>\n<p>With a component-based approach, the default is complete isolation of styles.\nThis gives you dead code elimination of styles for free.\nIt also lends itself well to tree shaking and dynamic code splitting,\nwhich can create huge performance improvements, especially in larger applications.\nThis also, inevitably, leads to duplication of styles.\nWhile libraries like Styled Components offer a theming context,\nthe tendency is to use that as a simple mode switch rather than a store for shared styles.</p>\n<h2>Scales</h2>\n<blockquote>\n<p><em>scale</em>: a graduated series of musical tones ascending or descending in order of pitch according to a specified scheme of their intervals</p>\n</blockquote>\n<p>Styled System leverages the theming context in libraries like this to provide sets of style values in the form of <em>scales</em> that create the larger <em>theme object</em>.\n<strong>These scales create design constraints for specific style properties that help teams realize a consistent visual design language throughout an application's user interface.</strong>\nThese scales become inputs to functional components.\nIn component-based UI development, the resulting interface is a function of data and/or state.\nWhen styling interfaces, the theme object can be thought of as a part of state,\nwhere each component's styles becomes a function of the theme object, component-based styles, and component props.</p>\n<h2>Responsibilities</h2>\n<p>With the abstraction provided by the theme object, different styling responsibilities can be put in different places.\nColor definitions, typographic styles, space scales, and other commonly used style values become the responsibility of the theme object.\nDynamic styles, such as responsive styles based on viewport width, become the responsibility of the component,\nwhich lends itself well to contextual style changes based on content.</p>\n<h2>Variants</h2>\n<p><em>Update: the variants API in Styled System has changed since first publishing this post.</em></p>\n<p>The division of responsibilities across the spectrum of global to component-based styles\ngets a little murky when considering the <a href=\"https://styled-system.com/variants\">variants API</a> in Styled System.\nComplete style objects can be stored in the global theme object and applied to components with a simple shorthand.\nFor example, a <code>Button</code> component can switch between stylistic variants by setting the <code>variant</code> prop, which pulls in values from the theme.</p>\n<pre><code class=\"language-jsx\">&#x3C;Button variant='primary'>Beep&#x3C;/Button>\n&#x3C;Button variant='secondary'>Boop&#x3C;/Button>\n</code></pre>\n<p>While this can be good for developer ergonomics, it flies in the face of tree-shakeability and code splitting.\nStyles that would have otherwise been scoped to the component's module are now globally available.\nFor commonly used styles like typography, this can make more sense, but it still blurs the lines of where this sort of responsibility should lie.</p>\n<h2>MDX Styles</h2>\n<p>In <a href=\"https://theme-ui.com\">Theme UI</a>, markdown and MDX content can be styled using a <a href=\"https://theme-ui.com/styling-mdx\"><code>theme.styles</code></a> object that uses base-level theme scales to style headings, paragraphs, lists, blockquotes, and other markdown elements.\nThis API too introduces a bit of ambiguity to the concept of theming, but it allows for near-complete typographic styles to be reused and shared across many different MDX documents.\nIn a way, the <code>theme.styles</code> object <em>is</em> a component in a more abstract and conceptual sense.</p>\n<h2>The Right Way</h2>\n<p>I'm often asked which way is <em>the right way</em> to handle things like this.\nThe short answer is, there are no wrong or right ways,\nbut I think considering the implications of storing stylistic values in different places\nacross the spectrum of global to component-based styles can be a useful framework\nfor defining the API of a design system.\nAll roads lead to Rome, so don't be afraid to explore new territory or wander off the beaten path from time to time.</p>\n<!-- Graph Theory -->\n"},{"path":"blog/code-literacy","slug":"code-literacy","title":"Code Literacy","description":"Asking should designers code is asking the wrong question.","date":"2019-07-25T00:00:00.000Z","excerpt":"Asking should designers code is asking the wrong question.","html":"<p>Ah yes, everyone's favorite question: <em>should designers code?</em>\nAs much as I'd love to pontificate on the matter,\nI think the framing of this question is fundamentally wrong.\nAt the heart of this conversation is the idea of <em>code literacy</em>,\nthat is, the level at which one can read, write, and understand software code in the form of programming languages.</p>\n<p>We don't question whether or not we should teach children to read and write,\nor whether we should math in school.\nIn a modern public education systems, these are a given.\nWhile these institutions might have other problems,\nI think code literacy should be a fundamental part of any school curriculum.</p>\n<p>What <em>is</em> code? Paul Ford has <a href=\"https://www.bloomberg.com/graphics/2015-paul-ford-what-is-code/\">already written</a> more than enough to cover that topic,\nbut I'd like to step back and consider how code is not dissimilar to written language and mathematics.</p>\n<p>While spoken languages are innate, we humans invented written language somewhat recently in our own history.\nSpeaking comes naturally, but written language is not hard-wired into our brains.\nWe naturally think in symbols, and most of us are able to handle reading and writing,\nbut it's still something that we invented.\nIt's a powerful tool that allows us to transfer knowledge over space and time in ways we couldn't do without it.</p>\n<p>Math, too, is symbolic in nature.\nIt's not entirely dependent on written language,\nbut math certainly benefits from our ability to scribble lines on paper.</p>\n<p>Code is the languages we humans use to communicate with computers.</p>\n<p>Think about this for a second:</p>\n<!--\nWe created a tool that needs language to work.\n-->\n<p><em>The computer is the first tool that we've created that <strong>requires</strong> written language to even work.</em></p>\n<p>Without software, computers are useless.\nPerhaps, one day, computers might fluently speak natural human languages,\nbut there will always be code underlying the abstractions that enable this.</p>\n<p>Some people are interested in abstracting away the code required to program computers,\nwhich can make computers accessible in ways they weren't before.\nBut saying that code will become less and less fundamental to the progress of technology\nis akin to saying that no one needs to learn mathematics because we have calculators now.\nIf anything, the opposite is true.</p>\n<p>I suspect that the invention of software might be on par with the invention of mathematics,\nbut we're too close to the event to see its historical significance.\nMathematics is broad and broadly applicable and works at a much lower level than code -\nsoftware isn't really possible without mathematics, afterall.\nBut this is the first time in human history where we've created a technology that requires written language (i.e. software) to operate.</p>\n<p>Not everyone in a modern society needs to be a poet, or a bestselling author, or have a PhD in mathematics,\nbut I think having basic reading, writing, and arithmetic skills will benefit anyone.\nI think the same is true for code literacy.\nNot everyone needs to be a software developer,\nbut the more you know about how humans communicate with machines,\nthe more benefits you'll see professionally.</p>\n<p>Imagine you work in the finance industry and have figured out a way to mitigate all the billions of dollars lost on spreadsheet errors.\nOr imagine you're a farmer who leverages machine learning to predict crop yields.\nYou <em>could</em> wait for software developers to create this for you,\nbut diverse experiences applied to different technologies can result in incredible innovation.</p>\n<p>I don't think we should expect someone in a non-developer role to read and write code professionally.\nBut I also think the people who are curious and who learn a little more than their peers\nwill always have the advantage.</p>\n"},{"path":"blog/portability","slug":"portability","title":"Portability","description":"Defining a portable file format for high level style information.","date":"2019-07-23T00:00:00.000Z","excerpt":"Defining a portable file format for high level style information.","html":"<p>In software development, formats help ensure that content and data are portable and can be used in many different applications.\nBy adhering to HTML standards set by the WHATWG and W3C, browsers created by different organizations\ncan render HTML documents created by many different people and generated in many different ways.\nThat is, HTML is a portable format that can be rendered by many different clients.\nWhile HTML is certainly one of the most successful examples of standardization ever,\nless widely used formats can still benefit from the same idea.</p>\n<p>Take Markdown as an example.\nIt was created in 2004 by John Gruber and Aaron Swartz, and today is the de facto format for writing software documentation.\nIt isn't widely used outside the field of software development,\nbut there are many different engines that can render this format into HTML.\nMarkdown has become a somewhat portable format.\nBy writing documentation, blog posts, or wiki pages in this format,\nyou can use many different tools to render the content in different places,\nand you can be fairly certain that there will always be tools that can render this format in the future.</p>\n<p>Markdown was intended to be <em>easy-to-read and easy-to-write</em>, and can be viewed as a simple abstraction on top of HTML.\nA complete HTML page cannot be replaced by Markdown, but all Markdown files can be written as HTML.\nMost people find markdown simpler to read and write than raw HTML, and prefer using it for things like blog posts and documentation.</p>\n<p>In the same way that Markdown has found a niche in certain contexts for authoring HTML,\nI'm very interested in taking this idea and applying it to CSS.\n<em>\"But, CSS is already easy to read and write,\"</em> you might say.\nSure, but when I'm considering which styles differ the most across different interfaces and which styles make the biggest impact,\nI'm mostly concerned with three things: <em>color</em>, <em>typography</em>, and <em>layout</em>.\nAuthoring an entire stylesheet to apply styles like this can require some effort,\nand the end result isn't as portable as you might think.\nSimply copying a stylesheet from one website to another does not guarantee that the styles will be applied the way you intend them to be.\nA lightweight abstraction for this sort of thing, however, could make these sorts of styles more portable.</p>\n<p>Unlike Markdown, I do not think this requires inventing new syntax.\nWith the existing syntaxes for CSS, JavaScript, JSON, YAML, and others, there are already plenty of tools that can handle parsing.\nThis <em>does</em>, however, require a specific shape or schema to be successful,\nand the <a href=\"https://system-ui.com/theme\">Theme Specification</a> is meant to be a simpler way to write styles for an application.\nWhile <a href=\"https://theme-ui.com\">Theme UI</a> (which is built with the Theme Specification) <em>can</em> output stylesheets in the form of <a href=\"https://theme-ui.com/css/tachyons\">Tachyons</a> and other similar CSS libraries, it cannot fully replace CSS on its own.\nIt does provide a level of portability for sets of colors, typographic styles,\nand other design constraints that can be applied in many different places.\nAs the number of libraries that follow this Theme Specification increases,\nyou will be able to reuse these styles in more and more places,\nmaking it a more portable format for sharing styles.</p>\n"},{"path":"blog/themeability","slug":"themeability","title":"Themeability","description":"Using constraint-based design principles to create themeable components and UI","date":"2019-07-21T00:00:00.000Z","excerpt":"Using constraint-based design principles to create themeable components and UI","html":"<p>I've been interested in the idea of constraint-based design for a while.\nBy constraining the solution space for a particular problem,\nnew and novel ideas can emerge beyond the initial problem's scope.\nIn the context of UI design,\nwhen you don't need to decide whether a heading's font size should be 22 or 24 pixels,\nyou have more time to decide what that heading should say in the first place or whether there should be a heading at all.\nLike other tools aimed at promoting creative focus,\ndesign constraints can help create a distraction-free environment for creative thought.\nDesign constraints can be viewed as a sort of <em><a href=\"https://en.wikipedia.org/wiki/Maslow%27s_hierarchy_of_needs\">hierarchy of needs</a></em> –\nwhen you stop spending energy on lower-level problems,\nyou can start exploring higher level abstractions in design.</p>\n<p>I've tried to distill some of this thinking into several different open source libraries over the years,\nnotably <a href=\"https://basscss.com\">Basscss</a>, <a href=\"https://rebassjs.org\">Rebass</a>, and <a href=\"https://styled-system.com\">Styled System</a>.\nWhile libraries like Basscss and Rebass were certainly not instant hits,\nsome of their core ideas have slowly gained traction.\nAnd now, Styled System is becoming a more-and-more widely-used solution for applying visual design constraints within component libraries and design systems.</p>\n<h2>Styled System</h2>\n<p>Styled System is a solution for managing design constraint scales within certain domains of visual design.\nBy defining a typographic scale, negative space scale, color palettes, and other visual attributes in a <em>theme object</em>,\nthese values can be systematically applied to components where needed,\nwhile still allowing the flexibility to override values contextually within an application.\nStyled System provides an API to make doing the right thing easy when applying consistent styles throughout an application.\nAt its core, it's a suite of utilities to create functions for mapping design constraints to components,\nand it helps you build a UI component library with a more consistent props API.\nI like to think of it as <strong>styling as a function of design constraints</strong>.</p>\n<p>Styled System is a fairly mature library at this point and much of the recent development has been focused on utilities that expand upon this core idea.\nWhile Styled System is great for building design systems and component libraries, it's not an ideal solution in and of itself for creating white-labels or themeable user interfaces.\nStyled System is completely framework-agnostic and requires the user to create their own components that integrate with other CSS-in-JS libraries.\nIt requires you to make intentional, upfront decisions about the overall component API,\nwhich is great for corporate design systems, but shouldn't be neccessary for applying a design constraints in general-purpose UI development.\nAnd, while it is possible, Styled System doesn't provide much guidance for creating applications that are truly <em>themeable</em>.</p>\n<h2>Components as Commodity</h2>\n<p>If you look at modern web UI development, it's easy to see the large amount of duplicative efforts across different organizations.\nWhile projects like Bootstrap and Material Design have seen a non-negligible amount of adoption,\nI'm very curious as to why we, as an industry, haven't wholesale adopted off-the-shelf solutions for UI components yet.\nIt can <em>seem like</em> it's only a matter of time before we see a major shift towards commodification of the work we do today,\nbut I'm skeptical that that will ever happen.\nSometimes it feels like we, as web developers, are the <a href=\"https://en.wikipedia.org/wiki/Linotype_machine\">Linotype operators</a> of the 21st century.</p>\n<p>So why do we still spend time, energy, and money on building what is largely the same thing?\nI think that Styled System and similar libraries are impacted by what is often called <a href=\"https://en.wikipedia.org/wiki/IKEA_effect\">The IKEA Effect</a>.</p>\n<blockquote>\n<p>The IKEA effect is a cognitive bias in which consumers place a disproportionately high value on products they partially created.</p>\n</blockquote>\n<p>By providing primitive building blocks for creating a component library,\nStyled System allows users to create custom components of their own.\nI think this effect is sometimes compounded with <a href=\"https://en.wikipedia.org/wiki/Not_invented_here\"><em>Not-Invented-Here (NIH) Syndrome</em></a>,\nwhere organizations spend more time and energy on building an in-house solution when comparable off-the-shelf solutions exist.\nIt's fair to say that off-the-shelf UI component solutions do not and will never exist,\nbut if all you have is a <a href=\"https://en.wikipedia.org/wiki/Law_of_the_instrument#Abraham_Maslow\">design system hammer</a>, you start to see a lot of design-system-shaped nails.\nI suspect it will take a bit of effort to move to a higher level of abstraction.</p>\n<h2>Theming</h2>\n<p>The idea of themeable user interfaces often flies in the face of what many corporate design systems attempt to achieve.\nMost design systems are developed to ensure a consistent look and feel across hundreds of designers and developers spanning different teams in an organization,\nand they often make assumptions about the flexibility of their outward APIs that can slow down design and development velocity,\nin an effort to enforce this consistency.\nUnless the product is intended for white-label applications,\norganizations do not have good incentives to prioritize creating themeable interfaces.\nIt just doesn't make sense to spend resources on such efforts.\nBut, even when theming a user interface is not a hard requirement,\ndeveloping components with themeability in mind can be beneficial nonetheless.</p>\n<h2>Themeable Components</h2>\n<p>More and more design systems are built using third-party, open source components that handle complex logic, such as autocomplete inputs, masked inputs, date pickers, and drop downs.\nComponents like these are available today as off-the-shelf UI components,\nand it's generally not worth the cost of developing new solutions when these components can be leveraged instead.\nThe <em><a href=\"https://reactjs.org/docs/render-props.html\">render props</a></em> pattern has become popular in recent years to allow this sort of logic to be packaged into reusable components\nthat aren't concerned with the styling of the UI.\nIf these sorts of components included default, styled versions that were completely themeable,\nthe consumers of these components wouldn't need to build the rendered UI pieces at all.</p>\n<p>The problem with this idea is that every component has its own unique API,\nand all theming APIs vary from implementation to implementation.\nThe only common denominator is the low-level CSS used for any web-based component,\nand when the entirety of CSS is available for styling,\nthat still leaves a huge amount of room for interpretation.\nWithout a standard API for theming components,\nwe'll never have UI components that can truly operate as <em>interchangeable parts</em>.</p>\n<p>If even a handful of UI component libraries conformed to a common specifiation for themeable components,\nthese components could be installed in many different applications without the need to add custom styles.\nThis is the idea behind the <a href=\"https://system-ui.com/theme\">Theme Specification</a>,\nwhich is intended to be an <a href=\"/interoperability\">unopinionated foundation</a> for other libraries to be built upon.\nThe success of this effort is contingent on adoption, but even with limited success,\nthis idea could have compounding effects on efficiencies within UI development.\n<strong>The theme specification itself is a design constraint</strong>.</p>\n<h2>Theme UI</h2>\n<p><a href=\"https://theme-ui.com\">Theme UI</a> is a library that builds upon some of the ideas within this post.\nIt's a framework for building themeable and interoperable UI components based on visual design constraints.\nIt provides out-of-the-box visual design consistency without the need to build an entire UI component library upfront.\nLike Styled System, it uses a <em>theme object</em> for applying design constraints in an application,\nbut unlike Styled System it doesn't require custom UI components to apply these styles.\nBoth Theme UI and Styled System use the same underlying theme specification,\nwhich means if you've created components with Styled System, they should work in applications that are built with Theme UI.</p>\n<p>The library is still fairly new, but it's intended to lay a foundation for other components, libraries, and tools to be built upon.\nThe more libraries that adopt this theme specification, the more the users of these libraries will benefit.\nIf you're looking for a better way to apply consistent visual styles,\nbuild themeable components,\nor leverage constraint-based design principles in your work,\nI'd encourage you to check it out.\nAnd, if the ideas in this post interest you, we'd love to have help building more on top of this foundation.\nCheck out the <a href=\"https://github.com/system-ui/theme-ui\">Theme UI repo</a> to learn more.</p>\n"},{"path":"blog/the-cascade-is-not-inheritance","slug":"the-cascade-is-not-inheritance","title":"The Cascade is Not Inheritance","description":"On more than one occasion, I've heard people conflate the cascade feature of CSS with inheritance.","date":"2019-07-20T00:00:00.000Z","excerpt":"On more than one occasion, I've heard people conflate the cascade feature of CSS with inheritance.","html":"<p>On more than one occasion, I've heard people conflate the <em>cascade</em> feature of CSS with <em>inheritance</em>.\nWhile it's an understandable thing to mix up because they are, in fact, related,\nI think it's important to use the correct terms when talking about technology like this.</p>\n<h2>Inheritance</h2>\n<p><em>Inheritance</em> is when a child element inherits styles from one of its parent elements.\nSome (not all) CSS properties will automatically apply as a <em>default value</em> for child elements.\nThis allows you to set a font family and color at the top level of a page\nand have all elements within that page use the same styles.\nVery cool.</p>\n<h2>The Cascade</h2>\n<p>The <em>Cascade</em> is the set of rules that a browser uses to determine which particular styles should apply to a given element,\nwhen there are conflicting rules.\nThis is, in my mind, the trickiest part of the CSS language and it trips people up all the time.</p>\n<p>The algorithm specified in CSS takes the following into consideration when applying styles:</p>\n<ul>\n<li><a href=\"https://www.w3.org/TR/css-cascade-3/#cascade-origin\">Origin and Importance</a>, which includes author, user agent, and user stylesheets\n<ol>\n<li>Transition declarations</li>\n<li>Important user agent declarations</li>\n<li>Important user declarations</li>\n<li>Important author declarations</li>\n<li>Animation declarations</li>\n<li>Normal author declarations</li>\n<li>Normal user declarations</li>\n<li>Normal user agent declarations</li>\n</ol>\n</li>\n<li><a href=\"https://www.w3.org/TR/css-cascade-3/#cascade-specificity\">Specificity</a>, which is <a href=\"https://www.w3.org/TR/selectors/#specificity-rules\">calculated based on selectors</a></li>\n<li><a href=\"https://www.w3.org/TR/css-cascade-3/#cascade-order\">Order of Appearance</a>, which means the last declared rule wins</li>\n</ul>\n<p>This quote from <a href=\"https://developer.mozilla.org/en-US/docs/Learn/CSS/Introduction_to_CSS/Cascade_and_inheritance\">MDN's Introduction to CSS: Cascade and Inheritance</a> sums it up pretty well:</p>\n<blockquote>\n<p>If you didn't fully understand the cascade, specificity, and inheritance, then don't worry! This is definitely the most complicated thing we've covered so far in the course, and is something that even professional web developers sometimes find tricky.</p>\n</blockquote>\n"},{"path":"blog/why-you-should-learn-css-in-js","slug":"why-you-should-learn-css-in-js","title":"Why you should definitely learn how to use CSS-in-JS","description":"CSS-in-JS solutions provide a lot of benefits over lower-level approaches","date":"2019-07-20T00:00:00.000Z","excerpt":"CSS-in-JS solutions provide a lot of benefits over lower-level approaches","html":"<p>From time to time, I've heard that CSS-in-JS poses a barrier to entry for some people.\nLike any new software abstraction, CSS-in-JS is <em>intended to</em> abstract away some of the complexities from a lower level implementation, in this case CSS.\nAbstractions are neither good nor bad, but they do require learning new things.\nUsing CSS-in-JS lets you style applications without needing to worry about a few of the thornier aspects of CSS,\nbut it doesn't replace CSS entirely,\nand you still need to have a solid understanding of CSS to be successful.\nYou will absolutely need a solid understanding of\nCSS properties, values and types, inheritance, layout, stacking context, and the box-model to be successful with CSS-in-JS.</p>\n<p>CSS-in-JS isn't a boogieman out to destroy everything you love about CSS.\nIn my opinion, it can make authoring CSS far more enjoyable than any other tool I've used in the past,\nand I'd encourage you to give it a shot.</p>\n<p>If you already know JavaScript, CSS-in-JS helps remove the need to use native CSS syntax,\nor deal with context switching between different languages.\nFor younger developers straight out of bootcamp,\nthis can make styling an application more accessible because there are fewer new things to learn.\nI've seen this myself, and remember one former colleague gushing about how Styled Components was so much easier to use than what they'd learned in school.</p>\n<p>If you're less familiar with JS syntax, the effect can be the total opposite,\nand it can seem like too much to learn at once.\nDon't get discouraged.\nYou can still learn how to use CSS-in-JS, and keep in mind that whatever you learn along the way will be applicable knowledge in many other situations where JS is used.\nI like to think of CSS-in-JS as a potentially low-barrier way to get started with JS.</p>\n<p>Despite what I've written here,\nit can still feel like a barrier because <strong>it <em>does</em> require learning something new</strong>,\nbut one thing that I love about software development is that I'm never bored and constantly learning.</p>\n<p>If you're not willing to learn something new, then you probably won't like CSS-in-JS at all,\nbut if you do have a curious mind, I hope this post helps.</p>\n<h2>What does CSS-in-JS do?</h2>\n<p>Most libraries are designed to:</p>\n<ul>\n<li>Let you author CSS in JavaScript syntax</li>\n<li>Colocate styles with components</li>\n<li>Take advantage of native JS syntax features</li>\n<li>Take advantage of anything from the JS ecosystem</li>\n</ul>\n<h2>What does CSS-in-JS <em>not</em> do?</h2>\n<p>At the end of the day, you're still writing code that generates CSS, and the full power of the language is still available.\nCSS-in-JS <strong>does not</strong> get rid of the need to understand the following:</p>\n<ul>\n<li>How styles are applied to the DOM</li>\n<li>How inheritance works</li>\n<li>How CSS properties work</li>\n<li>How CSS layout works</li>\n</ul>\n<h2>What abstractions does CSS-in-JS provide?</h2>\n<p>CSS-in-JS libraries allow you to author styles <em>without</em> generally having to think about:</p>\n<ul>\n<li>The cascade (<a href=\"/blog/the-cascade-is-not-inheritance\"><strong>not inheritance</strong></a>)</li>\n<li>Specificity</li>\n<li>Naming selectors</li>\n<li>Enforcing naming conventions</li>\n<li>Linting another language</li>\n<li>Enforcing file structures for another language</li>\n<li>Additional build tools</li>\n</ul>\n<h2>What you need to know</h2>\n<p>To be effective with CSS-in-JS, you'll need to have a good grasp of the following concepts:</p>\n<p>Types in JavaScript:</p>\n<ul>\n<li>Strings</li>\n<li>Numbers</li>\n<li>Objects</li>\n<li>Arrays</li>\n<li>Boolean</li>\n<li>Null</li>\n<li>Undefined</li>\n</ul>\n<p>MDN is a great resource for learning JS, and I'd highly recommend their tutorial on\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures\">JavaScript data types and data structures</a>.</p>\n<p>To really excell with CSS-in-JS, you'll benefit from understanding the following:</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators\">Math operations</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_Operators\">Logical operators</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\">Ternary operators</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors\">Dot and bracket syntax</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules\">ES Modules</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax\">Object spread</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">Destructuring</a></li>\n</ul>\n<h2>What other benefits does CSS-in-JS have?</h2>\n<ul>\n<li>It can make dead code elimination easier to manage</li>\n<li>It will throw errors to help you avoid mistakes, including syntax, type, and undefined errors</li>\n<li>Many libraries offer support for theming</li>\n<li>You can use virtually <em>any</em> package from npm</li>\n<li>You can use ES modules and scope</li>\n<li>Most libraries offer ways to handle dynamic styling</li>\n<li>Styles are generally \"scoped\" to a specific component</li>\n<li>It's far easier to write unit tests with CSS-in-JS</li>\n<li>Many libraries offer performance improvements like <em>critical CSS</em> with no additional setup needed</li>\n</ul>\n<h2>Where do I start?</h2>\n<p>There's certainly no one-size-fits-all answer here.</p>\n<p>If you haven't used React before, or have less experience with JS, I'd recommend checking out the <a href=\"https://www.gatsbyjs.org/tutorial/\">Gatsby tutorial</a>.\nOnce you have a good grasp of the concepts laid out in the tutorial, see the guide on using <a href=\"https://www.gatsbyjs.org/docs/css-in-js/\">Using CSS-in-JS</a>.</p>\n<p>If you know enough React to get going on your own, I'd recommend  checking out <a href=\"https://styled-components.com\">Styled Components</a>.\nThen, once you've got that working, definitely check out <a href=\"https://emotion.sh\">Emotion</a>.\nThese are the two most widely used CSS-in-JS libraries at the moment,\nand between the two of them, they cover a lot of ground.</p>\n<p>If you have any questions or thoughts on how to make this post better, please reach out to me on <a href=\"https://twitter.com/jxnblk\">Twitter</a>.</p>\n"},{"path":"blog/the-modern-front-end-design-system","slug":"the-modern-front-end-design-system","title":"The Modern Front-End Design System Stack","description":"Tools for building modern front-end applications in 2019","date":"2019-07-18T00:00:00.000Z","excerpt":"Tools for building modern front-end applications in 2019","html":"<p>Design systems come in all shapes and sizes and can encompass a wide range of skillsets and roles within an organization.\nAs a front-end developer, I'd like to share some of the tooling\nthat I've found to be helpful when building out the components and code portion of a design system\nin modern applications.</p>\n<p>On more than one occasion, I've been asked what a blessed \"Jackson Stack\" would look like.\nThis list is likely to change in the future,\nbut the following are tools that I think are both stable and beneficial to working in design systems in 2019.\nThis doesn't attempt to cover every aspect of a design system,\nand there is always room for experimentation and exploration,\nso please take this as more of a starting point rather than a definitive list of tools to use.\nFull disclosure: I've worked on or with many of the tools listed in this post, and this reflects my own <em>personal opinions</em>.\nDon't sweat it if you're not using any of these, this is merely one perspective on the matter.</p>\n<h2>What do you mean by <em>modern</em>?</h2>\n<p>I use the term modern here to refer to React and related technologies.\nThis isn't meant to be an exclusive definition, and hopefully some of this tooling can serve as inspiration for tooling with other modern front-end libraries like Angular or Vue.js.\nFor the sake of pragmatism and my own personal experience,\nthe scope of this article will be focused on React.\nIf you're a full-stack Rails developer, a designer working in CSS, or someone who doesn't touch code at all,\n<strong>hopefully you can steal some ideas and apply them to the tech stack that you use professionally.</strong></p>\n<h2>Components</h2>\n<p><a href=\"https://jxnblk.com/blog/components/\">Everything is a component</a>.\nI've found this mode of thinking in UI development to be extremely beneficial,\nand modern front-end applications are built upon functional, component-based architectures.\nWhile React itself offers almost zero guidance on how to manage styling,\nuserland libraries like <a href=\"https://emotion.sh\">Emotion</a> and <a href=\"https://styled-components.com\">Styled Components</a> give you a way to author styles in a component-friendly way.</p>\n<h2>CSS-in-JS</h2>\n<p>While some might be skeptical of the sorts of abstractions introduced by CSS-in-JS libraries,\nthose who embrace it find it to be a liberating way to author styles.\nMany (not all) of the problems that people typically encouter while working within a complex CSS codebase tend to go away when you adopt a JavaScript-based solution for managing styles.\nDevelopers no longer have to fight specificity wars,\npolice pull requests for not conforming to a strict naming convention,\nor constantly worry about the ever-increasing size of their stylesheets.\nIf there's only one thing from this list that you take away, I hope that it's this:</p>\n<p><strong>If you're building an application in React, use Emotion or Styled Components for styling.</strong></p>\n<p>Many others have written about these two libraries, but at a very high level they:</p>\n<ul>\n<li>Allow you to author CSS in a component-centric way</li>\n<li>Allow you to add styles without needing to create (or choose names for) selectors</li>\n<li>Keep styles scoped and isolated to where they are intended to be used</li>\n<li>Allow you to publish components as packages, with no additional setup</li>\n<li>Work well with existing bundlers</li>\n<li>Can be used with standard code splitting tools</li>\n<li>Can be tested with the same libraries the rest of your application uses</li>\n<li>Have performance improvements (like critical CSS) built in, where developers don't really need to think about it</li>\n</ul>\n<h3>One size fits all fits no one well</h3>\n<p>Some people advocate creating \"framework-agnostic\" styles, dismissing CSS-in-JS to help legitimate this ideal.\nWhile <a href=\"https://en.wikipedia.org/wiki/Write_once,_run_anywhere\"><em>write-once-use-everywhere</em></a> is a nice concept in theory,\nI do think that being pragmatic about building a design system can be a case of\n<a href=\"https://www.sandimetz.com/blog/2016/1/20/the-wrong-abstraction\"><em>duplication being better than the wrong abstraction</em></a>.\nThe quality of your code base, the development speed of your team, and the end-result of the UI\ncan suffer from following dogma.\nDo what's best for your team, and don't knock CSS-in-JS until you try it with a team working on a real product.</p>\n<h2>Styled System</h2>\n<p>As the author of <a href=\"https://styled-system.com\">Styled System</a>, I can't recommend it enough.\nWhile Emotion and Styled Components give you a way to write, bundle, and use CSS, they mostly leave it up to you to decide <em>how</em> the styling should actually work.</p>\n<p>Styled System is a fairly simple idea.\nIt transforms a theme object, built with scales and design constraints in mind, into component-based styles.\n(The theme object is sort of a constraint-based schema for groups of related <em>design tokens</em> or raw style values, if you will.)\nIt's meant to make doing the right thing easy,\nwhile also affording\ndevelopers just enough flexibility to maintain a high velocity.\nWith Styled System, your components have easy access to colors, font sizes, a space scale for margin and padding, and any other visual styles that you'd like to keep consistent across your application.\nEven if you've never heard of Styled System, you've likely seen its influence in other related libraries.</p>\n<h2>Gatsby</h2>\n<p>Once you have tools to build the components themselves,\nyou'll need a way to document them.\n<a href=\"https://gatsbyjs.org\">Gatsby</a> is an excellent tool for building applications in React, and it's an excellent choice for building documentation for component libraries.\nIt's even used to build the official <a href=\"https://reactjs.org\">React</a> docs themselves.\nGatsby removes a lot of the complexity involved in setting up a React application.\nAnd now with the official release <a href=\"https://www.gatsbyjs.org/blog/2019-07-03-announcing-stable-release-gatsby-themes/\">Gatsby themes</a>, you can package up virtually any functionality you'd like to reuse across multiple sites.\nI suspect people working in the design systems space will\ncome up with some interesting applications for themes.</p>\n<p>Another use case for Gatsby, that I haven't seen a lot of exploration of yet, is its potential as a prototyping tool.\nIf your production application has an API, or you want to integrate with existing data sources or services,\nGatsby has a growing ecosystem of plugins that make pulling data into your site really easy.\nWith the right setup, a developer could create blank templates for different parts of an application and allow designers to build prototypes with the components from the actual design system library,\nwhile remaining\ncompletely isolated from the production application.</p>\n<h2>MDX</h2>\n<p>Markdown is an excellent tool for developer documentation.\n<a href=\"https://mdxjs.com\">MDX</a> gives markdown super powers by allowing you to import and use React components inline with other markdown content.\nYou can also change what components are used to render different elements in markdown.\nMany people use this feature to build live-editable code examples\nwith fenced code blocks.\nWith this level of flexibility,\nMDX seems like an obvious choice for documenting design systems.\nIf you've tried out MDX in the past, but it didn't <em>click</em>, I'd highly recommend checking it out now that the stable v1 has been released.</p>\n<p>Authoring documentation in MDX means that it should be portable enough to render in different React applications,\neven if you're torn between using Gatsby and other options like <a href=\"https://docz.site/\">Docz</a>, <a href=\"https://storybook.js.org/\">Storybook</a> or <a href=\"https://nextjs.org\">Next.js</a>.\nWhatever you do, try to avoid locking yourself in to proprietary formats\nor bending backwards for library-specific APIs when it comes to documentation.</p>\n<h2>React Live</h2>\n<p>So how do you go about building live-editable code examples? <a href=\"https://github.com/FormidableLabs/react-live\">React Live</a>.\nIt's an excellent library on its own, and when combined with MDX, it makes creating rich documentation for React components incredibly easy.\nTo learn how to set this up, see the official <a href=\"https://mdxjs.com/guides/live-code\">MDX guide</a>.</p>\n<h2>What about Theme UI?</h2>\n<p>If you follow my work, you may be asking how <a href=\"https://theme-ui.com\">Theme UI</a> fits into the picture.\nTheme UI is a much newer library, but it's built on top of the foundation of the libraries mentioned in this post.\nAt this point, I'm unsure how a library like Theme UI would fit in to a <em>corporate</em> design system,\nbut I do think it would be an excellent choice for agencies who need to build more general-purpose solutions.\nIf you're willing to give it a shot, let me know how it goes.</p>\n<hr>\n<p>Hopefully this little list is helpful in some small way,\nand I hope you can take some ideas here for your own design systems work.</p>\n<p>Shoutout to the people who work on the following design systems which helped serve as inspiration for this post:</p>\n<ul>\n<li><a href=\"https://sproutsocial.com/seeds/\">SproutSocial Seeds</a></li>\n<li><a href=\"https://primer.style/components\">Primer Components</a></li>\n<li><a href=\"https://palette.artsy.net/\">Artsy Palette</a></li>\n</ul>\n"},{"path":"blog/iterations-on-a-theme","slug":"iterations-on-a-theme","title":"Iterations on a Theme","description":"A look at common threads across over 500 GitHub repos","date":"2019-04-06T00:00:00.000Z","excerpt":"A look at common threads across over 500 GitHub repos","html":"<p>As my personal GitHub account rolls over 500 repos (apparently a few of them are private), it felt like a good time to reflect on how I approach using GitHub personally.\nYou might say, <em>\"500! Whoa, buddy, that's way too many repos!\"</em> Believe me, it is.\nThere are other people who do a much better job at staying organized than I do.\nBut most of my repos aren't fully-baked open source projects.\nI see a lot of them as small experiments, my attempt to <em><a href=\"https://gist.github.com/sw-yx/9720bd4a30606ca3ffb8d407113c0fe5\">learn in public</a></em>, or, for many of them, <strong>iterations on a theme</strong>.</p>\n<p>It might look like I'm cranking out new things left and right sometimes,\nbut often I get the itch to rework an old idea,\nas a complete rewrite, with no baggage attached.\nThere's certainly something to be said about starting with a blank slate.\nI need to do a better job of managing expectations,\nsince a lot of these aren't intended to be hard dependencies in an application,\nbut serve as good starting points for forking or suggestions for features in upstream libraries.</p>\n<p>For example, <a href=\"https://rebassjs.org\">Rebass</a> (didn't invent but) included a <a href=\"https://github.com/jxnblk/axs/commit/b54d8527e6e19ec1177cb8894af9870a84a16962\"><code>css</code> prop</a> until <a href=\"https://styled-components.com\">styled-components</a> included one as well [^1].\nIt also had an <a href=\"https://github.com/rebassjs/rebass/commit/3201fd119313214c0a16b167b81e4ae9a71c2e98\"><code>is</code> prop</a>, until it was adopted and renamed <code>as</code>.\nThe idea with these features was never to own these concepts forever,\nbut to serve as a testing bed in userland and prove out APIs that might make sense in upstream libraries,\nmany of which weren't mature enough for a formal PR.\nSome repos and ideas fall on the other side of the fence, not being all that great, and I think were better left as experiments.</p>\n<p>In looking back on some of these repos, I started thinking about how they've evolved over time and noticed a few overarching themes.</p>\n<h2>Static Site Generators &#x26; Zero-Config</h2>\n<p>Ever since learning about <a href=\"https://github.com/jekyll/jekyll\">Jekyll</a> years ago,\nI've been fascinated with the idea of generating simple static sites with modern tooling.\nWhat started as a <a href=\"https://jxnblk.com/blog/static-site-generation-with-react-and-webpack\">blog post</a> about static site generation in 2015, became a <a href=\"https://jxnblk.com/blog/zero-configuration-react-static-site-generator/\">zero-config CLI</a> in 2016 (appropriately named <a href=\"https://github.com/jxnblk/static-react\">static-react</a>).\nI took the same zero-config philosophy and applied it to webpack with a CLI named <a href=\"https://github.com/jxnblk/hotdamn\">hotdamn</a> (it even supported markdown for content).\nI was also really interested in the idea of how to make React more accessible to people who weren't JavaScript developers and made <a href=\"https://github.com/jxnblk/ejsx\">Ejsx</a>.\nIn 2017, working with a few others, some of these ideas became <a href=\"https://github.com/c8r/x0\">x0</a> and a little later <a href=\"https://github.com/jxnblk/mdx-go\">mdx-go</a>.\nI'll also admit that I have several private repos that generate static HTML through some means or another.\nI might be a little obsessed with this idea.</p>\n<!--\nHow to I loop this in without clumping it in?\n\nI might be a little obsessed with the idea of making performant websites and making that easier,\nbut I guess it's only appropriate that I've ended up at a place like [Gatsby][].\n(which, by the way, is *so* much more than a static site generator)\n-->\n<h2>Avoiding Learning Tools</h2>\n<p>Another related theme I've pick up on, is my reluctance to use existing tools for the job at hand.\nInstead of firing up Adobe Illustrator to create yet another Twitter card image or favicon,\nI made <a href=\"https://github.com/jxnblk/repng\">Repng</a> so that I could create images with React components.\nI put together <a href=\"https://github.com/c8r/pixo\">Pixo</a> so that I could avoid manually converting SVG icons into React[^2].\nEven <a href=\"https://colorable.jxnblk.com\">Colorable</a>, <a href=\"https://palx.jxnblk.com\">Palx</a>, and <a href=\"https://monochrome.jxnblk.com\">Monochrome</a> are partly motivated by not wanting to fire up a graphics application.</p>\n<p>A couple years ago, I put together a last-minute <a href=\"https://github.com/jxnblk/react-design-tooling\">presentation for a meetup</a>, and like any good JavaScript developer,\ninstead of reaching for Google Slides, I rolled my own React app.\nThe next time someone twisted my arm to speak in front of other people,\nI abstracted that out into a component library called <a href=\"https://github.com/jxnblk/redeck\">Redeck</a>.\nA little later, after <a href=\"https://github.com/johno\">John Otander</a> et al. had released <a href=\"https://mdxjs.com\">MDX</a>, I took that slideshow presentation library and turned it into <a href=\"https://github.com/jxnblk/mdx-deck\">MDX Deck</a>.</p>\n<h2>Styling &#x26; Cheap UI</h2>\n<p>A fair chunk of my professional work has been around creating UI.\nIf you do that long enough, you realize there's a <em>ton</em> of ways to lower the amount of effort that requires.\nI use the term <strong>Cheap UI</strong> when I talk about this sort of thing,\nbecause I think ultimately the cost of what we do today will continue to approach zero in the future.\nIn the world of A/B experimentation and constant iteration, making UI cheaper to produce, only makes sense[^3].</p>\n<p>In 2013, I released <a href=\"http://basscss.com\">Basscss</a>, which was largely based on principles from <a href=\"https://mobile.twitter.com/stubbornella/\">Nicole Sullivan's</a> <a href=\"https://github.com/stubbornella/oocss/wiki\">OOCSS</a>,\n<a href=\"https://github.com/necolas\">Nicolas Gallagher's</a> <a href=\"https://github.com/suitcss/suit\">Suit CSS</a>, and a lot of discussions with <a href=\"https://github.com/mrmrs\">Adam Morse</a>.\nIt was my attempt to make building UI as quick and cheap as possible.\nThat worked well for the time, and served as inspiration for other libraries, like Buzzfeed's <a href=\"https://solid.buzzfeed.com/\">Solid</a>.\nAs soon as I'd taken the time to learn React, I could tell it was the next big thing,\nand I immediately tried to apply some of this same thinking in <a href=\"https://rebassjs.org\">Rebass</a> and <a href=\"https://github.com/jxnblk/reflexbox\">Reflexbox</a>.\nRebass continued to evolve, eventually swapping out CSS for inline styles,\nwhich made sharing components via npm even simpler.</p>\n<p>As I continued working on Rebass, I tried out some of the cutting edge CSS-in-JS libraries of the time <a href=\"https://github.com/Khan/aphrodite\">Aphrodite</a> and <a href=\"https://github.com/FormidableLabs/radium\">Radium</a>.\nFor reasons I can't quite remember, neither one seemed to fit quite what I wanted.\nSo I started hacking on <a href=\"https://github.com/cxs-css/cxs\">CXS</a> to try to find a simple, lightweight API for styling React components.\nA <em>ton</em> of other similar libraries sprung up around the same time, including <a href=\"https://github.com/threepointone/glamor\">Glamor</a>,\nwhich looked considerably better than anything I would've done.\nRealizing that it'd only be a matter of time until my ideal CSS-in-JS solution existed,\nI continued to iterate on the higher-level component APIs that I wanted to have for building UI.\nSince Rebass had matured a bit, I didn't want to rock the boat too much for people who were using the library,\nand I started another blank-slate project called <a href=\"https://github.com/jxnblk/axs\">Axs</a>.\nAxs is probably one of my least popular libraries, but it's really where the inception of <a href=\"https://styled-system.com\">Styled System</a> happened.</p>\n<p>The first version of Axs had a props API that looked a lot like Basscss.\nAfter writing responsive styles with props like <code>w={1} sw={1/2} mw={1/3} lw={1/4}</code> for a while\n(that's shorthand for <code>width</code>, <code>small-width</code>, <code>medium-width</code>, <code>large-width</code>),\nI realized they could be combined into a single prop as an array, making it <code>width={[ 1, 1/2, 1/3, 1/4 ]}</code>.\nThis is JavaScript, after all.\nI loved this API, but wasn't sure if I'd gone too far down a rabbithole.\nI convinced some coworkers to try this approach out on some smaller projects (not the best thing to do, professionally),\nand surprisingly, they seemed to like the API as well.</p>\n<p>A little later, <a href=\"https://styled-components.com\">Styled Components</a> was released,\nand I immediately realized it was what I wanted to use to build Rebass.\nAfter a little more tinkering and experimentation, I released <a href=\"https://styled-system.com\">Styled System</a>,\ntaking the props API from Axs and making it available for anyone to build their own version of Rebass.</p>\n<h2>Iteration</h2>\n<p>I like reflecting on these experiments because I think it goes to show how some ideas take time to form.\nAs they say, <em>if at first you don't succeed, try, try again</em>.\nI may be a little too quick to throw the baby out with the bathwater sometimes,\nbut I don't think some of the libraries that I'm most proud of would have ever existed if I hadn't continually\npushed myself to try things in new ways and get out of my comfort zone a little bit.</p>\n<p>Hopefully, this encourages you to try new things and not worry too much if your new repo doesn't make it to the front page of Hacker News.\nI know I'd love to see more experimentation and more ideas out there in this weird space we call open source.</p>\n<p>[^1]: I think the <code>css</code> prop originated in <a href=\"https://github.com/threepointone/glamor\">Glamor</a>, but I could be wrong.\n[^2]: There are better tools for SVGs now, see <a href=\"https://github.com/smooth-code/svgr\">SVGR</a>.\n[^3]: I'm not talking about robots replacing designers here. The idea here is that the level at which people think about UI and design products becomes a lot higher than what we do today. Software has a tendency to trend towards higher-level abstractions. I don't plan on learning assembly language any time soon, and the things we do today will be viewed in a similar way in the future.</p>\n"},{"path":"blog/interoperability","slug":"interoperability","title":"Interoperability","description":"Using standards-based approaches for UI component interoperability","date":"2019-03-21T00:00:00.000Z","excerpt":"Using standards-based approaches for UI component interoperability","html":"<p>Back in early 2013, I was working at a small startup in San Francisco called Stitch Fix, alongside Adam Morse and a handful of others.\nWe were designing and building out early versions of their marketing pages and some internal tools.\nI had the word designer in my title, and until that point in my career, I'd not shipped much production code for work.\nI learned Flash in college and taught myself HTML and CSS on the side over the years, using it for small side projects and design prototypes for user research, but had never used Git and knew next-to-nothing about JavaScript.</p>\n<p>We were both enamored by the work that people like Nicole Sullivan and Nicolas Gallagher were doing with Object-Oriented CSS and stealing lots of ideas for what we were working on.\nAfter we left the company, I decided to move back to the east coast and work for Kickstarter.</p>\n<p>In late 2013, I'd taken some of the ideas Adam and I were talking about at the time, and some of the problems we were working on at Kickstarter (involving a 1MB+ CSS bundle), and released the first version of Basscss.\nAround the same time, Adam released Tachyons.\nWe both continued to develop each project separately and never landed on a common API for the two libraries.</p>\n<h2>Naming things is hard</h2>\n<p>In hindsight, I wish I'd pushed forward with Tachyons naming conventions, but at the time, I don't think my team would have gone for it.\nI had changed <code>btn</code> to <code>button</code> because the designers &#x26; developers I worked with prefered \"human readable\" naming conventions.\nThere's nothing objectively more or less \"human readable\" between <code>btn</code> or <code>button</code>, but I do understand the concern and think it's valuable to side with the team your working with in situations like this.\nBut there's no reason Basscss, as an open source library, had to adhere to the same conventions.</p>\n<p>The real tragedy here in the divergent naming conventions is that if you've started building an application with Basscss,\nbut then want to upgrade to something more fully-featured like Tachyons, you'll have to do a lot of manual work to migrate.\nEssentially, HTML templates written with either of these libraries aren't as portable as if we'd used a standard syntax, for example inline styles.\nToday's tools would make this a lot easier, using type checking, unit tests, and perhaps even AST parsing, but it would still create a barrier.</p>\n<p>The <strong>interoperability</strong> between these two libraries suffered because\n<em>what</em> they did, was different from <em>how</em> they did it.</p>\n<p>Around the same time, Etsy adopted a similar approach with slightly different naming conventions, and as the years passed,\nso did BuzzFeed Solid, GitHub Primer, and Bootstrap – and now there are other open source libraries doing the same thing with, again, new naming conventions.\nI don't mean to call these projects out in a bad way – I think they took (what I think was) a good idea and made it work for their team.</p>\n<h2>Learning from the past</h2>\n<p>The paradigm of atomic/functional/utility CSS has passed.\nI don't think there are any problems left to solve in this space, and, in my opinion, Tachyons has done the best job at it.\nIt's still a valid approach to styling an application,\nbut if you're using a modern front-end stack with React,\nI wouldn't recommend using a CSS library like these to build out an application.\nLibraries like <a href=\"https://styled-components.com\">Styled Components</a> and <a href=\"https://emotion.sh\">Emotion</a> are tools much better suited to the job and will save you a lot of headache in the long run.</p>\n<h2>Let's not do this again</h2>\n<p>Why am I talking about approaches to CSS from five years ago?\nCall me naive, but I like to think that humans are capable of learning from their past mistakes.\nA lot of modern front-end libraries are starting to settle on more standard, more interoperable APIs that help reduce lock-in.\nTake React and Preact, or Styled Components and Emotion.\nThese libraries share virtually the same API, which means teams can easily migrate from one to another in the span of an afternoon.\nThis is a great thing, and it allows developers to start thinking at a higher level of abstraction.</p>\n<p>Styled System is one small attempt at a higher level of abstraction on top of the current CSS-in-JS libraries.\nIt's completely decoupled from Styled Components, Emotion, and even React itself.\nFor the most part, Styled System uses CSS property names as React component props,\nwhich is something that other libraries do as well and doesn't require much additional learning if you already know <em>some</em> CSS.\nI think this is great.\nSome libraries have even re-implemented the core of Styled System for various reasons,\nwhich I think is fine and helps encourage exploration.</p>\n<p>Where I see differences start to arise is at the theme definition level.\nEven outside of React context-based theming, a lot of React applications will store global style constants in a common module.\nSomething I'm starting to notice is that there are no standard conventions for what that module contains or how its structured,\nbut all of them seem to be doing the same thing, in a slightly different way.</p>\n<h2>Design System Tokens</h2>\n<p>I suspect a lot of the tooling for styling applications would benefit from having a standard theming format for storing these values.\nJina Anne pioneered the concept of <em>design system tokens</em> [^1] years ago,\nand a lot of teams have successfully adopted approaches like this, which I think is fantastic.\nIf you're already familiar with the idea of <em>design system tokens</em>, you're one step closer to seeing the value in a standard theming format.</p>\n<p>Design system tokens are meant to be flexible and work cross-platform, which means different teams,\ndifferent implementations, and different libraries will name things differently.\nThis is where this specification would fit in.\nA lot of interoperability could be realized,\nif we all, for example, named our color palette <code>colors</code> and named the font sizes we use <code>fontSizes</code>.\nWhat you do beyond that and what data format you use to store these values, is up to you.\nIt's trivial to convert JSON to ES modules to YAML or even TOML, if that's your thing.\nIt's also just a data structure, so transforming between other data structures (e.g. design tools or a GraphQL API) should also be possible.\nThis standard also wouldn't try to solve the extremely complex problems of how to name the colors themselves.</p>\n<h2>A Theme Specification</h2>\n<p>If I haven't lost you by now, and if this interests you,\nI've started a rough idea of what this could look like here: <a href=\"https://system-ui.com/theme/\">Theme Specification</a>.\nImagine if the entire ecosystem of open source React UI components adhered to a common naming convention for theming,\nwhile still allowing you to choose the CSS-in-JS library of your choice.\nAny new UI component you add to your application,\ncould instantly pick up the values from your theme and mimic the look and feel of the rest of your application,\nwithout needing to write any custom CSS.\nI think that could be pretty cool.</p>\n<p>~~Ultimately this specification should be completely decoupled from the Styled System library, and I can move this to a more neutral location in the near future, but this seemed like a logical place to start this discussion.~~</p>\n<p>Let me know what you think on <a href=\"https://mobile.twitter.com/jxnblk/status/1107726037805424641\">Twitter</a>\nor by <a href=\"https://github.com/system-ui/theme-specification/issues\">opening an issue</a>.</p>\n<p>[^1]: Design system tokens are a fantastic abstraction. They try to solve the problem of sharing a brand's core style values cross-platform,\nwhereas this specification is (initially) primarily focused on CSS/JS development – i.e. a potential <em>output</em> from design tokens.\nDesign system tokens and this theme specification should be completely compatible with each other and decoupled from one another.</p>\n"},{"path":"blog/development-driven-design-systems","slug":"development-driven-design-systems","title":"Development-Driven Design Systems","description":null,"date":"2019-03-18T00:00:00.000Z","excerpt":"<!--\nModern front end design systems\nModern front end tooling for design systems\n-->\n<p>Intro</p>\n<ul>\n<li>\n<p>Basscss, CSS Stats, Rebass, styled system</p>\n</li>\n<li>\n<p>Design system site screenshot</p>\n</li>\n<li>\n<p>Background</p>\n</li>\n<li>\n<p>Tools we use</p>\n</li>\n<li>\n<p>What's next</p>\n</li>\n<li>\n<p>Future</p>\n</li>\n</ul>\n<p>Images</p>\n<ul>\n<li>\n<p>tool correction</p>\n</li>\n<li>\n<p>Collaborators list</p>\n</li>\n<li>\n<p>Rebass HN quote</p>\n</li>\n<li>\n<p>intro</p>\n</li>\n<li>\n<p>I like tools</p>\n</li>\n<li>\n<p>Background</p>\n<ul>\n<li>Hackathon</li>\n<li>Siloed teams &#x26; separate apps</li>\n<li>\"Common Components\"</li>\n<li>No open source</li>\n<li>React, styled components, npm</li>\n<li>Catering to Developer problems</li>\n<li>GitHub: Open Source from the start</li>\n<li>Shared ownership\n<ul>\n<li>Contributors list</li>\n</ul>\n</li>\n<li>Make it so good people want to use it</li>\n<li>\"Make it go viral\"</li>\n</ul>\n</li>\n<li>\n<p>Tools we use</p>\n<ul>\n<li>React</li>\n<li>SC</li>\n<li>Jest</li>\n<li>styled-system</li>\n<li>PRs &#x26; Issues</li>\n<li>Travis CI</li>\n<li>Slack</li>\n<li>Meetings &#x26; zoom</li>\n<li>Redline specs &#x26; QA</li>\n<li>Storybook</li>\n</ul>\n</li>\n<li>\n<p>Cheap UI</p>\n<ul>\n<li>Iron triangle</li>\n<li>Lean UI</li>\n</ul>\n</li>\n<li>\n<p>What's next</p>\n<ul>\n<li>Documentation site\n<ul>\n<li>Markdown</li>\n<li>React Live</li>\n<li>Travis CI</li>\n</ul>\n</li>\n<li>html sketchapp</li>\n<li>Prototyping tools</li>\n</ul>\n</li>\n<li>\n<p>Future tooling</p>\n<ul>\n<li>Written language and math are incredible tools</li>\n<li>We teach children fractions</li>\n<li>But don't expect them to become PHDs</li>\n<li>Bicycle of the mind</li>\n<li>Code is how you ride the bike</li>\n<li>Code is about layers of abstraction</li>\n<li>Abstractions on top of HTML, CSS, &#x26; JavaScript</li>\n<li>Current tooling has not kept up with front end development</li>\n<li>Browser inspector is too low level</li>\n<li>React, ES6, Graphql</li>\n</ul>\n</li>\n<li>\n<p>Shoutouts</p>\n<ul>\n<li>Nicole Sullivan</li>\n<li>Jessica Harlee</li>\n<li>Lara Hogan</li>\n<li>Jina Anne</li>\n<li>Diana</li>\n</ul>\n</li>\n<li>\n<p>Thanks</p>\n</li>\n<li>\n<p>References</p>\n</li>\n</ul>\n<hr>\n<p>Styled System</p>\n<ul>\n<li>SC and other CSS-in-JS</li>\n<li>Components as an abstraction on top of CSS</li>\n<li>Can still drop back into low-level CSS when needed</li>\n<li>Consumers of the components don't need to think about CSS implementation</li>\n<li>Dynamic/functional styles</li>\n<li>Authoring with s2</li>\n<li>Consuming s2 components</li>\n</ul>\n<hr>\n<p>Cheap UI</p>\n<ul>\n<li>iron triangle</li>\n<li>Good cheap fast</li>\n<li>Mythical man-month brooks law</li>\n</ul>\n<p>Pretty sure that LinkNYC is some sort of self-replicating, ancient alien artificial intelligence</p>\n<p>Developer tooling for design systems</p>\n<ul>\n<li>\n<p>Developer first</p>\n</li>\n<li>\n<p>DRY</p>\n</li>\n<li>\n<p>React + styled components</p>\n<ul>\n<li>Isolated styles</li>\n<li>no clashing</li>\n<li>Overrides happen in separate apps</li>\n</ul>\n</li>\n<li>\n<p>Storybook</p>\n</li>\n<li>\n<p>npm</p>\n</li>\n<li>\n<p>Siloed teams</p>\n</li>\n<li>\n<p>Shared components</p>\n</li>\n<li>\n<p>Separate UI</p>\n</li>\n<li>\n<p>Dev velocity</p>\n</li>\n<li>\n<p>Cheap UI</p>\n<ul>\n<li>Expensive UI</li>\n<li>ROI</li>\n</ul>\n</li>\n<li>\n<p>Redline specs</p>\n</li>\n<li>\n<p>QA cycles</p>\n</li>\n<li>\n<p>Feel the pain before you want the bandaid</p>\n</li>\n<li>\n<p>Open Source</p>\n</li>\n<li>\n<p>Consumed but didn't contribute</p>\n</li>\n<li>\n<p>Open source from the start</p>\n</li>\n<li>\n<p>GitHub</p>\n</li>\n<li>\n<p>PRs and issues</p>\n</li>\n<li>\n<p>Great professional experience for developers</p>\n</li>\n<li>\n<p>don't enforce it</p>\n</li>\n<li>\n<p>Make it so good people want to use it</p>\n</li>\n<li>\n<p>Make it so that teams can make it work for them</p>\n</li>\n<li>\n<p>\"Make it go viral\"</p>\n</li>\n<li>\n<p>Styled system</p>\n</li>\n<li>\n<p>By the time the designers asked for it, we already had it in place</p>\n</li>\n</ul>\n<!--\n- Next\n\t- Docs site\n\t- Chromatic\n\t- Sketchapp html\n\t- Compositor\n-->\n<p>What makes React hard?</p>\n<ul>\n<li>\n<p>today's web is built on a layer of abstraction where design tools have not kept up</p>\n</li>\n<li>\n<p>Browser inspectors and debuggers are too low level</p>\n</li>\n<li>\n<p>typical approach: design driven</p>\n</li>\n<li>\n<p>Dev was mentally ready before design team</p>\n</li>\n<li>\n<p>Catering to Developer needs</p>\n</li>\n<li>\n<p>I’ve seen DS efforts struggle because a lack of understanding on the dev side</p>\n</li>\n<li>\n<p>DRY principle</p>\n</li>\n<li>\n<p>No one wants to write CSS</p>\n</li>\n<li>\n<p>Faster dev velocity</p>\n</li>\n<li>\n<p>\"Cheap UI\"</p>\n</li>\n<li>\n<p>Devs hate redline specs and extra QA cycles</p>\n</li>\n<li>\n<p>Right mix of tools</p>\n<ul>\n<li>react, sc, npm, storybook, graphql</li>\n</ul>\n</li>\n<li>\n<p>shared components</p>\n</li>\n<li>\n<p>Refinement of an idea</p>\n</li>\n<li>\n<p>Bootstrap, Base css, Rebass, css in js, styled components, styled system</p>\n</li>\n<li>\n<p>Siloed teams</p>\n</li>\n<li>\n<p>Encourage everyone to contribute</p>\n</li>\n</ul>\n<p>Collaboration tools</p>\n<ul>\n<li>\n<p>github (issues, PRs, pages)</p>\n</li>\n<li>\n<p>storybook</p>\n</li>\n<li>\n<p>No one wants redline specs</p>\n<ul>\n<li>feel the pain before wanting a solution</li>\n</ul>\n</li>\n<li>\n<p>Slack</p>\n</li>\n<li>\n<p>components</p>\n</li>\n<li>\n<p>React components</p>\n</li>\n<li>\n<p>Composition</p>\n</li>\n<li>\n<p>Functional composition</p>\n</li>\n<li>\n<p>HN quotes</p>\n</li>\n<li>\n<p>Atomic design slide</p>\n</li>\n<li>\n<p>theming</p>\n</li>\n<li>\n<p>Interchangeable</p>\n</li>\n<li>\n<p>Components</p>\n</li>\n<li>\n<p>Interchangeable Components</p>\n</li>\n<li>\n<p>Components as configuration</p>\n</li>\n<li>\n<p>Standard Components</p>\n</li>\n</ul>\n<!--\n\nhttps://mobile.twitter.com/markdalgleish/status/923287092704055296?ref_src=twcamp%5Eshare%7Ctwsrc%5Eios%7Ctwgr%5Eother%7Ctwcon%5E7100%7Ctwterm%5E0\n\nhttps://mobile.twitter.com/markdalgleish/status/931692003405864960?ref_src=twcamp%5Eshare%7Ctwsrc%5Eios%7Ctwgr%5Eother%7Ctwcon%5E7100%7Ctwterm%5E0\n\n\nI love tooling. I love talking about tooling.\nSo much so that I was once called a tool.\n\nhttp://blog.jess3.com/2015/03/jxnblk-an-essential-design-tool.html\n\n-->\n","html":"<!--\nModern front end design systems\nModern front end tooling for design systems\n-->\n<p>Intro</p>\n<ul>\n<li>\n<p>Basscss, CSS Stats, Rebass, styled system</p>\n</li>\n<li>\n<p>Design system site screenshot</p>\n</li>\n<li>\n<p>Background</p>\n</li>\n<li>\n<p>Tools we use</p>\n</li>\n<li>\n<p>What's next</p>\n</li>\n<li>\n<p>Future</p>\n</li>\n</ul>\n<p>Images</p>\n<ul>\n<li>\n<p>tool correction</p>\n</li>\n<li>\n<p>Collaborators list</p>\n</li>\n<li>\n<p>Rebass HN quote</p>\n</li>\n<li>\n<p>intro</p>\n</li>\n<li>\n<p>I like tools</p>\n</li>\n<li>\n<p>Background</p>\n<ul>\n<li>Hackathon</li>\n<li>Siloed teams &#x26; separate apps</li>\n<li>\"Common Components\"</li>\n<li>No open source</li>\n<li>React, styled components, npm</li>\n<li>Catering to Developer problems</li>\n<li>GitHub: Open Source from the start</li>\n<li>Shared ownership\n<ul>\n<li>Contributors list</li>\n</ul>\n</li>\n<li>Make it so good people want to use it</li>\n<li>\"Make it go viral\"</li>\n</ul>\n</li>\n<li>\n<p>Tools we use</p>\n<ul>\n<li>React</li>\n<li>SC</li>\n<li>Jest</li>\n<li>styled-system</li>\n<li>PRs &#x26; Issues</li>\n<li>Travis CI</li>\n<li>Slack</li>\n<li>Meetings &#x26; zoom</li>\n<li>Redline specs &#x26; QA</li>\n<li>Storybook</li>\n</ul>\n</li>\n<li>\n<p>Cheap UI</p>\n<ul>\n<li>Iron triangle</li>\n<li>Lean UI</li>\n</ul>\n</li>\n<li>\n<p>What's next</p>\n<ul>\n<li>Documentation site\n<ul>\n<li>Markdown</li>\n<li>React Live</li>\n<li>Travis CI</li>\n</ul>\n</li>\n<li>html sketchapp</li>\n<li>Prototyping tools</li>\n</ul>\n</li>\n<li>\n<p>Future tooling</p>\n<ul>\n<li>Written language and math are incredible tools</li>\n<li>We teach children fractions</li>\n<li>But don't expect them to become PHDs</li>\n<li>Bicycle of the mind</li>\n<li>Code is how you ride the bike</li>\n<li>Code is about layers of abstraction</li>\n<li>Abstractions on top of HTML, CSS, &#x26; JavaScript</li>\n<li>Current tooling has not kept up with front end development</li>\n<li>Browser inspector is too low level</li>\n<li>React, ES6, Graphql</li>\n</ul>\n</li>\n<li>\n<p>Shoutouts</p>\n<ul>\n<li>Nicole Sullivan</li>\n<li>Jessica Harlee</li>\n<li>Lara Hogan</li>\n<li>Jina Anne</li>\n<li>Diana</li>\n</ul>\n</li>\n<li>\n<p>Thanks</p>\n</li>\n<li>\n<p>References</p>\n</li>\n</ul>\n<hr>\n<p>Styled System</p>\n<ul>\n<li>SC and other CSS-in-JS</li>\n<li>Components as an abstraction on top of CSS</li>\n<li>Can still drop back into low-level CSS when needed</li>\n<li>Consumers of the components don't need to think about CSS implementation</li>\n<li>Dynamic/functional styles</li>\n<li>Authoring with s2</li>\n<li>Consuming s2 components</li>\n</ul>\n<hr>\n<p>Cheap UI</p>\n<ul>\n<li>iron triangle</li>\n<li>Good cheap fast</li>\n<li>Mythical man-month brooks law</li>\n</ul>\n<p>Pretty sure that LinkNYC is some sort of self-replicating, ancient alien artificial intelligence</p>\n<p>Developer tooling for design systems</p>\n<ul>\n<li>\n<p>Developer first</p>\n</li>\n<li>\n<p>DRY</p>\n</li>\n<li>\n<p>React + styled components</p>\n<ul>\n<li>Isolated styles</li>\n<li>no clashing</li>\n<li>Overrides happen in separate apps</li>\n</ul>\n</li>\n<li>\n<p>Storybook</p>\n</li>\n<li>\n<p>npm</p>\n</li>\n<li>\n<p>Siloed teams</p>\n</li>\n<li>\n<p>Shared components</p>\n</li>\n<li>\n<p>Separate UI</p>\n</li>\n<li>\n<p>Dev velocity</p>\n</li>\n<li>\n<p>Cheap UI</p>\n<ul>\n<li>Expensive UI</li>\n<li>ROI</li>\n</ul>\n</li>\n<li>\n<p>Redline specs</p>\n</li>\n<li>\n<p>QA cycles</p>\n</li>\n<li>\n<p>Feel the pain before you want the bandaid</p>\n</li>\n<li>\n<p>Open Source</p>\n</li>\n<li>\n<p>Consumed but didn't contribute</p>\n</li>\n<li>\n<p>Open source from the start</p>\n</li>\n<li>\n<p>GitHub</p>\n</li>\n<li>\n<p>PRs and issues</p>\n</li>\n<li>\n<p>Great professional experience for developers</p>\n</li>\n<li>\n<p>don't enforce it</p>\n</li>\n<li>\n<p>Make it so good people want to use it</p>\n</li>\n<li>\n<p>Make it so that teams can make it work for them</p>\n</li>\n<li>\n<p>\"Make it go viral\"</p>\n</li>\n<li>\n<p>Styled system</p>\n</li>\n<li>\n<p>By the time the designers asked for it, we already had it in place</p>\n</li>\n</ul>\n<!--\n- Next\n\t- Docs site\n\t- Chromatic\n\t- Sketchapp html\n\t- Compositor\n-->\n<p>What makes React hard?</p>\n<ul>\n<li>\n<p>today's web is built on a layer of abstraction where design tools have not kept up</p>\n</li>\n<li>\n<p>Browser inspectors and debuggers are too low level</p>\n</li>\n<li>\n<p>typical approach: design driven</p>\n</li>\n<li>\n<p>Dev was mentally ready before design team</p>\n</li>\n<li>\n<p>Catering to Developer needs</p>\n</li>\n<li>\n<p>I’ve seen DS efforts struggle because a lack of understanding on the dev side</p>\n</li>\n<li>\n<p>DRY principle</p>\n</li>\n<li>\n<p>No one wants to write CSS</p>\n</li>\n<li>\n<p>Faster dev velocity</p>\n</li>\n<li>\n<p>\"Cheap UI\"</p>\n</li>\n<li>\n<p>Devs hate redline specs and extra QA cycles</p>\n</li>\n<li>\n<p>Right mix of tools</p>\n<ul>\n<li>react, sc, npm, storybook, graphql</li>\n</ul>\n</li>\n<li>\n<p>shared components</p>\n</li>\n<li>\n<p>Refinement of an idea</p>\n</li>\n<li>\n<p>Bootstrap, Base css, Rebass, css in js, styled components, styled system</p>\n</li>\n<li>\n<p>Siloed teams</p>\n</li>\n<li>\n<p>Encourage everyone to contribute</p>\n</li>\n</ul>\n<p>Collaboration tools</p>\n<ul>\n<li>\n<p>github (issues, PRs, pages)</p>\n</li>\n<li>\n<p>storybook</p>\n</li>\n<li>\n<p>No one wants redline specs</p>\n<ul>\n<li>feel the pain before wanting a solution</li>\n</ul>\n</li>\n<li>\n<p>Slack</p>\n</li>\n<li>\n<p>components</p>\n</li>\n<li>\n<p>React components</p>\n</li>\n<li>\n<p>Composition</p>\n</li>\n<li>\n<p>Functional composition</p>\n</li>\n<li>\n<p>HN quotes</p>\n</li>\n<li>\n<p>Atomic design slide</p>\n</li>\n<li>\n<p>theming</p>\n</li>\n<li>\n<p>Interchangeable</p>\n</li>\n<li>\n<p>Components</p>\n</li>\n<li>\n<p>Interchangeable Components</p>\n</li>\n<li>\n<p>Components as configuration</p>\n</li>\n<li>\n<p>Standard Components</p>\n</li>\n</ul>\n<!--\n\nhttps://mobile.twitter.com/markdalgleish/status/923287092704055296?ref_src=twcamp%5Eshare%7Ctwsrc%5Eios%7Ctwgr%5Eother%7Ctwcon%5E7100%7Ctwterm%5E0\n\nhttps://mobile.twitter.com/markdalgleish/status/931692003405864960?ref_src=twcamp%5Eshare%7Ctwsrc%5Eios%7Ctwgr%5Eother%7Ctwcon%5E7100%7Ctwterm%5E0\n\n\nI love tooling. I love talking about tooling.\nSo much so that I was once called a tool.\n\nhttp://blog.jess3.com/2015/03/jxnblk-an-essential-design-tool.html\n\n-->\n","draft":true},{"path":"blog/dont-boil-the-ocean","slug":"dont-boil-the-ocean","title":"Don't Boil the Ocean","description":null,"date":"2019-03-18T00:00:00.000Z","excerpt":"<ul>\n<li>make it work, make it good, make it fast</li>\n<li>Readme deiven development</li>\n<li>Make it so good people want to use it</li>\n<li>Solve your own problems</li>\n<li>Build what you need</li>\n<li>Anticipate changing requirements</li>\n<li>Balance consistency with flexibility</li>\n<li>Robustness</li>\n<li>Quick to respond to changing requirements</li>\n<li>Avoid premature abstractions</li>\n</ul>\n","html":"<ul>\n<li>make it work, make it good, make it fast</li>\n<li>Readme deiven development</li>\n<li>Make it so good people want to use it</li>\n<li>Solve your own problems</li>\n<li>Build what you need</li>\n<li>Anticipate changing requirements</li>\n<li>Balance consistency with flexibility</li>\n<li>Robustness</li>\n<li>Quick to respond to changing requirements</li>\n<li>Avoid premature abstractions</li>\n</ul>\n","draft":true},{"path":"blog/building-blocks","slug":"building-blocks","title":"Building Blocks","description":null,"date":"2019-03-17T00:00:00.000Z","excerpt":"<p>People like building blocks.</p>\n<p>IKEA effect</p>\n<ul>\n<li>basscss</li>\n<li>rebass</li>\n<li>axs</li>\n<li>styled-components &#x26; emotion</li>\n<li>styled system</li>\n</ul>\n","html":"<p>People like building blocks.</p>\n<p>IKEA effect</p>\n<ul>\n<li>basscss</li>\n<li>rebass</li>\n<li>axs</li>\n<li>styled-components &#x26; emotion</li>\n<li>styled system</li>\n</ul>\n","draft":true},{"path":"blog/the-good-the-bad-and-the-cascade","slug":"the-good-the-bad-and-the-cascade","title":"The Good, The Bad, and The Cascade","description":null,"date":"2019-03-17T00:00:00.000Z","excerpt":"<ul>\n<li>style properties</li>\n<li>Inheritance (not the cascade)</li>\n<li>User style sheets (the cascade)</li>\n<li>In-line block</li>\n<li>Flexbox</li>\n<li>Grid</li>\n</ul>\n<h2>Abstractions</h2>\n<ul>\n<li>Sass</li>\n<li>Variables</li>\n<li>Imports</li>\n<li>Mixins (bad)</li>\n<li>Functions (bad)</li>\n</ul>\n<h2>Standards</h2>\n<ul>\n<li>Custom properties</li>\n</ul>\n<h2>More bad stuff</h2>\n<ul>\n<li>Specificity</li>\n<li>Selectors</li>\n</ul>\n<h2>New Abstractions</h2>\n<ul>\n<li>\n<p>Hashed className s</p>\n</li>\n<li>\n<p>JS module scope</p>\n</li>\n<li>\n<p>Single build tool</p>\n</li>\n<li>\n<p>Portable code</p>\n</li>\n<li>\n<p>Runtime evaluation?</p>\n</li>\n<li>\n<p>CSS as assembly language</p>\n</li>\n</ul>\n","html":"<ul>\n<li>style properties</li>\n<li>Inheritance (not the cascade)</li>\n<li>User style sheets (the cascade)</li>\n<li>In-line block</li>\n<li>Flexbox</li>\n<li>Grid</li>\n</ul>\n<h2>Abstractions</h2>\n<ul>\n<li>Sass</li>\n<li>Variables</li>\n<li>Imports</li>\n<li>Mixins (bad)</li>\n<li>Functions (bad)</li>\n</ul>\n<h2>Standards</h2>\n<ul>\n<li>Custom properties</li>\n</ul>\n<h2>More bad stuff</h2>\n<ul>\n<li>Specificity</li>\n<li>Selectors</li>\n</ul>\n<h2>New Abstractions</h2>\n<ul>\n<li>\n<p>Hashed className s</p>\n</li>\n<li>\n<p>JS module scope</p>\n</li>\n<li>\n<p>Single build tool</p>\n</li>\n<li>\n<p>Portable code</p>\n</li>\n<li>\n<p>Runtime evaluation?</p>\n</li>\n<li>\n<p>CSS as assembly language</p>\n</li>\n</ul>\n","draft":true},{"path":"blog/the-three-tenets-of-styled-system","slug":"the-three-tenets-of-styled-system","title":"The Three Tenets of Styled System","description":"A look at some of the core ideas built into Styled System","date":"2019-03-17T00:00:00.000Z","excerpt":"A look at some of the core ideas built into Styled System","html":"<p>I released <a href=\"https://styled-system.com\">Styled System</a> around a year and a half ago,\nand since then, the library has been growing steadily\nand has even resulted in a few copycat libraries that use some of the same conventions.\nUp until now, I haven't really written much about the thinking behind the library, but have relied more on my approach of <em>show, don't tell</em>[^1].\nAnd while this library is certainly an iteration on a theme[^2]\n(those who have followed me for years may have a clear idea what it is meant for),\nI'd like to expand on what I think makes Styled System a great fit for some teams.</p>\n<!---->\n<h2>Three Tenets</h2>\n<p>At its core, Style System is really intended to enable developers to achieve these three things:</p>\n<ol>\n<li>Style consistently with a global theme</li>\n<li>Respond to changing requirements quickly</li>\n<li>Create mobile-first responsive layouts with ease</li>\n</ol>\n<p>It's not meant to solve every styling problem out there,\nbut it is focused on some of the issues I've noticed over the years for diverse teams working on codebases where developers and designers may have varying levels of expertise with CSS and other technologies.\nI have a huge amount of respect for developers who focus on CSS and who strive to understand the intricacies of an ever-growing specification, but in my experience, it's far more likely that developers are focused on other parts of the Web stack and generally know just enough CSS to be dangerous.\nI don't think that means that CSS should be completely abstracted away,\nbut I do think there is opportunity for creating powerful abstractions that <em>make it easy to do the right thing</em>[^3]. Styled System is meant to be just one such abstraction.</p>\n<h2>Consistency</h2>\n<p>Consistency is the bedrock of any constraint-based design or design system effort.\nIt goes hand-in-hand with software development principles like <em>Don't Repeat Yourself</em> (DRY)\nand the general idea of abstraction.\nWith modern tooling like CSS-in-JS it's never been easier to ensure that values are type safe and that styles are consistent to a certain degree.</p>\n<p>Styled System takes advantage of some of these capabilities and attempts to help teams bake this consistency in by default.\nA hard-coded font size or color value in a code review is easy to smell,\nand developers naturally opt-in to keeping values stored in a globally shared theme object.</p>\n<h2>Responding to Change</h2>\n<p>Consistency is great, but I've never seen a product freeze feature development to devote effort into keeping things looking consistent.\nDevelopers are frequently working in short sprint cycles to finish tasks that likely didn't account for styling consistency when they were estimated.\nOver time this leads to technical debt and parts of the CSS code base quickly become obsolete pieces of legacy code.</p>\n<p>Styled System tries to balance the consistency provided by the core theme object with the reality that developers will constantly need to make one-off changes to ship features.\nBy putting <em>some</em> of the styling control into a component's props,\ndevelopers can keep these one-off changes isolated to the parts of the code base where they are used.\nIf a message component <em>really</em> needs to have a 13px font size, you can put that magic number directly in the component that needs it, and when that component is deleted, the magic number is gone as well.</p>\n<h2>Mobile-First</h2>\n<p>While Responsive Web Design[^4] is nearly a decade old, and we've been designing for mobile devices for some time now, there still aren't clear best practices for how developers should approach these design concepts.\nStyled System includes an opinionated syntax for how to style things responsively that's meant to\nhelp shape the way people think about designing for mobile devices.\nInstead of burying conditionals for a single CSS property across multiple media query blocks,\nStyled System uses an <a href=\"https://styled-system.com/responsive-styles\">array syntax</a> to force developers into thinking how a singular dimension, such as font size or width, should change from one breakpoint to the next.\nThis syntax is probably the most contentious part of Styled System, and I've been pleasantly surprised at how quickly I've seen people pick this up and how popular it's become.</p>\n<pre><code class=\"language-css\">/* example in CSS */\n.thing {\n  font-size: 16px;\n  width: 100%;\n}\n@media screen and (min-width: 40em) {\n  font-size: 20px;\n  width: 50%;\n}\n@media screen and (min-width: 52em) {\n  font-size: 24px;\n}\n</code></pre>\n<pre><code class=\"language-jsx\">// example with Styled System\n&#x3C;Thing\n  fontSize={[ 16, 20, 24 ]}\n  width={[1, 1/2]}\n/>\n</code></pre>\n<p>A year and a half later,\nStyled System has turned out to be far more well received than I ever would have expected,\nand I've learned a tremendous amount from seeing how other people have taken the core concepts within it in different directions.\nIt may not be a good fit for every team out there, but I hope to see more explorations\ninto how we can build more powerful abstractions on top of CSS to keep pushing the Web platform forward.</p>\n<hr>\n<p>A lot of the ideas within Styled System come from the people I've learned from over the years.\nThanks to:\nNicole Sullivan, Nicolas Gallagher, Jonathan Snook, Adam Morse, John Otander, Diana Mounter,\nJon Gold, Anh-Thư Huỳnh, Alex Mykyta, John Polacek,\nand all the <a href=\"https://github.com/styled-system/styled-system/graphs/contributors\">Styled System contributors</a> and users.</p>\n<p>[^1]: I find some things difficult to put into words, especially when it's a newer idea, and think that, just like a picture is worth a thousand words, showing code can be a much more powerful way to express an idea in some cases.\nSee also: <a href=\"https://en.wikipedia.org/wiki/Show,_don%27t_tell\">Show, don't tell</a>\n[^2]: I plan to expand on this in another post - see also <a href=\"https://github.com/basscss/basscss/\">Basscss</a>, <a href=\"https://github.com/jxnblk/reflexbox\">Reflexbox</a>, <a href=\"https://rebassjs.org\">Rebass</a>, <a href=\"https://github.com/jxnblk/axs/tree/v1.0.0\">Axs</a>\n[^3]: <a href=\"https://blogs.msdn.microsoft.com/brada/2003/10/02/the-pit-of-success/\">The Pit of Success</a>\n[^4]: <a href=\"https://alistapart.com/article/responsive-web-design\">Responsive Web Design</a></p>\n"},{"path":"blog/progressive-documentation","slug":"progressive-documentation","title":"Progressive Documentation","description":"Attempting to make writing documentation easier and faster","date":"2018-09-01T00:00:00.000Z","excerpt":"Attempting to make writing documentation easier and faster","html":"<p>When building out JS libraries and components, everyone knows the importance of good documentation.\nWithout it, good code can end up going unused, which leads to duplication.</p>\n<p>For many libraries, markdown is an excellent format for writing docs since it's based on HTML and renders nicely in a variety of tools like <a href=\"https://github.com\">GitHub.com</a>.\nBut markdown can fall a little short when documenting front-end UI components,\nwhere demos and the ability to interact with a component in the browser is immensely helpful.</p>\n<h2>MDX</h2>\n<p><a href=\"https://mdxjs.com\">MDX</a> was built with some of this in mind.\nIt gives you the simplicity of writing markdown combined with the ability to import and use React components with JSX.\nMore and more tools are adding support for MDX,\nmaking using it as a documentation format a no-brainer.</p>\n<h2>Documentation Tools</h2>\n<p>While there are several great tools out there for creating high-quality documentation sites,\nsuch as <a href=\"https://github.com/zeit/next.js/\">Next.js</a>, <a href=\"https://github.com/gatsbyjs/gatsby\">Gatsby</a>, <a href=\"https://github.com/facebook/Docusaurus\">Docusaurus</a>, and <a href=\"https://github.com/pedronauck/docz\">Docz</a>,\nmany of these tools require custom setup and configuration outside of your source code\nand can be a distraction if you're trying to quickly create documentation for something new.</p>\n<p>Additionally, these tools don't always make it easy to set up documentation to serve as a development tool while working on the source code.\nThere are other tools out there for quickly developing components in isolation,\nbut they tend to use proprietary APIs and don't scale well, still requiring separate documentation as a project grows.</p>\n<h2>Introducing mdx-go</h2>\n<p><video\nsrc='https://s3.amazonaws.com/jxnblk/mdx-go-24.mp4'\nplaysinline\nautoplay\nloop\nmuted\nstyle=\"max-width:100%\"\n/></p>\n<p><a href=\"https://github.com/jxnblk/mdx-go\">mdx-go</a> is a development tool for <strong>progressive documentation</strong>\nand is meant to be used alongside your tools of choice for building documentation sites.\nIt allows you to quickly prototype, draft docs, or build simple demos outside of a larger application.</p>\n<p>mdx-go is built with the following goals in mind:</p>\n<ul>\n<li>Make it easy to focus on writing docs, not setting up an application</li>\n<li>View and interact with components with zero setup or configuration</li>\n<li>Always have a dev server ready to go, even alongside your source code</li>\n<li>Reduce lock-in and embrace the portability of the MDX file format</li>\n</ul>\n<h2>Don't boil the ocean</h2>\n<p>By starting docs for a new project with mdx-go,\nyou can focus on writing docs immediately,\nand you won't be locked into custom APIs or build setups,\nmeaning that upgrading to other documentation solutions later on is easy when you're ready to.\nThe related <a href=\"https://github.com/jxnblk/mdx-docs\">mdx-docs</a> project is one way to migrate a directory of MDX files over to using Next.js.</p>\n<p>mdx-go also works well as a local sandbox development environment, and you can continue to use it alongside other documentation tools.\nIt offers static site exporting for sharing work-in-progress demos or drafts with others.</p>\n<h2>Choose the right tool for the job</h2>\n<p>Tools like mdx-go make it easy to try things out without a lot of setup or getting locked into proprietary APIs.\nEvery team is different and has different needs, but I hope mdx-go is a helpful addition to your development toolkit.</p>\n<p>To learn more <a href=\"https://github.com/jxnblk/mdx-go\">see the mdx-go docs</a>.</p>\n<hr>\n<h2>Further Reading</h2>\n<ul>\n<li><a href=\"https://spectrum.chat/thread/1021be59-2738-4511-aceb-c66921050b9a\">Initial MDX Proposal on Spectrum.chat</a></li>\n<li><a href=\"https://mdxjs.com\">mdxjs.com</a></li>\n<li><a href=\"http://youtu.be/d2sQiI5NFAM?a\">What is MDX</a> by Kent C. Dodds</li>\n<li><a href=\"https://compositor.io/blog/x0-making-react-component-development-stupid-simple/\">x0: Making React Component Development Stupid Simple</a></li>\n<li><a href=\"http://jxnblk.com/blog/posts/defining-component-apis-in-react/\">Defining Component APIs in React</a></li>\n</ul>\n"},{"path":"blog/defining-component-apis-in-react","slug":"defining-component-apis-in-react","title":"Defining Component APIs in React","description":"Over the years, I’ve noticed patterns in how I tend to approach component APIs and building out applications and libraries. The following is a collection of thoughts, opinions, and advice for defining component APIs that are meant to be more flexible, composable, and easier to understand. None of these are hard-and-fast rules, but they’ve helped guide the way I think about organizing and creating components.","date":"2018-07-08T00:00:00.000Z","excerpt":"Over the years, I’ve noticed patterns in how I tend to approach component APIs and building out applications and libraries. The following is a collection of thoughts, opinions, and advice for defining component APIs that are meant to be more flexible, composable, and easier to understand. None of these are hard-and-fast rules, but they’ve helped guide the way I think about organizing and creating components.","html":"<p>Over the years, I’ve noticed patterns in how I tend to approach component APIs and building out applications and libraries.\nThe following is a collection of thoughts, opinions, and advice for defining component APIs that are meant to be more flexible, composable, and easier to understand.\nNone of these are hard-and-fast rules, but they’ve helped guide the way I think about organizing and creating components.</p>\n<h2>Aim for a small API surface area</h2>\n<p>Just as the React library itself aims for a <a href=\"https://www.youtube.com/watch?v=4anAwXYqLG8\">Minimal API Surface Area</a>,\nI recommend adopting a similar mindset when it comes to defining component APIs.\nThe fewer new things you need to learn, the easier it is for others to know how to use the components\nthat you create, making them more reusable.\nIf someone doesn’t understand your component API, the chance that they’ll duplicate your work increases.\nThis idea is at the core of how I approach creating components, and I find it helpful to keep in mind as I work.</p>\n<h2>Make things easy to find</h2>\n<p>Start with a flat directory structure and don’t prematurely organize your code base.\nHumans love to organize things, but we’re also really terrible at it.\nNaming things is hard enough, and by creating a directory structure around your component library,\nyou might end up doing more work that makes it more difficult for others to find the things you’ve done.</p>\n<p>A single directory of components can get quite large before it becomes difficult for people to manage.\nAnd if all the components are in a single folder,\nyou’ll get alphabetical ordering for free in most file-system tools,\nwhich can help provide a more complete picture of the code base for others.</p>\n<h2>Avoid renderThing methods</h2>\n<p>If you’ve defined a custom method in your component that starts with the word <code>render</code>,\nchances are that should be its own component.\nAs <a href=\"https://mobile.twitter.com/chrisbiscardi/status/1004559213320814592\">Chris Biscardi</a> puts it, <strong>“[It] effectively means there’s enough complexity to be worth breaking down”</strong>.\nReact’s smart about when to render or not render a component,\nso by splitting these out into their own components, you can help React do its job better.</p>\n<pre><code class=\"language-jsx\">// Instead of this\nclass Items extends React.Component {\n  renderItems ({ items }) {\n    return items.map(item => (\n      &#x3C;li key={item.id}>\n        {renderItem(item)}\n      &#x3C;/li>\n    ))\n  }\n\n  renderItem (item) {\n    return (\n      &#x3C;div>\n        {item.name}\n      &#x3C;/div>\n    )\n  }\n\n  render () {\n    return (\n      &#x3C;ul>\n        {renderItems(this.props)\n      &#x3C;/ul>\n    )\n  }\n}\n</code></pre>\n<pre><code class=\"language-jsx\">// Do this\nconst ItemList = ({ items }) =>\n  &#x3C;ul>\n    {items.map(item => (\n      &#x3C;li key={item.id}>\n        &#x3C;Item {...item} />\n      &#x3C;/li>\n    )}\n  &#x3C;/ul>\n\nconst Item = ({ name }) =>\n  &#x3C;div>{item.name}&#x3C;/div>\n\nclass Items extends React.Component {\n  render () {\n    const { items } = this.props\n    return &#x3C;ItemList items={items} />\n  }\n}\n</code></pre>\n<h2>Split components at data boundaries</h2>\n<p>Often, components should be defined by the shape of your data.</p>\n<blockquote>\n<p>Since you’re often displaying a JSON data model to a user, you’ll find that if your model was built correctly, your UI (and therefore your component structure) will map nicely.</p>\n</blockquote>\n<blockquote>\n<p>– <a href=\"https://facebook.github.io/react/docs/thinking-in-react.html\">Thinking in React</a></p>\n</blockquote>\n<p>I often see people new to React attempt to replicate what I call \"<a href=\"https://getbootstrap.com\">Bootstrap</a>\" components,\nthat is UI components that have a visual boundary that’s not directly tied to any data structure.\nReact and BEM-like CSS-based components have different concerns.\nInstead of creating a generic Card component that displays an image, heading, and link,\nand that would require a custom props API, build components for the data that you’re displaying.\nMaybe the generic Card component should be a ProductCard component that can accept the <code>product</code> object from your database.</p>\n<pre><code class=\"language-jsx\">// Instead of this\n&#x3C;Card\n  image={product.thumbnail}\n  title={product.name}\n  text={product.description}\n  link={product.permalink}\n/>\n\n// Do this\n&#x3C;ProductCard {...product} />\n</code></pre>\n<p>Chances are, the specific styling that you need for the ProductCard isn’t all that reusable,\nand you’ll likely only have this defined in one place in your code base.\nYou can follow the <a href=\"https://en.wikipedia.org/wiki/Rule_of_three_(computer_programming)\">Rule of Three</a> in situations like this.\nIf you've duplicated the exact Card component structure three times in your code base,\nthen it’s probably worth abstracting it out into its own component.</p>\n<h2>Avoid Apropcalypse</h2>\n<p>As <a href=\"https://twitter.com/gurlcode\">Jenn Creighton</a> calls it, avoid <a href=\"https://speakerdeck.com/jenncreighton/flexible-architecture-for-react-components?slide=10\">Apropcalypse</a>.\nDon’t be afraid to create a new component rather than adding abritrary props and additional logic to a component.\nFor example, a Button component might accept props for different colors, sizes, and shapes,\nbut there’s not always a need to have every combination of those props available.</p>\n<pre><code class=\"language-jsx\">// Instead of this\n&#x3C;Button\n  variant='secondary'\n  size='large'\n  outline\n  label='Buy Now'\n  icon='shoppingBag'\n  onClick={handleClick}\n/>\n\n// Do this\n&#x3C;SecondaryButton\n  size='large'\n  onClick={handleClick}>\n  &#x3C;Icon name='shoppingBag' />\n  Buy Now\n&#x3C;/SecondaryButton>\n</code></pre>\n<p>Your needs may vary, but reducing the number of custom props that any component requires is generally helpful,\nand reducing the amount of logic in the render function can make the code base simpler and better-suited for code splitting.</p>\n<h2>Use composition</h2>\n<p>Don’t reinvent <code>props.children</code>.\nIf you’ve defined props that take arbitrary strings of text that aren’t based on a data structure,\nit’s probably better to use composition.</p>\n<pre><code class=\"language-jsx\">// Instead of this\n&#x3C;Header\n  title='Hello'\n  subhead='This is a header'\n  text='And it has arbitrary props'\n/>\n\n// Do this\n&#x3C;Header>\n  &#x3C;Heading>Hello&#x3C;/Heading>\n  &#x3C;Subhead>This is a header&#x3C;/Subhead>\n  &#x3C;Text>And it uses composition&#x3C;/Text>\n&#x3C;/Header>\n</code></pre>\n<p>If you know React, you’ll already know the API for the composed version, and it shouldn’t require as much documentation as the former.\nYou might wrap the composed version into another component that <strong>is</strong> tied to a piece of data in your application,\nbut you’ll probably only need that component structure defined once in your code base.</p>\n<pre><code class=\"language-jsx\">// This makes sense as a component since it’s based on data\nconst PageHeader = ({\n  title,\n  description\n}) =>\n  &#x3C;Header>\n    &#x3C;Heading>{title}&#x3C;/Heading>\n    &#x3C;Text>{description}&#x3C;/Text>\n  &#x3C;/Header>\n\n// And ideally can be used like this\n&#x3C;PageHeader {...page} />\n</code></pre>\n<h2>Avoid boolean props for enums</h2>\n<p>It might be tempting to use <a href=\"https://mobile.twitter.com/satya164/status/1015206655997472768\">boolean props</a> as a convenient way to switch between variants of a component,\nbut it can sometimes create a confusing API.</p>\n<p>Take the following example:</p>\n<pre><code class=\"language-jsx\">&#x3C;Button primary />\n&#x3C;Button secondary />\n</code></pre>\n<p>What happens in the following case?</p>\n<pre><code class=\"language-jsx\">&#x3C;Button primary secondary />\n</code></pre>\n<p>It’s impossible to know without diving into the code base or documentation.\nInstead, try the following:</p>\n<pre><code class=\"language-jsx\">&#x3C;Button variant='primary' />\n</code></pre>\n<p>It’s a little more typing but arguably much more readable.</p>\n<h2>Keep props APIs parallel</h2>\n<p>Whenever possible, resuse props from other components. For example, if you’re creating a date picker, use the same props that the native <code>&#x3C;input type='date' /></code> expects.\nIt’ll be easier to guess how it works and also easier to remember.</p>\n<pre><code class=\"language-jsx\">// Instead of this\n&#x3C;DatePicker\n  date={date}\n  onSelect={handleDateChange}\n/>\n\n// Do this\n&#x3C;DatePicker\n  value={date}\n  onChange={handleDateChange}\n/>\n</code></pre>\n<p>The <a href=\"https://jxnblk.com/styled-system\">Styled System</a> library encourages using a parallel style props API across multiple components.\nFor example, the <code>color</code> prop works the same for all components included in <a href=\"https://jxnblk.com/rebass\">Rebass</a>,\nwhich ends up having a sort of <strong>learn once, use anywhere</strong> effect.</p>\n<pre><code class=\"language-jsx\">// example from Rebass\n&#x3C;Box color='tomato' />\n&#x3C;Heading color='tomato' />\n</code></pre>\n<h2>Ask your teammates</h2>\n<p>These are just some of my own thoughts on how to define component APIs, and they might not suit your needs.\nThe best advice I can give is to talk to your teammates, create RFCs and PRs,\nand try <a href=\"https://ponyfoo.com/articles/readme-driven-development\">Readme Driven Development</a>.\nWriting React components is easy.\nCreating a library of components that works well for your team is worth the time and effort to get right.</p>\n"},{"path":"blog/negative-space-in-react","slug":"negative-space-in-react","title":"Negative space in react","description":null,"date":"2016-08-23T00:00:00.000Z","excerpt":"<blockquote>\n<p>White space is to be regarded as an active element, not a passive background.</p>\n<p>– Jan Tschichold</p>\n</blockquote>\n<p>Negative space is arguably the most important part of a visual composition.</p>\n<p>Just as in music, the rests, breathing room, and headspace are the key players in rhythm.\nWithout them, you just have noise.\nSimilarly, negative space in design helps create the rhythm, contrast, and motion in a visual composition.</p>\n<p>When creating visual rhythm on the web, margin and padding is the abstraction we use most commonly for negative space.\nDespite its importance in the overall composition, margin isn't usually treated as a declarative equal in component based architectures.\nAnd, because of this, it's difficult to determine whether white space belongs to the child component or the parent.</p>\n<h2>Personal bubbles</h2>\n<p>I sometimes like to think of an element’s whitespace as it's <em>personal bubble</em>.\nThat is, different societies of humans have different distances at which they consider normal to keep when having a conversation.\nSome cultures have much smaller personal bubbles than Americans,\nand when people from these cultures visit or immigrate to the US,\namericans may feel uncomfortable with how close the other person is standing to them and unconsciously back away.\nSimilarly, when Americans visit cultures with larger personal bubbles, the American is the one forcing others to back away.</p>\n<p>Components obviously aren't people but they too can differ in the amount of whitespace they need,\nand create interesting dynamics among the different parts of a UI.</p>\n<h2>Approaches</h2>\n<p>There are two predominant ways of handling whitespace in component based systems.\nThe first involves components defining their own margins, which is how\n<a href=\"http://jxnblk.com/rebass\">Rebass</a> and <a href=\"http://jxnblk.com/reflexbox\">Reflexbox</a> provide margin props.\nThe second involves a parent component wrapping child components with padded containers, similar to\nHugo Bessa’s <a href=\"http://hugobessa.com.br/2016/07/20/composable-components/#layout-components\">Spacing component</a>.\nA third, but less common approach is <a href=\"http://jxnblk.com/rebass\">Rebass‘s</a> Space component,\nwhich declaratively creates space between other elements.</p>\n<h3>Margin Props</h3>\n<p>Let's explore the first method where a component defines its own margins.</p>\n<h3>Parent Layout Component</h3>\n<p>Now let's take a look at the second method, where the parent defines margins of its children.</p>\n<h3>Space Component</h3>\n<p>Lastly, let's explore a space component that declaratively adds space between components.</p>\n<h3>Combined Approach</h3>\n<p>We can actually devise a system that allows for all of the approaches listed above.\nTo start, we need a component that manages its own margin.</p>\n<hr>\n<ul>\n<li>HOC for other components</li>\n<li>It accepts m props</li>\n<li>Next, let's create a convenience parent wrapper</li>\n<li>It could work with the m prop or go lower level and apply styles</li>\n<li>Box component is somewhere in between</li>\n<li>Parent spacer component in rebass</li>\n<li>Row, Arrange, Align,</li>\n</ul>\n<p>Each has its trade offs</p>\n<p>Declarative spacer is verbose and can be cumbersome to manage efficiently. It also destroys a convenient aspect of CSS: margin collapsing</p>\n<ul>\n<li>two elements before and after an item</li>\n<li>Changes based on context: inline vs block</li>\n<li>Desire lines from other devs, nbsp &#x26; br</li>\n</ul>\n<p>Parent spacer has its own limitations\nSimilar to traditional CSS grid sys it doesn't allow for much flexibility</p>\n","html":"<blockquote>\n<p>White space is to be regarded as an active element, not a passive background.</p>\n<p>– Jan Tschichold</p>\n</blockquote>\n<p>Negative space is arguably the most important part of a visual composition.</p>\n<p>Just as in music, the rests, breathing room, and headspace are the key players in rhythm.\nWithout them, you just have noise.\nSimilarly, negative space in design helps create the rhythm, contrast, and motion in a visual composition.</p>\n<p>When creating visual rhythm on the web, margin and padding is the abstraction we use most commonly for negative space.\nDespite its importance in the overall composition, margin isn't usually treated as a declarative equal in component based architectures.\nAnd, because of this, it's difficult to determine whether white space belongs to the child component or the parent.</p>\n<h2>Personal bubbles</h2>\n<p>I sometimes like to think of an element’s whitespace as it's <em>personal bubble</em>.\nThat is, different societies of humans have different distances at which they consider normal to keep when having a conversation.\nSome cultures have much smaller personal bubbles than Americans,\nand when people from these cultures visit or immigrate to the US,\namericans may feel uncomfortable with how close the other person is standing to them and unconsciously back away.\nSimilarly, when Americans visit cultures with larger personal bubbles, the American is the one forcing others to back away.</p>\n<p>Components obviously aren't people but they too can differ in the amount of whitespace they need,\nand create interesting dynamics among the different parts of a UI.</p>\n<h2>Approaches</h2>\n<p>There are two predominant ways of handling whitespace in component based systems.\nThe first involves components defining their own margins, which is how\n<a href=\"http://jxnblk.com/rebass\">Rebass</a> and <a href=\"http://jxnblk.com/reflexbox\">Reflexbox</a> provide margin props.\nThe second involves a parent component wrapping child components with padded containers, similar to\nHugo Bessa’s <a href=\"http://hugobessa.com.br/2016/07/20/composable-components/#layout-components\">Spacing component</a>.\nA third, but less common approach is <a href=\"http://jxnblk.com/rebass\">Rebass‘s</a> Space component,\nwhich declaratively creates space between other elements.</p>\n<h3>Margin Props</h3>\n<p>Let's explore the first method where a component defines its own margins.</p>\n<h3>Parent Layout Component</h3>\n<p>Now let's take a look at the second method, where the parent defines margins of its children.</p>\n<h3>Space Component</h3>\n<p>Lastly, let's explore a space component that declaratively adds space between components.</p>\n<h3>Combined Approach</h3>\n<p>We can actually devise a system that allows for all of the approaches listed above.\nTo start, we need a component that manages its own margin.</p>\n<hr>\n<ul>\n<li>HOC for other components</li>\n<li>It accepts m props</li>\n<li>Next, let's create a convenience parent wrapper</li>\n<li>It could work with the m prop or go lower level and apply styles</li>\n<li>Box component is somewhere in between</li>\n<li>Parent spacer component in rebass</li>\n<li>Row, Arrange, Align,</li>\n</ul>\n<p>Each has its trade offs</p>\n<p>Declarative spacer is verbose and can be cumbersome to manage efficiently. It also destroys a convenient aspect of CSS: margin collapsing</p>\n<ul>\n<li>two elements before and after an item</li>\n<li>Changes based on context: inline vs block</li>\n<li>Desire lines from other devs, nbsp &#x26; br</li>\n</ul>\n<p>Parent spacer has its own limitations\nSimilar to traditional CSS grid sys it doesn't allow for much flexibility</p>\n","draft":true,"tags":["react","design","style","css","margin"]},{"path":"blog/patterns-for-style-composition-in-react","slug":"patterns-for-style-composition-in-react","title":"Patterns for Style Composition in React","description":"While React is extremely flexible in terms of how you can structure your application’s UI, I’ve found that a few patterns for style composition have helped me keep things organized and easy to work with.","date":"2016-08-13T00:00:00.000Z","excerpt":"While React is extremely flexible in terms of how you can structure your application’s UI, I’ve found that a few patterns for style composition have helped me keep things organized and easy to work with.","html":"<p>While React is extremely flexible in terms of how you can structure your application’s UI,\nI’ve found that a few patterns for style composition have helped me keep things\norganized and easy to work with.\nThese aren’t hard-and-fast rules, these are simply reflections on how I’ve come to organize components in apps that I’ve worked on.</p>\n<p>I’ve gravitated towards these patterns in an effort to:</p>\n<ul>\n<li>Create a well-defined visual design system</li>\n<li>Help maintain visual consistency across an application</li>\n<li>Only deliver the CSS/styles needed to the client for a given UI – i.e. performance</li>\n<li>Increase the maintainability of visual styles</li>\n<li>Make updates and iterations on styles easier</li>\n<li>Make legacy styles easier to deprecate</li>\n<li>Create more readable components</li>\n<li>Make building out new UI easier and faster</li>\n<li>Keep styles encapsulated to help prevent collisions and unwanted side effects</li>\n<li>Create an easy-to-use component API for non-front-end developers</li>\n</ul>\n<p>Although the level of abstraction here might look like overkill for smaller projects,\nI find that this general approach has sped up my development across the board.</p>\n<p>I won’t get into approaches for state management or handling the business logic of your app,\ninstead I’ll be focusing primarily on the visible and interactive parts of the UI.</p>\n<h2>Stateless Functional UI Components</h2>\n<p>Generally, I like to keep styles separated from the parts of the app that are tied to state.\nThat means routes, views, containers, forms, layouts, etc. should not have any styling or classes in them.\nInstead, these heavy-lifting components should be composed of primarily stateless functional UI components,\nsometimes referred to as <em>presentational</em> components.\nBy keeping styling concerns separate from the application state,\npieces can become more reusable and building out new views and containers can be quicker.</p>\n<p>For example, a form component render method might look something like this:</p>\n<pre><code class=\"language-js\">render () {\n  return (\n    &#x3C;form onSubmit={this.handleSubmit}>\n      &#x3C;Heading children='Sign In' />\n      &#x3C;Input\n        name='username'\n        value={username}\n        onChange={this.handleChange} />\n      &#x3C;Input\n        type='password'\n        name='password'\n        value={password}\n        onChange={this.handleChange} />\n      &#x3C;Button\n        type='submit'\n        children='Sign In' />\n    &#x3C;/form>\n  )\n}\n</code></pre>\n<p>Notice how none of the elements have a <code>className</code> or <code>style</code> prop.\nUsing <code>className</code> or <code>style</code> props at this level <em>could</em> be considered a code smell.\nEach UI component used here encapsulates its own styling,\nand the styling simply becomes an implementation detail,\nwhich means a UI component can be updated or refactored without affecting anything else in the application.</p>\n<p>An example Button component, like the one in the form above, might look something like the following:</p>\n<pre><code class=\"language-js\">const Button = ({\n  ...props\n}) => {\n  const sx = {\n    fontFamily: 'inherit',\n    fontSize: 'inherit',\n    fontWeight: 'bold',\n    textDecoration: 'none',\n    display: 'inline-block',\n    margin: 0,\n    paddingTop: 8,\n    paddingBottom: 8,\n    paddingLeft: 16,\n    paddingRight: 16,\n    border: 0,\n    color: 'white',\n    backgroundColor: 'blue',\n    WebkitAppearance: 'none',\n    MozAppearance: 'none'\n  }\n\n  return (\n    &#x3C;button {...props} style={sx} />\n  )\n}\n</code></pre>\n<pre><code class=\"language-js\">// Button usage\n&#x3C;Button onClick={this.handleClick}>\n  Hello\n&#x3C;/Button>\n</code></pre>\n<p>I’ve used inline styles here for readability and to help demonstrate how this works,\nbut any CSS-in-JS solution can be used instead and won’t have any affect on the form component above.\nBy keeping all styling encapsulated in this component,\nthe rest of the application doesn’t need to know anything about the Button beyond its props API.</p>\n<h2>Styles Module</h2>\n<p>You may have noticed that a few property values were hard-coded into the Button example.\nGenerally, I wouldn’t recommend hard-coding things in like that.\nAny values that are likely to be used across different UI components should be split into their own module.</p>\n<p>Here is an example module to start with:</p>\n<pre><code class=\"language-js\">export const white = '#fff'\nexport const black = '#111'\nexport const blue = '#07c'\n\nexport const colors = {\n  white,\n  black,\n  blue\n}\n\nexport const space = [\n  0,\n  8,\n  16,\n  32,\n  64\n]\n\nconst styles = {\n  bold: 600,\n  space,\n  colors\n}\n\nexport default styles\n</code></pre>\n<p>And here is what the updated Button component could look like:</p>\n<pre><code class=\"language-js\">import React from 'react'\nimport { bold, space, colors } from './styles'\n\nconst Button = ({\n  ...props\n}) => {\n  const sx = {\n    fontFamily: 'inherit',\n    fontSize: 'inherit',\n    fontWeight: bold,\n    textDecoration: 'none',\n    display: 'inline-block',\n    margin: 0,\n    paddingTop: space[1],\n    paddingBottom: space[1],\n    paddingLeft: space[2],\n    paddingRight: space[2],\n    border: 0,\n    color: colors.white,\n    backgroundColor: colors.blue,\n    WebkitAppearance: 'none',\n    MozAppearance: 'none'\n  }\n\n  return (\n    &#x3C;button {...props} style={sx} />\n  )\n}\n</code></pre>\n<p>The style object could store anything related to styling that is shared across components,\nincluding borders, border radii, shadows, animation duration, etc.</p>\n<p>You could even export more elaborate combinations of styles like the following:</p>\n<pre><code class=\"language-js\">export const cardStyle = {\n  backgroundColor: white,\n  borderRadius: 3,\n  boxShadow: `0 0 4px ${shade[1]}`\n}\n</code></pre>\n<p>But I’d recommend delegating combinations like these to components and using composition instead, as I’ll show below.</p>\n<h2>Style Functions</h2>\n<p>Since we’re using JavaScript, we can also employ helper functions for styling elements.\nFor example, a function to create <code>rgba</code> values of black can be very handy.</p>\n<pre><code class=\"language-js\">const darken = (n) => `rgba(0, 0, 0, ${n})`\n\ndarken(1 / 8) // 'rgba(0, 0, 0, 0.125)'\n</code></pre>\n<p>Functions like this can then be used to create a value scale array to help keep things consistent.</p>\n<pre><code class=\"language-js\">const shade = [\n  darken(0),\n  darken(1 / 8),\n  darken(1 / 4),\n  darken(3 / 8),\n  darken(1 / 2),\n  darken(5 / 8),\n  darken(3 / 4),\n  darken(7 / 8),\n  darken(1)\n]\n\nshade[4] // 'rgba(0, 0, 0, 0.5)'\n</code></pre>\n<p>Another example would be creating a scale for margin and padding to help keep visual rhythm consistent.</p>\n<pre><code class=\"language-js\">// Modular powers of two scale\nconst scale = [\n  0,\n  8,\n  16,\n  32,\n  64\n]\n\n// Functions to get partial style objects\nconst createScaledPropertyGetter = (scale) => (prop) => (x) => {\n  return (typeof x === 'number' &#x26;&#x26; typeof scale[x] === 'number')\n    ? { [prop]: scale[x] }\n    : null\n}\nconst getScaledProperty = createScaledPropertyGetter(scale)\n\nexport const getMargin = getScaledProperty('margin')\nexport const getPadding = getScaledProperty('padding')\n</code></pre>\n<pre><code class=\"language-js\">// Style function usage\nconst Box = ({\n  m,\n  p,\n  ...props\n}) => {\n  const sx = {\n    ...getMargin(m),\n    ...getPadding(p)\n  }\n\n  return &#x3C;div {...props} style={sx} />\n}\n</code></pre>\n<pre><code class=\"language-js\">// Component usage\n&#x3C;div>\n  &#x3C;Box m={2} p={3}>\n    A box with 16px margin and 32px padding\n  &#x3C;/Box>\n&#x3C;/div>\n</code></pre>\n<h2>Npm Modules</h2>\n<p>While the rgba color function above is a fairly simple one,\nsometimes more complex color transformations can be helpful when creating UI.\nWell, we’re in luck, because we can use literally anything on <a href=\"https://npmjs.com\">npm</a>.</p>\n<p>Instead of the <code>darken</code> function above, here is an example using <a href=\"https://www.npmjs.com/package/chroma-js\"><code>chroma-js</code></a>’s <code>alpha</code> function.</p>\n<pre><code class=\"language-js\">import chroma from 'chroma-js'\n\nconst alpha = (color) => (a) => chroma(color).alpha(a).css()\n\nconst darken = alpha('#000')\n\nconst shade = [\n  darken(0),\n  darken(1 / 8),\n  darken(1 / 4),\n  // ...\n]\n</code></pre>\n<p>Using chroma, this function can work with any color from the style object.</p>\n<pre><code class=\"language-js\">const blueAlpha = [\n  alpha(blue)(0),\n  alpha(blue)(1 / 4),\n  alpha(blue)(1 / 2),\n  alpha(blue)(3 / 4),\n  alpha(blue)(1)\n]\n</code></pre>\n<h2>Base Component</h2>\n<p>Beyond just importing style values, there is a tremendous amount of flexibility\nwhen it comes to composition in React – since components are essentially just functions.\nTake the Button component from above, and we’ll change some of the style details to props to make it more reusable.</p>\n<pre><code class=\"language-js\">const Button = ({\n  big,\n  color = colors.white,\n  backgroundColor = colors.blue,\n  ...props\n}) => {\n  const sx = {\n    fontFamily: 'inherit',\n    fontSize: 'inherit',\n    fontWeight: bold,\n    textDecoration: 'none',\n    display: 'inline-block',\n    margin: 0,\n    paddingTop: big ? space[2] : space[1],\n    paddingBottom: big ? space[2] : space[1],\n    paddingLeft: space[2],\n    paddingRight: space[2],\n    border: 0,\n    color,\n    backgroundColor,\n    WebkitAppearance: 'none',\n    MozAppearance: 'none'\n  }\n\n  return (\n    &#x3C;button {...props} style={sx} />\n  )\n}\n</code></pre>\n<pre><code class=\"language-js\">// Usage example\n&#x3C;div>\n  &#x3C;Button>\n    Blue Button\n  &#x3C;/Button>\n  &#x3C;Button big backgroundColor={colors.red}>\n    Big Red Button\n  &#x3C;/Button>\n&#x3C;/div>\n</code></pre>\n<p>The <code>color</code> and <code>backgroundColor</code> properties have been moved up to the component’s props.\nAdditionally, we’ve added a <code>big</code> prop to adjust the padding top and bottom.</p>\n<p>Now this component is fine by itself, but what if we want a secondary button style?\nDoing the following would become tedious and error prone very quickly:</p>\n<pre><code class=\"language-js\">&#x3C;Button\n  color={colors.black}\n  backgroundColor={colors.lightblue}\n  children='Secondary Button' />\n</code></pre>\n<p>Instead, we can create a dedicated secondary button component.</p>\n<pre><code class=\"language-js\">import React from 'react'\nimport Button from './Button'\n\nconst ButtonSecondary = (props) => (\n  &#x3C;Button\n    {...props}\n    color={colors.black}\n    backgroundColor={colors.lightblue} />\n)\n</code></pre>\n<pre><code class=\"language-js\">// Usage example\n&#x3C;div>\n  &#x3C;Button>Normal Button&#x3C;/Button>\n  &#x3C;ButtonSecondary>Secondary Button&#x3C;/ButtonSecondary>\n&#x3C;/div>\n</code></pre>\n<p>By adjusting the props API of the base Button component, an entire set of button styles can be created.</p>\n<pre><code class=\"language-js\">const ButtonBig = (props) => &#x3C;Button {...props} big />\nconst ButtonGreen = (props) => &#x3C;Button {...props} backgroundColor={colors.green} />\nconst ButtonRed = (props) => &#x3C;Button {...props} backgroundColor={colors.red} />\nconst ButtonOutline = (props) => &#x3C;Button {...props} outline />\n</code></pre>\n<p>This pattern lends itself well to layout components as well.\nAssume we have a generic Box component that accepts props for various layout styles.\nThis base layout component can then be used to create grid system components and other primitives.</p>\n<pre><code class=\"language-js\">const Grid = (props) => (\n  &#x3C;Box {...props}\n    display='inline-block'\n    verticalAlign='top'\n    px={2} />\n)\n\nconst Half = (props) => (\n  &#x3C;Grid {...props}\n    width={1 / 2} />\n)\n\nconst Third = (props) => (\n  &#x3C;Grid {...props}\n    width={1 / 3} />\n)\n\nconst Quarter = (props) => (\n  &#x3C;Grid {...props}\n    width={1 / 4} />\n)\n\nconst Flex = (props) => (\n  &#x3C;Box {...props}\n    display='flex' />\n)\n\nconst FlexAuto = (props) => (\n  &#x3C;Box {...props}\n    flex='1 1 auto' />\n)\n</code></pre>\n<pre><code class=\"language-js\">// Usage example\n&#x3C;div>\n  &#x3C;div>\n    &#x3C;Half>Half width column&#x3C;/Half>\n    &#x3C;Half>Half width column&#x3C;/Half>\n  &#x3C;/div>\n  &#x3C;div>\n    &#x3C;Third>Third width column&#x3C;/Third>\n    &#x3C;Third>Third width column&#x3C;/Third>\n    &#x3C;Third>Third width column&#x3C;/Third>\n  &#x3C;/div>\n  &#x3C;div>\n    &#x3C;Quarter>Quarter width column&#x3C;/Quarter>\n    &#x3C;Quarter>Quarter width column&#x3C;/Quarter>\n    &#x3C;Quarter>Quarter width column&#x3C;/Quarter>\n    &#x3C;Quarter>Quarter width column&#x3C;/Quarter>\n  &#x3C;/div>\n&#x3C;/div>\n</code></pre>\n<p>Typography styles are another great candidate for building up with composition.\nBy using a base typographic component, you can help ensure consistency and keep your styling DRY.</p>\n<pre><code class=\"language-js\">import React from 'react'\nimport { alternateFont, typeScale, boldFontWeight } from './styles'\n\nconst Text = ({\n  tag = 'span',\n  size = 4,\n  alt,\n  center,\n  bold,\n  caps,\n  ...props\n}) => {\n  const Tag = tag\n  const sx = {\n    fontFamily: alt ? alternateFont : null,\n    fontSize: typeScale[size],\n    fontWeight: bold ? boldFontWeight : null,\n    textAlign: center ? 'center' : null,\n    textTransform: caps ? 'uppercase' : null\n  }\n\n  return &#x3C;Tag {...props} style={sx} />\n}\n</code></pre>\n<pre><code class=\"language-js\">const LeadText = (props) => &#x3C;Text {...props} tag='p' size={3} />\nconst Caps = (props) => &#x3C;Text {...props} caps />\nconst MetaText = (props) => &#x3C;Text {...props} size={5} caps />\nconst AltParagraph = (props) => &#x3C;Text {...props} tag='p' alt />\n\nconst CapsButton = ({ children, ...props }) => (\n  &#x3C;Button {...props}>\n    &#x3C;Caps>\n      {children}\n    &#x3C;/Caps>\n  &#x3C;/Button>\n)\n</code></pre>\n<pre><code class=\"language-js\">// Usage example\n&#x3C;div>\n  &#x3C;LeadText>\n    This is a lead with some &#x3C;Caps>all caps&#x3C;/Caps>.\n    It has a larger font size than the default paragraph.\n  &#x3C;/LeadText>\n  &#x3C;MetaText>\n    This is smaller text, like form helper copy.\n  &#x3C;/MetaText>\n&#x3C;/div>\n</code></pre>\n<p>Keep in mind, that these components are just a few examples and your needs will vary greatly on an app-by-app basis.</p>\n<h2>Higher Order Components</h2>\n<p>I’m generally a fan of keeping most of an applications state at the top level of a React tree,\noften using something like <a href=\"https://github.com/reactjs/redux\">Redux</a>.\nHowever, sometimes there are isolated UI components that only require a minimal amount of state for interaction,\nand using them as standalone components is sufficient.</p>\n<p>One example of this is a carousel<a href=\"#*\">*</a>, where the state of the current slide generally doesn’t need to persist across page views.\nInstead of combining the state of the carousel with its UI, we can create a higher order component for better reusability.\nThe higher order component will have a current slide index and have previous and next methods.</p>\n<pre><code class=\"language-js\">// Higher order component\nimport React from 'react'\n\n// This could be named something more generic like Counter or Cycle\nconst CarouselContainer = (Comp) => {\n  class Carousel extends React.Component {\n    constructor () {\n      super()\n      this.state = {\n        index: 0\n      }\n      this.previous = () => {\n        const { index } = this.state\n        if (index > 0) {\n          this.setState({ index: index - 1})\n        }\n      }\n\n      this.next = () => {\n        const { index } = this.state\n        this.setState({ index: index + 1 })\n      }\n    }\n\n    render () {\n      return (\n        &#x3C;Comp\n          {...this.props}\n          {...this.state}\n          previous={this.previous}\n          next={this.next} />\n      )\n    }\n  }\n\n  return Carousel\n}\n\nexport default CarouselContainer\n</code></pre>\n<p>Using a higher order component we can create a carousel from any number of UI elements.\nFor example, a simple carousel may have only previous and next buttons,\nwhile a more complex one might include image thumbnails of each slide across the bottom.\nBoth of these can use the same higher order component to handle their state.</p>\n<pre><code class=\"language-js\">// UI component\nconst Carousel = ({ index, ...props }) => {\n  const length = props.length || props.children.length || 0\n\n  const sx = {\n    root: {\n      overflow: 'hidden'\n    },\n    inner: {\n      whiteSpace: 'nowrap',\n      height: '100%',\n      transition: 'transform .2s ease-out',\n      transform: `translateX(${index % length * -100}%)`\n    },\n    child: {\n      display: 'inline-block',\n      verticalAlign: 'middle',\n      whiteSpace: 'normal',\n      outline: '1px solid red',\n      width: '100%',\n      height: '100%'\n    }\n  }\n\n  const children = React.Children.map(props.children, (child, i) => {\n    return (\n      &#x3C;div style={sx.child}>\n        {child}\n      &#x3C;/div>\n    )\n  })\n\n  return (\n    &#x3C;div style={sx.root}>\n      &#x3C;div style={sx.inner}>\n        {children}\n      &#x3C;/div>\n    &#x3C;/div>\n  )\n}\n</code></pre>\n<pre><code class=\"language-js\">// Final Carousel component\nconst HeroCarousel = (props) => {\n\treturn (\n    &#x3C;div>\n      &#x3C;Carousel index={props.index}>\n        &#x3C;div>Slide one&#x3C;/div>\n        &#x3C;div>Slide two&#x3C;/div>\n        &#x3C;div>Slide three&#x3C;/div>\n      &#x3C;/Carousel>\n      &#x3C;Button\n        onClick={props.previous}\n        children='Previous' />\n      &#x3C;Button\n        onClick={props.next}\n        children='Next' />\n    &#x3C;/div>\n\t)\n}\n\n// Wrap the component with the functionality from the higher order component\nexport default CarouselContainer(HeroCarousel)\n</code></pre>\n<pre><code class=\"language-js\">// Usage example\n&#x3C;div>\n  &#x3C;HeroCarousel />\n&#x3C;/div>\n</code></pre>\n<p>By keeping the styling separate from the interactive state,\nany number of carousel variations can be created from these reusable parts.</p>\n<p>Just like the base component pattern above, higher order components\ncan work well for styling layout, typography and colors.\nThis is the same pattern used in <a href=\"https://github.com/jxnblk/reflexbox\">Reflexbox</a>,\nand similar to Rebass’s <a href=\"https://github.com/jxnblk/rebass/blob/master/src/Base.js\">Base component</a>.</p>\n<h2>Further Exploration</h2>\n<p>These are just a few patterns that I’ve found to be the most useful\nwhen it comes to styling UI in a component-based system.\nI’m curious to know if anyone else has found similar patterns that they’ve found helpful,\nand I’m sure there are even more ways to create more beautiful, more flexible, and more maintainable visual design systems.</p>\n<hr>\n<h3>A Note About Performance</h3>\n<p>While there are many different ways to handle styling in a component-based app,\nmake sure to pay close attention to the size of your bundle.\nIt can be easy to create the wrong abstractions and end up with needless bloat.\nSome of the patterns in this article, when taken to their logical extreme,\ncould actually harm the performance and create a degraded experience for your end users.</p>\n<p>And remember, everything related to styling that you do should be for the user’s benefit, not your own.</p>\n<hr>\n<p><small id='*'>* Please don’t use carousels in your app. Users hate them.</small></p>\n","tags":["css","css-in-js","design systems","style guides","react"]},{"path":"blog/universal-ui-components","slug":"universal-ui-components","title":"Universal UI Components","description":null,"date":"2016-07-06T00:00:00.000Z","excerpt":"<p>For a while now, I’ve been interested in the idea of creating portable,\ninteroperable functional UI components that can work in any DOM rendering library,\nwhether it’s\n<a href=\"https://facebook.github.io/react/\">React</a>,\n<a href=\"https://preactjs.com\">Preact</a>,\n<a href=\"https://github.com/dominictarr/hyperscript\">hyperscript</a>,\n<a href=\"https://github.com/shama/bel\">bel</a>,\n<a href=\"https://github.com/maxogden/yo-yo\">yo-yo</a>,\nor some other library.</p>\n<p>The idea of functional UI components is a simple one: pass arguments into a function and it returns a representation of the DOM,\nusually with encapsulated styles and interactivity handled with callbacks to a global state, a la Redux.</p>\n","html":"<p>For a while now, I’ve been interested in the idea of creating portable,\ninteroperable functional UI components that can work in any DOM rendering library,\nwhether it’s\n<a href=\"https://facebook.github.io/react/\">React</a>,\n<a href=\"https://preactjs.com\">Preact</a>,\n<a href=\"https://github.com/dominictarr/hyperscript\">hyperscript</a>,\n<a href=\"https://github.com/shama/bel\">bel</a>,\n<a href=\"https://github.com/maxogden/yo-yo\">yo-yo</a>,\nor some other library.</p>\n<p>The idea of functional UI components is a simple one: pass arguments into a function and it returns a representation of the DOM,\nusually with encapsulated styles and interactivity handled with callbacks to a global state, a la Redux.</p>\n<!-- more -->\n<p>If you look at the currently available technology, there are predominantly three ways to create these components:</p>\n<ul>\n<li><a href=\"https://facebook.github.io/jsx/\"><strong>JSX</strong></a> (from React) - uses an XML-like syntax to call functions that return representations of DOM elements</li>\n<li><a href=\"https://github.com/dominictarr/hyperscript\"><strong>Hyperscript</strong></a> - similar to JSX, but uses standard JavaScript syntax and function calls</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#Tagged_template_literals\"><strong>ES2015 tagged template literals</strong></a> - a new string type introduced to JavaScript</li>\n</ul>\n<p>Each has its own pros and cons. While JSX is mostly syntactic sugar, some prefer to use standard JavaScript syntax.\nOne big advantage JSX has is that it abstracts away the function used to create DOM elements.\nFor example, React uses <code>React.createElement</code> while Preact uses <code>Preact.h</code>.\nThe pragma used in JSX is configurable by the end user.\nHyperscript, although older than JSX, uses a similar function, but is written in standard JavaScript.\nTagged template literals are also standard JavaScript,\nbut require a little bit of extra code to change template literals into DOM elements.</p>\n<h2>The same, but different</h2>\n<p>Assuming we pick one of the above syntaxes,\nthere are relatively few differences among the implementations of components across libraries.\nFor example, here is a bare-bones Button component for several different libraries.\nFor brevity, styles have been left out of these examples.</p>\n<pre><code class=\"language-js\">// React using JSX\nimport React from 'react'\n\nconst Button = (props) => (\n  &#x3C;button {...props} />\n)\nexport default Button\n</code></pre>\n<pre><code class=\"language-js\">// Preact using JSX\nimport { h } from 'preact'\n\nconst Button = (props) => (\n  &#x3C;button {...props} />\n)\nexport default Button\n</code></pre>\n<pre><code class=\"language-js\">// Hyperscript\nimport h from 'hyperscript'\n\nconst Button = (props) => (\n  h('button', props)\n)\nexport default Button\n</code></pre>\n<pre><code class=\"language-js\">// yo-yo using tagged template literals\nimport yo from 'yo-yo'\n\nconst Button = ({ text, ...props }) => (\n  yo`&#x3C;button ${props}>${text}&#x3C;/button`\n)\nexport default Button\n</code></pre>\n<p>There are still quite a few differences in syntax between JSX, hyperscript, and tagged template literals.\nFor the sake of this post, I’ll focus on implementing these components in JSX.</p>\n<p>The first three examples are covered, but here’s what the hyperscript and yo-yo examples would look like in JSX.</p>\n<pre><code class=\"language-js\">// Hyperscript with JSX\nimport h from 'hyperscript'\n\nconst Button = (props) => (\n  &#x3C;button {...props} />\n)\nexport default Button\n</code></pre>\n<pre><code class=\"language-js\">// bel (yo-yo) with JSX\n// yo-yo uses the bel package to create elements\nimport { createElement } from 'bel'\n\nconst Button = (props) => (\n  &#x3C;button {...props} />\n)\nexport default Button\n</code></pre>\n<p>For each of the non-React versions, JSX needs to be configured to use the appropriate pragma.\nHyperscript and Preact both name their create element functions <code>h</code>.\nHere is an example <code>.babelrc</code> configuration.</p>\n<pre><code class=\"language-json\">{\n  \"presets\": [\n    \"es2015\",\n    \"stage-0\"\n  ],\n  \"plugins\": [\n    [\n      \"transform-react-jsx\",\n      { \"pragma\": \"h\" }\n    ]\n  ]\n}\n</code></pre>\n<p>Although the other libraries name their create element functions differently,\nthey can all be named <code>h</code> within the components for cross-library compatibility.</p>\n<pre><code class=\"language-js\">// React using JSX\nimport { createElement as h } from 'react'\n\nconst Button = (props) => (\n  &#x3C;button {...props} />\n)\nexport default Button\n</code></pre>\n<p>At this point, the only difference in these components across libraries is the <code>import</code> statement.\nUsing a module bundler like webpack, even this can be abstracted out of the component module.</p>\n<p>Using webpack’s ProvidePlugin, the create element function can be exposed to all modules.\nThis does involve having a variable in the global scope, but I think the trade-off might be worth it in some cases.</p>\n<pre><code class=\"language-js\">// Custom create-element module\nconst h = require('preact').h\nmodule.exports = h\n</code></pre>\n<pre><code class=\"language-js\">// Example webpack configuration for Preact\nconst path = require('path')\nconst webpack = require('webpack')\n\nmodule.exports = {\n  ...,\n  plugins: [\n    new webpack.ProvidePlugin([\n      h: path.resolve('./preact-create-element')\n    ])\n  ]\n}\n</code></pre>\n<p>To avoid variable collisions, the function could be named anything (e.g. <code>__h</code>) as long as the <code>.babelrc</code> pragma matches.</p>\n<p>In addition to the name of the create element function, there are some slight differences in the naming conventions\nfor HTML attributes (e.g. <code>htmlFor</code> and <code>className</code>) and handling child elements.\nTransforming these props could be handled in the custom function, but the implementation details have been left out of this post.</p>\n<p>With this configuration, the Button component can now be written like this:</p>\n<pre><code class=\"language-js\">const Button = (props) => (\n  &#x3C;button {...props} />\n)\nexport default Button\n</code></pre>\n<p>I’ve put up a rough demonstration of this concept, with the same two UI components being rendered to the DOM by\nReact, Preact, hyperscript, and bel here: <a href=\"http://jxnblk.com/universal-components\">Universal Components</a>.</p>\n<p>With a little bit of configuration, a whole library of UI components could be written in a manner that would allow\nthe DOM rendering library to be swapped out at some point in the future,\nwithout the need to use a tool like <a href=\"https://github.com/facebook/codemod\">Codemod</a>.\nThere’s probably even a way to wrap components in an open-source library like <a href=\"http://jxnblk.com/rebass\">Rebass</a>\nto make them compatible with more than one functional DOM rendering library as well.</p>\n"},{"path":"blog/domain-specific-design-languages","slug":"domain-specific-design-languages","title":"Domain-Specific Design Languages","description":null,"date":"2016-06-30T00:00:00.000Z","excerpt":"<ul>\n<li>\n<p>definition of DSL</p>\n<blockquote>\n<p>A domain-specific language (DSL) is a computer language specialized to a particular application domain. This is in contrast to a general-purpose language (GPL), which is broadly applicable across domains.\nhttps://en.wikipedia.org/wiki/Domain-specific_language\nA domain-specific language is created specifically to solve problems in a particular domain and is not intended to be able to solve problems outside it (although that may be technically possible). In contrast, general-purpose languages are created to solve problems in many domains.</p>\n</blockquote>\n</li>\n<li>\n<p>consider designing in iOS, it requires domain-specific (i.e. platform-specific) design conventions and patterns, predominantly outlined in Apple's HIG</p>\n</li>\n</ul>\n<p>Deviating from the HIG means you are creating a new design language specific to your application,\nwhich may have its benefits, but also requires more learning on the part of the user.</p>\n<p>Similarly, deviating from a web application's style guide, UI component library, or interaction pattern library\nis equivalent to creating a new design language that users need to learn.</p>\n<p>The web itself has it's own design language.\nUsers have acclimated to using blue underlined links, scrolling through pages, using standard form elements,\nas well as a plethora of other interaction design patterns.</p>\n<p>Though sometimes DSLs are appropriate,\nthe main disadvantage to using a DSL is that it requires domain-specifig knowledge of certain APIs rather than relying on more standard conventions. An example of this would be using coffeescript or JSX, rather than the standardized JavaScript (EMCAScript) syntax</p>\n","html":"<ul>\n<li>\n<p>definition of DSL</p>\n<blockquote>\n<p>A domain-specific language (DSL) is a computer language specialized to a particular application domain. This is in contrast to a general-purpose language (GPL), which is broadly applicable across domains.\nhttps://en.wikipedia.org/wiki/Domain-specific_language\nA domain-specific language is created specifically to solve problems in a particular domain and is not intended to be able to solve problems outside it (although that may be technically possible). In contrast, general-purpose languages are created to solve problems in many domains.</p>\n</blockquote>\n</li>\n<li>\n<p>consider designing in iOS, it requires domain-specific (i.e. platform-specific) design conventions and patterns, predominantly outlined in Apple's HIG</p>\n</li>\n</ul>\n<p>Deviating from the HIG means you are creating a new design language specific to your application,\nwhich may have its benefits, but also requires more learning on the part of the user.</p>\n<p>Similarly, deviating from a web application's style guide, UI component library, or interaction pattern library\nis equivalent to creating a new design language that users need to learn.</p>\n<p>The web itself has it's own design language.\nUsers have acclimated to using blue underlined links, scrolling through pages, using standard form elements,\nas well as a plethora of other interaction design patterns.</p>\n<p>Though sometimes DSLs are appropriate,\nthe main disadvantage to using a DSL is that it requires domain-specifig knowledge of certain APIs rather than relying on more standard conventions. An example of this would be using coffeescript or JSX, rather than the standardized JavaScript (EMCAScript) syntax</p>\n","draft":true},{"path":"blog/unit-testing-ui","slug":"unit-testing-ui","title":"Unit testing UI","description":null,"date":"2016-06-20T00:00:00.000Z","excerpt":"<p>I recently read\n<a href=\"http://product.voxmedia.com/2016/4/20/11458814/how-designers-can-use-unit-testing-to-build-resilient-and-happy-design-systems\">this excellent article</a>,\nwhere the design team at Vox has devised a testing framework for new UI <a href=\"/blog/posts/components\">components</a> introduced into their pattern library.\nWhile the methods they suggest are excellent, and what I’d consider something that should be industry-standard in our field,\nit got me thinking that this concept could be taken a step further.\nWhat if designers wrote actual unit tests for UI components?\nWhat if those tests were actually applied in user acceptance testing, A/B tests, and tested against performance metrics?</p>\n","html":"<p>I recently read\n<a href=\"http://product.voxmedia.com/2016/4/20/11458814/how-designers-can-use-unit-testing-to-build-resilient-and-happy-design-systems\">this excellent article</a>,\nwhere the design team at Vox has devised a testing framework for new UI <a href=\"/blog/posts/components\">components</a> introduced into their pattern library.\nWhile the methods they suggest are excellent, and what I’d consider something that should be industry-standard in our field,\nit got me thinking that this concept could be taken a step further.\nWhat if designers wrote actual unit tests for UI components?\nWhat if those tests were actually applied in user acceptance testing, A/B tests, and tested against performance metrics?</p>\n<!-- more -->\n<h2>What would a unit test look like?</h2>\n<p>This is a really contrived example of what a UI unit test could look like:</p>\n<pre><code>describe: CTA button\n  context: when a user sees the button\n    expect: Users should know that the button is clickable\n    expect: User should be able to click the button\n    expect: Conversions should be above 4%\n</code></pre>\n<p>Taking a cue from test driven development, these tests should be written before any design work is started, and they should \"fail\"  – because there’s no design yet.</p>\n<p>Any work that follows should be towards making those tests pass.</p>\n<p>You might notice that this looks suspiciously like a <a href=\"https://en.wikipedia.org/wiki/User_story\">user story</a>,\nbut I think this approach differs in a few ways.\nFirst, user stories attempt to capture the <em>how</em> and <em>why</em> in addition to the <em>what.</em>\nThese unit tests only concern themselves with <em>what</em>.\nSecondly, user stories are very much a part of Agile software development,\nwhereas these are simply meant to measure the design of UI components.</p>\n<h2>“Running” tests</h2>\n<p>Once you have a potential component, or even better, several potential components,\nyou’d be ready to start testing it against the unit tests previously written.\nThese tests shouldn’t overshadow the typical formats and methodologies of user testing, A/B testing, etc.\nInstead, they should be used as an analytical tool to gauge the results.</p>\n<p>If, when user testing a feature, the user doesn’t notice the button, there’s still more design work to do.</p>\n<p>If, after ramping up a new button component, A/B testing shows that conversion is lower than expected, there’s still more work to do.</p>\n<p>If users are bouncing at higher-than-anticipated rates because of slow page load, there’s still more work to be done.</p>\n<p>Now, I will admit that design work is a lot less black and white than software development can be, and that it might be easy to shoot yourself in the foot with an approach like this. If, for example, conversion never gets above 3.9%, and you spend 2 weeks designing and redesigning a button, there are probably some other variables affecting things, and there are better ways to prioritize your time.</p>\n<p>But taking this idea as an approach to problem solving, gauging the efficacy of a design solution, and setting up goals for a product, I think it’s a concept worth exploring.</p>\n"},{"path":"blog/components","slug":"components","title":"Components","description":null,"date":"2016-06-17T00:00:00.000Z","excerpt":"<p>Everything in a UI is a component.\nThis includes buttons, inputs, forms, promotional modules, pages, user flows, etc.\nI use the word <em>component</em> not only because this is how the underlying code is written in libraries like React and Ember,\nbut also because pieces of a well-designed UI system should be <a href=\"https://en.wikipedia.org/wiki/Composability\">composable</a>.</p>\n","html":"<p>Everything in a UI is a component.\nThis includes buttons, inputs, forms, promotional modules, pages, user flows, etc.\nI use the word <em>component</em> not only because this is how the underlying code is written in libraries like React and Ember,\nbut also because pieces of a well-designed UI system should be <a href=\"https://en.wikipedia.org/wiki/Composability\">composable</a>.</p>\n<!-- more -->\n<p>From the <a href=\"https://en.wikipedia.org/wiki/Composability\">Wikipedia page on Composability</a>:</p>\n<blockquote>\n<p>A highly composable system provides recombinant components that can be selected and assembled in various combinations to satisfy specific user requirements. In information systems, the essential features that make a component composable are that it be:</p>\n<ul>\n<li>self-contained (modular): it can be deployed independently – note that it may cooperate with other components, but dependent components are replaceable</li>\n<li>stateless: it treats each request as an independent transaction, unrelated to any previous request. Stateless is just one technique; managed state and transactional systems can also be composable, but with greater difficulty.</li>\n</ul>\n</blockquote>\n<h2>Modular &#x26; Stateless Components</h2>\n<pre><code>state => ui\n</code></pre>\n<p>A UI system that is made up of independent stateless components is extremely flexible.\nWhen individual pieces need to be swapped out or updated,\nthose changes are isolated and don’t cause other parts of a system to break.\nThinking about these components as being pure functions –\nthat is, the same state always produces the same output –\ncan help ensure composability.</p>\n<blockquote>\n<p>A pure function is one that exhibits the property of substitution: replacing a call with its returned value should make the program equivalent. As an example, <code>concat('hello', 'world')</code> can be substituted with <code>'hello world'</code> without changing the behavior of your program.</p>\n<p>How can we apply this to a graphical user interface? By having the function return an abstract representation of widgets (or markup) to be rendered on the screen...</p>\n<p>– <a href=\"http://rauchg.com/2015/pure-ui/\">Pure UI by Guillermo Rauch</a></p>\n</blockquote>\n<h2>Why is everything a “component?”</h2>\n<p>Naming things is hard, there’s no debate there, but when you start to categorize different parts of a UI into pages, views, flows, atoms, molecules, materials, or kittens, you’ve already started to undermine the concept of composability, and it probably takes more time and effort to get an entire team of people to “agree upon” your proposed naming conventions than it’s worth.</p>\n<p>The point of this is to think about everything as an interoperable system.\nYou can slice and dice components in any way you see fit, and these components are likely to change and be fine tuned as a system is developed.\nPremature optimization is a trap that’s easy to fall into.\nEmbrace the chaos as you build.\nPatterns will emerge from the primordial goop of UI that is your product,\nand by consistently thinking about a composable system you’ll probably come up with something more flexible\nand more robust than if one person dictates a dogmatic framework to work within.</p>\n"},{"path":"blog/zero-configuration-react-static-site-generator","slug":"zero-configuration-react-static-site-generator","title":"Zero-Configuration React Static Site Generator","description":null,"date":"2016-02-15T00:00:00.000Z","excerpt":"<p>React is a great way to generate static HTML with a component-based UI.\nOne of the biggest hurdles to working with React is the amount of boilerplate and build configuration it takes to get going.\nI wanted to make it dead-simple to start building static pages with React\nand without the need to install tons of npm modules and configure webpack.</p>\n","html":"<p>React is a great way to generate static HTML with a component-based UI.\nOne of the biggest hurdles to working with React is the amount of boilerplate and build configuration it takes to get going.\nI wanted to make it dead-simple to start building static pages with React\nand without the need to install tons of npm modules and configure webpack.</p>\n<!-- more -->\n<p>That’s where <a href=\"https://github.com/jxnblk/static-react\">static-react</a> comes in. Here’s out to get started.</p>\n<p><em>Update: As of version 3.2.0, static-react includes Babel presets and they do not need to be installed separately. This post has been updated to reflect those changes.</em></p>\n<h2>1. Install Dependencies</h2>\n<pre><code class=\"language-sh\">npm i -D react static-react\n</code></pre>\n<p>~~The Babel presets are optional, but make working with React much nicer, in my opinion.~~</p>\n<h2>2. Add a Run Script</h2>\n<p>Add the following run script to package.json.</p>\n<pre><code class=\"language-json\">\"scripts\": {\n  \"start\": \"static-react components/Root.js > index.html\"\n}\n</code></pre>\n<h2>~~3. Configure Babel (Optional) <a href=\"#1\">*</a>~~</h2>\n<p>~~Add the following to package.json.~~</p>\n<h2>4. Add Components</h2>\n<p>Create a <code>components</code> directory and a <code>Root.js</code> React component.</p>\n<pre><code class=\"language-js\">// Root.js\nimport React from 'react'\n\nclass Root extends React.Component {\n  render () {\n    return &#x3C;h1>Hello&#x3C;/h1>\n  }\n}\n\nexport default Root\n</code></pre>\n<h2>5. Build</h2>\n<pre><code class=\"language-sh\">npm start\n</code></pre>\n<p>Open <code>index.html</code> and you should see the rendered Root component.</p>\n<h2>Building Out a Page</h2>\n<p>You'll certainly want more than just a heading in the final page.\nBuild out some more components and run <code>npm start</code> to rebuild.</p>\n<p>Here is an example set of starter components:</p>\n<pre><code class=\"language-js\">// Root.js\nimport React from 'react'\nimport Head from './Head'\nimport Header from './Header'\nimport Main from './Main'\nimport Footer from './Footer'\n\nclass Root extends React.Component {\n  render () {\n    return (\n      &#x3C;html>\n        &#x3C;Head title='Static React Demo' />\n        &#x3C;body className='px3'>\n          &#x3C;Header title='Hello' />\n          &#x3C;Main />\n          &#x3C;Footer />\n        &#x3C;/body>\n      &#x3C;/html>\n    )\n  }\n}\n\nexport default Root\n</code></pre>\n<pre><code class=\"language-js\">// Head.js\nimport React from 'react'\n\nconst Head = ({ title }) => (\n  &#x3C;head>\n    &#x3C;meta charSet='utf-8' />\n    &#x3C;title>{title}&#x3C;/title>\n    &#x3C;link href='https://npmcdn.com/basscss-basic@1.0.0/index.css' rel='stylesheet' />\n    &#x3C;link href='https://npmcdn.com/basscss@8.0.0/css/basscss.min.css' rel='stylesheet' />\n    &#x3C;meta name='viewport' content='width=device-width, initial-scale=1' />\n  &#x3C;/head>\n)\n\nexport default Head\n</code></pre>\n<pre><code class=\"language-js\">// Header.js\nimport React from 'react'\n\nconst Header = ({ title }) => (\n  &#x3C;header className='py3'>\n    &#x3C;h1>{title}&#x3C;/h1>\n  &#x3C;/header>\n)\n\nexport default Header\n</code></pre>\n<pre><code class=\"language-js\">// Main.js\nimport React from 'react'\n\nconst Main = () => (\n  &#x3C;main className='py4'>\n    &#x3C;img src='http://lorempixel.com/256/256/cats/'\n      alt='Kitten' />\n  &#x3C;/main>\n)\n\nexport default Main\n</code></pre>\n<pre><code class=\"language-js\">// Footer.js\nimport React from 'react'\n\nconst Footer = () => (\n  &#x3C;footer className='py3'>\n    &#x3C;p>© 2016 Brent Jackson&#x3C;/p>\n  &#x3C;/footer>\n)\n\nexport default Footer\n</code></pre>\n<p>If you have any thoughts on or issues with the static-react module, please check out the repo on <a href=\"https://github.com/jxnblk/static-react\">GitHub</a>.</p>\n<p id=\"1\" class=\"mt3 italic\">\n  <del>* Technically, I guess this post should be titled <b>Near-Zero-Configuration</b>, but using Babel is completely optional.</del>\n</p>\n","tags":["react","static-site-generator"]},{"path":"blog/mathematical-web-typography","slug":"mathematical-web-typography","title":"Mathematical Web Typography","description":null,"date":"2015-06-23T00:00:00.000Z","excerpt":"<p>When it comes to designing for the Web\nI like to follow a handful of general principles.\nFirst, design for the medium, or as Frank Chimero puts it,\nfollow <a href=\"http://frankchimero.com/writing/the-webs-grain/\">“the grain of the Web”</a>.\nThe Web is fluid - based on screens and devices of varying sizes –\nand typography on the Web should reflect that.\nSecond, design <a href=\"http://alistapart.com/article/content-out-layout\">content-out</a>,\nwhich usually means designing around a strong typographical base since the large majority of Web content and UI is text.\nAnd last, design with <a href=\"http://alistapart.com/article/more-meaningful-typography\">modular scales</a>.\nThings built on the Web should be fluid and infinitely scalable.\nUsing modular scales in a design compliments that idea and keeps things organized in the face of growing complexity.</p>\n","html":"<p>When it comes to designing for the Web\nI like to follow a handful of general principles.\nFirst, design for the medium, or as Frank Chimero puts it,\nfollow <a href=\"http://frankchimero.com/writing/the-webs-grain/\">“the grain of the Web”</a>.\nThe Web is fluid - based on screens and devices of varying sizes –\nand typography on the Web should reflect that.\nSecond, design <a href=\"http://alistapart.com/article/content-out-layout\">content-out</a>,\nwhich usually means designing around a strong typographical base since the large majority of Web content and UI is text.\nAnd last, design with <a href=\"http://alistapart.com/article/more-meaningful-typography\">modular scales</a>.\nThings built on the Web should be fluid and infinitely scalable.\nUsing modular scales in a design compliments that idea and keeps things organized in the face of growing complexity.</p>\n<!-- more -->\n<h2>Handling Complexity</h2>\n<p>Often when looking at how different sites have handled typography, I see similar problems arise.\nInstead of sticking to a limited, modular scale, any one site might have hundreds of font sizes declared\nand many more margin and padding declarations affecting the white space.\nInstead of conforming to a common convention that could help users make sense of the underlying complexity,\nthese sites have added to the cognitive overhead with little to no benefit for the user.\nIn my experience, a page rarely needs more than six font sizes to effectively convey its information hierarchy,\nand that’s exactly how many font sizes are provided with HTML headings.</p>\n<h2>Context-Specific Approaches</h2>\n<p>Instead of focusing on systems that enhance the content,\ndesign solutions often focus on singular context-specific problems and introduce\n<a href=\"https://css-tricks.com/magic-numbers-in-css/\">magic numbers</a> that quickly grow out of hand.\nThese context-specific problems should inform the larger system, not break it.\nWhile these one-off cases may seem harmless in isolation,\nthey often cause increasing complexity in a code base, and can lead to unintended side effects –\nincreasing technical debt and slowing down development speed.\nWhile there may not be any one way to solve these problems,\nmany sites try to address them with a style guide and well-defined typographic systems.</p>\n<h2>Screen Media</h2>\n<p>Many typographic conventions have been around for centuries,\nbut most of that knowledge was based on technology that involved physical pieces of metal and paper media.\nThe majority of these conventions are still applicable on the Web,\nbut I also think that the different constraints and capabilities of screens warrant some new approaches.</p>\n<h2>Start with the Defaults</h2>\n<p>The browser defaults for font sizes provide a great starting point for developing a robust typographic system.\nSince some of the values result in non-integer pixel values,\nI tend to normalize and round the numbers to make them more scalable and easier to work with.</p>\n<p>Default | Pixels   | Normalized | Normalized Rem\n--------|----------|------------|--------\n0.67em  | 10.72px  | 12px       | .75rem\n0.83em  | 13.28px  | 14px       | .875rem\ninherit | 16px     | 16px       | 1rem\n1.17em  | 18.72px  | 20px       | 1.25rem\n1.5em   | 24px     | 24px       | 1.5rem\n2em     | 32px     | 32px       | 2rem</p>\n<h2>Powers of Two</h2>\n<p>Taking a look at the numbers used in screen-based media, there are a lot of powers of two.\nThe default font size for most browsers is 16px, which is 2<sup>4</sup>.\nScreens are digital media, and everything boils down to binary bits and bytes.\nBecause they are directly tied to graphics memory,\nnearly all screen dimensions are based on sums of powers of two, and are often divisible by 16.\nFor example, the <a href=\"https://en.wikipedia.org/wiki/Graphics_display_resolution#XGA_.281024.C3.97768.29\">XGA</a>\ndisplay standard is 1024×768px, which converted to rems (or divided by 16) is 64×48rem.</p>\n<h2>Modular Scales and Factors</h2>\n<p>Working with numbers based on powers of two can result in an entire system of sensible numbers – often integers.\nThe normalized scale above starts with 16px (1rem) as a base, and multiplies each by specific factors to create integers.\nTaking this normalized scale and setting a line-height of either 1.25 or 1.5 yields the following pixel values.</p>\n<p>Font Size | 1.25 Line Height | 1.5 Line Height\n----------|------------------|----------------\n12px      | 15px             | 18px\n14px      | 17.5px           | 21px\n16px      | 20px             | 24px\n20px      | 25px             | 30px\n24px      | 30px             | 36px\n32px      | 40px             | 48px</p>\n<p>These factors are all based on fractions with a power of two denominator – or based on halves and doubles.</p>\n<p>Fraction | Decimal\n---------|--------\n1/2      | 0.5\n1/4      | 0.25\n1/8      | 0.125\n1/16     | 0.0625</p>\n<p>This is similar to how units of time in Western music are divided.\nWhile evolution gave us ten fingers, and base 10 number systems arised from that,\nworking with powers of two can be a more suitable convention for digital media.</p>\n<h2>1rem as a Base Unit</h2>\n<p>When setting type, especially body copy, 1rem doesn’t always fit the content and the typeface used,\nand it’s often desirable to use other font sizes.\nInstead of altering the base font size and dealing with less-than-ideal numbers and complex calculations,\nI keep 1rem as the default and derive all other typographic sizes from that base.\nFor example, setting body copy to 1.125rem (18px) and keeping other UI elements tied to the base 1rem\ncan make spacing and alignment adjustments much simpler and help create a natural rhythm in the visual design.</p>\n<h2>Line Height</h2>\n<p>In many stylesheets I see line-heights that are calculated as a quotient of the target line-height and the font size.\nThis sometimes leads to irrational, magic numbers that need to be rounded and can cause unforeseen and unintended consequences.</p>\n<pre><code class=\"language-css\">/* Calculated from the target line-height */\n.small-copy {\n  font-size: 14px;\n  line-height: 1.4285714; /* 20px, e.g. 20 divided by 14 */\n}\n.body-copy {\n  font-size: 18px;\n  line-height: 1.3888889; /* 25px, e.g. 25 divided by 18 */\n}\n</code></pre>\n<p>Not only do browsers handle subpixel rounding differently,\nthis can also cause issues when inheritance and scaling font sizes comes in to play,\nwhich can lead to type scales with line heights coupled to each font size\nand less DRY, less flexible code.</p>\n<p>On the other hand, keeping numbers tied to the same system yields interesting results.\nThe line heights below are computed to seemingly unrelated numbers: 21 and 27px.</p>\n<pre><code class=\"language-css\">/* Using 1rem as a base */\n.small-copy {\n  font-size: .875rem;\n  line-height: 1.5; /* 21px */\n}\n.body-copy {\n  font-size: 1.125rem;\n  line-height: 1.5; /* 27px */\n}\n</code></pre>\n<p>The sum of the font sizes .875rem and 1.125rem is 2rem,\nand the sum of these two line heights is 48px,\nwhich is the same line height for 32px type when set to 1.5.\nAlthough it might not seem like much,\nusing this approach across an entire typographic system\ncan create many subtle relationships among different parts of the design.</p>\n<h2>White Space</h2>\n<p>Font sizes and line heights are only parts of a typographic system.\nThe white space between headings, paragraphs, and other elements plays a crucial part\nin creating typographic color and visual rhythm.\nFor many of the same reasons listed above, and to stick to a content-out approach,\nI tend to base margin and padding values on numbers derived from the same typographic system\nand use a modular scale.</p>\n<p>For example, <a href=\"http://basscss.com\">Basscss</a> uses the following scale for margin and padding declarations.</p>\n<p>Step | Value\n-----|------\n1    | .5rem\n2    | 1rem\n3    | 2rem\n4    | 4rem</p>\n<p>Each one of these values can be derived from either halving or doubling the 1rem base\nand is related to the other values used for typography.</p>\n<h2>Building Better Systems</h2>\n<p>This is just one approach to creating modular typographic systems on the Web\nand only scratches the surface on some of the underlying details.\nHopefully this can help inform building more robust,\nfault tolerant design systems that\npromote consistency, reduce technical debt,\nand make designing and developing for the Web more efficient and more enjoyable.</p>\n","tags":["css","typography","math"]},{"path":"blog/mini-macbook-review","slug":"mini-macbook-review","title":"Mini MacBook Review","description":"Why the new MacBook might just be my favorite computer ever","date":"2015-06-17T00:00:00.000Z","excerpt":"Why the new MacBook might just be my favorite computer ever","html":"<h2>Size</h2>\n<p>Fits in my pocket.</p>\n<h2>Screen</h2>\n<p>Super sharp.</p>\n<h2>Keyboard</h2>\n<p>Sounds great. <em>pok pok pok pok pok</em></p>\n<h2>Trackpad</h2>\n<p>Clicks and clicks again, but doesn’t really click.</p>\n<h2>Ports</h2>\n<p>Power: check. Beats: check.</p>\n<h2>Performance</h2>\n<p>Runs Vim like a champ.</p>\n","tags":["apple","macbook","review","laptop","tech"]},{"path":"blog/color-palette-documentation-for-living-style-guides","slug":"color-palette-documentation-for-living-style-guides","title":"Color Palette Documentation for Living Style Guides","description":null,"date":"2015-06-15T00:00:00.000Z","excerpt":"<p>Virtually every style guide has a color palette section in its documentation.\nMany times I’ve seen this documentation created manually, where every change to a color requires updating the values in two places – the stylesheet and the style guide.\nThis often leads to one falling out of sync with the other,\nand makes maintaining a living style guide more difficult.</p>\n<p>The problem with this approach is that the values are being defined in two different places.\nFor a true living style guide, the code should serve as the single source of truth.\nExtracting color values from CSS can help keep documentation in sync,\nexpose outdated colors, and point out opportunities for normalizing designs.</p>\n","html":"<p>Virtually every style guide has a color palette section in its documentation.\nMany times I’ve seen this documentation created manually, where every change to a color requires updating the values in two places – the stylesheet and the style guide.\nThis often leads to one falling out of sync with the other,\nand makes maintaining a living style guide more difficult.</p>\n<p>The problem with this approach is that the values are being defined in two different places.\nFor a true living style guide, the code should serve as the single source of truth.\nExtracting color values from CSS can help keep documentation in sync,\nexpose outdated colors, and point out opportunities for normalizing designs.</p>\n<!-- more -->\n<p>The following will show how to use Node.js to build source-code-derived documentation for color palettes\nand present color contrast values for each possible pairing as a guide for usage.</p>\n<h2>Initial Setup</h2>\n<p>If you’re already using Node.js in your build system,\nyou can integrate this directly into your project.\nFor the purposes of this tutorial, create a new sandboxed project to experiment with.</p>\n<pre><code class=\"language-bash\">mkdir color-documentation\ncd color-documentation\nnpm init\n</code></pre>\n<p>Install the following modules.</p>\n<pre><code class=\"language-bash\">npm i --save-dev postcss color colorable lodash\n</code></pre>\n<p>The <a href=\"https://github.com/postcss/postcss\">PostCSS</a> module will be used to transform the source CSS into an\n<a href=\"http://en.wikipedia.org/wiki/Abstract_syntax_tree\"><abbr title=\"Abstract Syntax Tree\">AST</abbr></a>\nfor manipulation with JavaScript.\n<a href=\"https://www.npmjs.com/package/color\">Color</a> will be used to convert the values found in the stylesheet to hexidecimal.\n<a href=\"http://jxnblk.com/colorable\">Colorable</a> will be used to get color contrast values and\n<a href=\"http://www.w3.org/TR/WCAG20/#visual-audio-contrast\">WCAG</a>\nscores for every possible pairing of colors.\nAnd <a href=\"https://lodash.com/docs\">lodash</a> will be used to find unique color values and\nto render templates to HTML.</p>\n<p>Copy a CSS file into the project to use as a source for the color values.\nThis tutorial will use <a href=\"http://www.basscss.com/docs/\">Basscss</a> as an example.</p>\n<h2>Build Script</h2>\n<p>Create a new <code>build.js</code> file that will be used to read the CSS file and eventually to generate an HTML page.</p>\n<pre><code class=\"language-js\">// build.js\nvar fs = require('fs')\n\n// Read the contents of basscss.css\nvar css = fs.readFileSync('basscss.css', 'utf8')\n\nconsole.log(css)\n</code></pre>\n<p>For now, this script just logs the stylesheet.</p>\n<h2>Package Scripts</h2>\n<p>Add a script to <code>package.json</code> for the build script.</p>\n<pre><code class=\"language-json\">// package.json\n\"scripts\": {\n  \"start\": \"node build\"\n}\n</code></pre>\n<p>Run the script to make sure everything is working.</p>\n<pre><code class=\"language-bash\">npm start\n</code></pre>\n<h2>Parsing CSS</h2>\n<p>Create a new <code>lib/parse-colors.js</code> file for parsing the CSS.</p>\n<pre><code class=\"language-js\">// lib/parse-colors.js\nvar _ = require('lodash')\nvar postcss = require('postcss')\nvar Color = require('color')\n\nmodule.exports = function(css) {\n  // Array of colors to return\n  var colors = []\n\n  // Parse the CSS file and get the AST\n  var root = postcss.parse(css)\n\n  // Iterate through each declaration and log the property\n  root.eachDecl(function(decl) {\n    console.log(decl.prop)\n  })\n\n  return colors\n}\n</code></pre>\n<p>Use this module in <code>build.js</code>.</p>\n<pre><code class=\"language-js\">// build.js\nvar fs = require('fs')\nvar parseColors = require('./lib/parse-colors')\n\n// Read the contents of basscss.css\nvar css = fs.readFileSync('basscss.css', 'utf8')\nvar colors = parseColors(css)\n</code></pre>\n<p>The <code>parse-colors</code> module takes raw CSS and transforms it into an AST that can be iterated over.\nFor now, this just logs all the properties found in the stylesheet.</p>\n<h2>Filtering Colors</h2>\n<p>Next update the parse module to filter out everything but <code>color</code> and <code>background-color</code> properties,\nconvert the values to hex, and remove duplicates.\nWhile color values can be used in other properties including the <code>background</code> shorthand,\nhandling that would add complexity and will be omitted from this tutorial.</p>\n<pre><code class=\"language-js\">// lib/parse-colors.js\nvar _ = require('lodash')\nvar postcss = require('postcss')\nvar Color = require('color')\n\nmodule.exports = function(css) {\n\n  var colors = []\n  var root = postcss.parse(css)\n\n  // Iterate through each color and background-color declaration\n  root.eachDecl(/(color|background\\-color)/, function(decl) {\n    // Add each color value to the colors array\n    colors.push(decl.value)\n  })\n\n  // Convert all color values to hex strings\n  colors = colors.map(function(color) {\n    var hex\n    try {\n      hex = Color(color).hexString()\n      return hex\n    } catch(e) {\n      // Handle color values like inherit and currentcolor\n      return false\n    }\n  })\n  .filter(function(value) {\n    // Remove false values\n    return value\n  })\n\n  // Remove duplicate values\n  colors = _.uniq(colors)\n\n  return colors\n\n}\n</code></pre>\n<p>The first argument in <code>root.eachDecl</code> is a regular expression to filter declarations for either <code>color</code> or <code>background-color</code>.\nSee the <a href=\"https://github.com/postcss/postcss/blob/master/docs/api.md#containereachdeclpropfilter-callback\">PostCSS documentation</a> for more details.\nThe <code>Color().hexString()</code> method converts any valid color value to hex format. The lodash <code>_.uniq</code> method removes duplicate values from an array.</p>\n<h2>HTML Template</h2>\n<p>Next, create a <code>template.html</code> file for displaying the colors.\nThis tutorial uses lodash templates, but any JavaScript templating language would work.\nNote: if you’re using a stylesheet other than Basscss, the classes applied below may differ.</p>\n<pre><code class=\"language-html\">&#x3C;!DOCTYPE html>\n&#x3C;!-- template.html -->\n&#x3C;html>\n&#x3C;head>\n  &#x3C;meta charset=\"utf-8\">\n  &#x3C;title>Color Palette Docs Demo&#x3C;/title>\n  &#x3C;link rel=\"stylesheet\" href=\"basscss.css\">\n&#x3C;/head>\n&#x3C;body class=\"px3\">\n  &#x3C;header class=\"py3\">\n    &#x3C;h1>Color Palette Docs Demo&#x3C;/h1>\n  &#x3C;/header>\n  &#x3C;ul class=\"list-reset flex flex-wrap flex-justify mxn2\">\n    &#x3C;% colors.map(renderColor) %>\n  &#x3C;/ul>\n  &#x3C;% function renderColor(color) { %>\n    &#x3C;li class=\"m2\">\n      &#x3C;div style=\"background-color:&#x3C;%= color %>\"\n        class=\"p4\">&#x3C;/div>\n      &#x3C;%= color %>\n    &#x3C;/li>\n  &#x3C;% } %>\n&#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<p>Inside the <code>&#x3C;ul></code> the <code>.map()</code> method is used to iterate over the <code>colors</code> array and passes the <code>renderColor</code> function as a callback.\nThe <code>renderColor</code> function then renders an <code>&#x3C;li></code> for each color with a div that has its background color set to that value.</p>\n<p>Edit <code>build.js</code> to read the template and generate an HTML file.</p>\n<pre><code class=\"language-js\">// build.js\nvar _ = require('lodash')\nvar fs = require('fs')\nvar parseColors = require('./lib/parse-colors')\n\nvar css = fs.readFileSync('basscss.css', 'utf8')\n// Read the template string\nvar template = fs.readFileSync('template.html', 'utf8')\n// Create a lodash template function\nvar tpl = _.template(template)\nvar colors = parseColors(css)\n\n// Render the template function to an HTML string\nvar html = tpl({ colors: colors })\n\n// Write an HTML file to disk\nfs.writeFileSync('index.html', html)\n</code></pre>\n<p>Now run <code>npm start</code> which should generate an HTML file with the colors parsed from the stylesheet.</p>\n<pre><code class=\"language-bash\">npm start &#x26;&#x26; open index.html\n</code></pre>\n<p><img src=\"//jxnblk.s3.amazonaws.com/assets/images/css-color-palette.png\"\nalt=\"Color palette demo\"\nwidth=\"768\"\nheight=\"496\" /></p>\n<h2>Readable Color Combinations</h2>\n<p>The Colorable module takes an array of colors and returns a nested array of color combinations, along with their contrast values to test for readability. This can be useful for seeing what foreground-background pairs can and can’t be used for text.</p>\n<p>Create a new <code>lib/parse-combos.js</code> file.</p>\n<pre><code class=\"language-js\">// lib/parse-combos.js\nvar colorable = require('colorable')\n\nmodule.exports = function(colors) {\n\n  var combos = []\n  // Get the Colorable array\n  var arr = colorable(colors)\n\n  // Flatten the array and combine the foreground and background colors\n  arr.forEach(function(color) {\n    var pairing = color.hex\n    color.combinations.forEach(function(combo) {\n      combo.pairing = pairing\n      combos.push(combo)\n    })\n  })\n\n  // Sort the array by contrast from high to low\n  combos.sort(function(a, b) {\n    return b.contrast - a.contrast\n  })\n\n  return combos\n\n}\n</code></pre>\n<p>Add the <code>parse-combos</code> module to <code>build.js</code> and pass the combos array into the template function.</p>\n<pre><code class=\"language-js\">// build.js\nvar _ = require('lodash')\nvar fs = require('fs')\nvar parseColors = require('./lib/parse-colors')\nvar parseCombos = require('./lib/parse-combos')\n\nvar css = fs.readFileSync('basscss.css', 'utf8')\nvar template = fs.readFileSync('template.html', 'utf8')\nvar tpl = _.template(template)\nvar colors = parseColors(css)\nvar combos = parseCombos(colors)\n\nvar html = tpl({\n  colors: colors,\n  combos: combos\n})\nfs.writeFileSync('index.html', html)\n</code></pre>\n<p>Add a section to <code>template.html</code> to display the color combinations.</p>\n<pre><code class=\"language-html\">  &#x3C;h2>Combinations&#x3C;/h2>\n  &#x3C;ul class=\"list-reset flex flex-wrap\">\n    &#x3C;% combos.map(renderCombo) %>\n  &#x3C;/ul>\n  &#x3C;% function renderCombo(combo) { %>\n    &#x3C;li class=\"py2 col-6 sm-col-4 md-col-3 lg-col-2\"\n      style=\"color:&#x3C;%= combo.pairing %>;background-color:&#x3C;%= combo.hex %>\">\n      &#x3C;div class=\"h1 bold px2\">\n        Aa\n      &#x3C;/div>\n      &#x3C;div class=\"h5 px2\">\n        &#x3C;%= combo.pairing %>\n        &#x3C;br>\n        &#x3C;%= combo.hex %>\n        &#x3C;br>\n        &#x3C;%= combo.contrast.toFixed(2) %>\n      &#x3C;/div>\n    &#x3C;/li>\n  &#x3C;% } %>\n</code></pre>\n<p>Run the build script. You should now have a list of color combinations along with the contrast value for each pair.</p>\n<p><img src=\"//jxnblk.s3.amazonaws.com/assets/images/css-color-combos.jpg\"\nalt=\"Color combination demo\"\nwidth=\"768\"\nheight=\"576\" /></p>\n<p>While seeing combinations that don’t have high enough contrast might be useful,\nfor this tutorial set Colorable’s <code>threshold</code> option to 3\nto only show combinations that pass the WCAG minimum for large text.</p>\n<pre><code class=\"language-js\">// lib/parse-combos.js\n  // ...\n  var combos = []\n  var arr = colorable(colors, { threshold: 3 })\n  // ...\n</code></pre>\n<p>Run the build script again. Now you should only see color combinations with a contrast value of 3 or above.</p>\n<p>At this point, feel free to edit the styles of the rendered template and explore different ways of showing this information.\nYou can also swap <code>basscss.css</code> out for another framework or stylesheet to test things out.</p>\n<h2>Expanding Upon This Idea</h2>\n<p>In addition to displaying raw color values and contrast ratios,\nother aspects of color can be extracted from a stylesheet,\nsuch as the selectors used for each color or the number of times each color is used in a stylesheet.\nYou could also show colors sorted by similarity to help expose\ninconsistencies and opportunities to normalize the design.</p>\n<p>While this is not a complete replacement for human written documentation,\nand creating guidelines around color usage requires carefully considered writing,\nusing automated tooling to generate source-code-derived documentation\nfor things like color values can help create better living style guides.</p>\n","tags":["css","color","documentation","style guide","living style guide","color contrast","accessibility","a11y"]},{"path":"blog/how-react-geomicons-works","slug":"how-react-geomicons-works","title":"How react-geomicons Works","description":null,"date":"2015-06-10T00:00:00.000Z","excerpt":"<p><a href=\"http://geomicons.com\">Geomicons Open</a> is an SVG icon set completely hand-coded using the Path element.\nThe first version’s source was built in complete SVG, but I soon realized that the wrapping SVG and Path elements were the exact same for each icon.\nIn an effort to DRY things up, I set up a rudimentary build process that would take source code containing only the Path elements’ <code>d</code> attribute value and create valid SVG code.</p>\n<p>I also built a rough icon injection script...</p>\n<ul>\n<li>geomicons-open as npm module</li>\n<li>paths object</li>\n<li>react-geomicons dependency</li>\n<li>wrapping dumb component</li>\n</ul>\n","html":"<p><a href=\"http://geomicons.com\">Geomicons Open</a> is an SVG icon set completely hand-coded using the Path element.\nThe first version’s source was built in complete SVG, but I soon realized that the wrapping SVG and Path elements were the exact same for each icon.\nIn an effort to DRY things up, I set up a rudimentary build process that would take source code containing only the Path elements’ <code>d</code> attribute value and create valid SVG code.</p>\n<p>I also built a rough icon injection script...</p>\n<ul>\n<li>geomicons-open as npm module</li>\n<li>paths object</li>\n<li>react-geomicons dependency</li>\n<li>wrapping dumb component</li>\n</ul>\n","draft":true,"tags":["react","svg","icons","geomicons"]},{"path":"blog/static-site-generation-with-react-and-webpack","slug":"static-site-generation-with-react-and-webpack","title":"Static Site Generation with React and Webpack","description":null,"date":"2015-06-06T00:00:00.000Z","excerpt":"<p>I’ve been dabbling with React for a few months now and using it in several small open source projects\nto better understand the technology.\nReact’s focus on reusablility, along with the ability to install and require components via npm,\nprovides an elegant way to rapidly build application UI in an efficient and consistent way.\nIt’s also a great way to handle server-side rendering and provides high cohesion between markup and display logic.</p>\n","html":"<p>I’ve been dabbling with React for a few months now and using it in several small open source projects\nto better understand the technology.\nReact’s focus on reusablility, along with the ability to install and require components via npm,\nprovides an elegant way to rapidly build application UI in an efficient and consistent way.\nIt’s also a great way to handle server-side rendering and provides high cohesion between markup and display logic.</p>\n<!-- more -->\n<p><strong>Note: many of the packages referenced in this post have released major version, breaking updates since this was written. Some of the examples may not work with the latest npm modules, especially the react-router package, which has a much different API now.</strong></p>\n<h2>Why</h2>\n<p>React is incredibly intuitive and flexible to work with,\nbut relying solely on client side rendering\nleaves a lot to be desired in regards to percieved performance.\nWith a static React site, the page loads just like any other static HTML,\nand the JavaScript kicks in whenever it’s downloaded.\nThis is extremely helpful for combining documentation with interactive demonstrations,\nlike <a href=\"http://jxnblk.com/colorable\">Colorable</a> or <a href=\"http://jxnblk.com/react-icons\">Building SVG Icons with React</a>.\nUsing React with webpack also allows you to consolidate the entire build process\nin Node and take advantage of anything in the npm ecosystem.\nLast but not least, React is just fun to use.</p>\n<h2>How</h2>\n<p>Although there are several ways to render static sites with React,\nthe following is what I’ve found to be easiest.</p>\n<p>First start a fresh project and initialize npm.</p>\n<pre><code class=\"language-bash\">mkdir react-static-site\ncd react-static-site\nnpm init\n</code></pre>\n<p>Install the following modules.</p>\n<pre><code class=\"language-bash\">npm i --save-dev react webpack webpack-dev-server jsx-loader static-site-generator-webpack-plugin react-router\n</code></pre>\n<p><a href=\"http://webpack.github.io/\" target=\"_blank\">Webpack</a> and webpack-dev-server will be used for the entire build process and can also handle assets such as CSS, images, and fonts.\nThe jsx-loader is used to transpile imported jsx files. If you prefer ES6, you can use babel-loader instead of jsx-loader.\nThe <a href=\"https://github.com/markdalgleish/static-site-generator-webpack-plugin\" target=\"_blank\">static-site-generator-webpack-plugin</a> module is what is used to generate static HTML.\nAnd <a href=\"http://rackt.github.io/react-router/\" target=\"_blank\">React Router</a> is used to handle routing. For single page static sites, React Router is not needed.</p>\n<h2>Set up Webpack</h2>\n<p>Webpack is a module bundler similar to Browserify, but can also replace front-end build systems like Grunt and Gulp.</p>\n<p>First off, you’ll need a <code>webpack.config.js</code> file. The webpack command line interface will use this config file.</p>\n<pre><code class=\"language-js\">// webpack.config.js\nvar StaticSiteGeneratorPlugin = require('static-site-generator-webpack-plugin')\nvar data = require('./data')\n\nmodule.exports = {\n  entry: './entry.js',\n\n  output: {\n    filename: 'bundle.js',\n    path: __dirname,\n    libraryTarget: 'umd'\n  },\n\n  module: {\n    loaders: [\n      { test: /\\.jsx$/, loader: 'jsx-loader' }\n    ]\n  },\n\n  plugins: [\n    new StaticSiteGeneratorPlugin('bundle.js', data.routes, data)\n  ]\n}\n</code></pre>\n<h2>Create an Entry File</h2>\n<p>The entry file is what webpack will read to build <code>bundle.js</code>,\nand the static-site-generator-webpack-plugin uses the bundle to generate HTML.</p>\n<p>For a single rendered page, you can skip React Router and create an <code>entry.js</code> file like the following.</p>\n<pre><code class=\"language-js\">// entry.js with no routing\nvar React = require('react')\nvar Root = require('./components/Root.jsx')\n\nmodule.exports = function render(locals, callback) {\n  var html = React.renderToStaticMarkup(React.createElement(Root, locals))\n  callback(null, '&#x3C;!DOCTYPE html>' + html)\n}\n</code></pre>\n<p>For handling multiple routes, update the entry file using React Router and create a <code>Routes.jsx</code> file.</p>\n<pre><code class=\"language-js\">// entry.js\nvar React = require('react')\nvar Router = require('react-router')\nvar Routes = require('./Routes.jsx')\n\nmodule.exports = function render(locals, callback) {\n  Router.run(Routes, locals.path, function (Handler) {\n    var html = React.renderToStaticMarkup(React.createElement(Handler, locals))\n    callback(null, '&#x3C;!DOCTYPE html>' + html)\n  })\n}\n</code></pre>\n<pre><code class=\"language-js\">// Routes.jsx\nvar React = require('react')\nvar Router = require('react-router')\nvar Route = Router.Route\nvar DefaultRoute = Router.DefaultRoute\nvar Root = require('./components/Root.jsx')\nvar Index = require('./components/Index.jsx')\n\nvar Routes = (\n  &#x3C;Route handler={Root} path='/'>\n    &#x3C;DefaultRoute handler={Index} />\n  &#x3C;/Route>\n)\n\nmodule.exports = Routes\n</code></pre>\n<h2>Create a Data File</h2>\n<p>Next create a <code>data.js</code> file that will include initial props passed to the Root component and routes used for the router.</p>\n<pre><code class=\"language-js\">// data.js\nmodule.exports = {\n  title: 'My Static Site',\n  routes: [\n    '/'\n  ]\n}\n</code></pre>\n<h2>Create Root.jsx</h2>\n<p>The Root component will include the <code>&#x3C;html></code> element, <code>&#x3C;head></code> and other code that will be shared across all pages.\nThe page components themselves will be passed through the <code>&#x3C;RouteHander></code> component with React Router.\nTo keep things somewhat organized, create this file in a new <code>components</code> directory.</p>\n<pre><code class=\"language-js\">// components/Root.jsx\nvar React = require('react')\nvar Router = require('react-router')\nvar RouteHandler = Router.RouteHandler\n\nvar Root = React.createClass({\n  render: function () {\n    return (\n      &#x3C;html>\n        &#x3C;head>\n          &#x3C;title>{this.props.title}&#x3C;/title>\n        &#x3C;/head>\n        &#x3C;body>\n          &#x3C;RouteHandler {...this.props} />\n        &#x3C;/body>\n      &#x3C;/html>\n    )\n  }\n})\n\nmodule.exports = Root\n</code></pre>\n<h2>Create Index.jsx</h2>\n<p>The Index component will be the page rendered with <code>&#x3C;DefaultRoute></code> and should contain the content for the root <code>index.html</code> file.</p>\n<pre><code class=\"language-js\">// components/Index.jsx\nvar React = require('react')\n\nvar Index = React.createClass({\n  render: function () {\n    return (\n      &#x3C;main>\n        Index component\n      &#x3C;/main>\n    )\n  }\n})\n\nmodule.exports = Index\n</code></pre>\n<h2>Package Scripts</h2>\n<p>Add the following scripts to <code>package.json</code> to run webpack.</p>\n<pre><code class=\"language-json\">\"scripts\": {\n  \"webpack\": \"webpack --progress --colors\",\n  \"dev\": \"webpack-dev-server --progress --colors\",\n  \"start\": \"npm run dev\"\n}\n</code></pre>\n<p>Run the start script to start a development server.</p>\n<pre><code class=\"language-bash\">npm start\n</code></pre>\n<p>Open <a href=\"http://localhost:8080\" target=\"_blank\">http://localhost:8080</a> in a browser.\nYou should see an unstyled page with the words <em>Index component</em>.</p>\n<h2>Adding Pages</h2>\n<p>Next, add a new route for an <em>about</em> page.\nIn <code>data.js</code> add <code>/about</code> to the routes array.</p>\n<pre><code class=\"language-js\">// data.js\nmodule.exports = {\n  title: 'My Static Site',\n  routes: [\n    '/',\n    '/about'\n  ]\n}\n</code></pre>\n<p>Edit the <code>Routes.jsx</code> file to handle the new route.</p>\n<pre><code class=\"language-js\">// Routes.jsx\nvar React = require('react')\nvar Router = require('react-router')\nvar Route = Router.Route\nvar DefaultRoute = Router.DefaultRoute\nvar Root = require('./components/Root.jsx')\nvar Index = require('./components/Index.jsx')\nvar About = require('./components/About.jsx')\n\nvar Routes = (\n  &#x3C;Route handler={Root} path='/'>\n    &#x3C;DefaultRoute handler={Index} />\n    &#x3C;Route path='/about' handler={About} />\n  &#x3C;/Route>\n)\n\nmodule.exports = Routes\n</code></pre>\n<p>Create a new <code>About.jsx</code> component.</p>\n<pre><code class=\"language-js\">// components/About.jsx\nvar React = require('react')\n\nvar About = React.createClass({\n  render: function () {\n    return (\n      &#x3C;main>\n        About component\n      &#x3C;/main>\n    )\n  }\n})\n\nmodule.exports = About\n</code></pre>\n<p>Stop and restart the development server and navigate to\n<a href=\"http://localhost:8080/about\" target=\"_blank\">http://localhost:8080/about</a>.\nYou should see a page similar to the index but with the words <em>About component</em>.</p>\n<p>React-router can also handle route params such as <code>posts/:id</code> for dynamic routing –\n<a href=\"http://rackt.github.io/react-router/\" target=\"_blank\">View the docs</a> to learn more.</p>\n<h2>Render to Static Markup</h2>\n<p>Stop the development server and run <code>npm run webpack</code>. This should generate two static <code>index.html</code> files in the root and <code>about</code> directories.</p>\n<h2>Adding Client-Side JS</h2>\n<p>In order to use React for client side JavaScript, you’ll need to ensure that the props match up between the static page and the bundle.js file.</p>\n<p>First, edit <code>entry.js</code> to change the render function\nfrom <code>React.renderToStaticMarkup</code> to <code>React.renderToString</code>\nand add a conditional block that will only run client-side.</p>\n<pre><code class=\"language-js\">// entry.js\nvar React = require('react')\nvar Router = require('react-router')\nvar Routes = require('./Routes.jsx')\n\nif (typeof document !== 'undefined') {\n  var initialProps = JSON.parse(document.getElementById('initial-props').innerHTML)\n  Router.run(Routes, Router.HistoryLocation, function (Handler) {\n    React.render(React.createElement(Handler, initialProps), document)\n  })\n}\n\nmodule.exports = function render(locals, callback) {\n  Router.run(Routes, locals.path, function (Handler) {\n    var html = React.renderToString(React.createElement(Handler, locals))\n    callback(null, '&#x3C;!DOCTYPE html>' + html)\n  })\n}\n</code></pre>\n<p>The <code>initialProps</code> value will come from a script tag with the id <code>initial-props</code>.\nUpdate the Root component to add this script tag, add a <code>safeStringify</code> function, and link to the <code>bundle.js</code> file.</p>\n<pre><code class=\"language-js\">// components/Root.jsx\nvar React = require('react')\nvar Router = require('react-router')\nvar RouteHandler = Router.RouteHandler\n\nvar Root = React.createClass({\n  render: function () {\n    var initialProps = {\n      __html: safeStringify(this.props)\n    }\n\n    return (\n      &#x3C;html>\n        &#x3C;head>\n          &#x3C;title>{this.props.title}&#x3C;/title>\n        &#x3C;/head>\n        &#x3C;body>\n          &#x3C;RouteHandler {...this.props} />\n          &#x3C;script\n            id='initial-props'\n            type='application/json'\n            dangerouslySetInnerHTML={initialProps} />\n          &#x3C;script src='bundle.js' />\n        &#x3C;/body>\n      &#x3C;/html>\n    )\n  }\n})\n\nfunction safeStringify(obj) {\n  return JSON.stringify(obj).replace(/&#x3C;\\/script/g, '&#x3C;\\\\/script').replace(/&#x3C;!--/g, '&#x3C;\\\\!--')\n}\n\nmodule.exports = Root\n</code></pre>\n<h2>Navigation Links</h2>\n<p>To link the pages together, create a new Header component.</p>\n<pre><code class=\"language-js\">// components/Header.jsx\nvar React = require('react')\n\nvar Header = React.createClass({\n  render: function () {\n    return (\n      &#x3C;header>\n        &#x3C;a href='/'>Index&#x3C;/a>\n        &#x3C;a href='/about'>About&#x3C;/a>\n      &#x3C;/header>\n    )\n  }\n})\n\nmodule.exports = Header\n</code></pre>\n<p>Add the Header to the Root component’s render function.</p>\n<pre><code class=\"language-js\">// components/Root.jsx\nvar React = require('react')\nvar Router = require('react-router')\nvar RouteHandler = Router.RouteHandler\nvar Header = require('./Header.jsx')\n\nvar Root = React.createClass({\n  render: function () {\n    var initialProps = {\n      __html: safeStringify(this.props)\n    }\n\n    return (\n      &#x3C;html>\n        &#x3C;head>\n          &#x3C;title>{this.props.title}&#x3C;/title>\n        &#x3C;/head>\n        &#x3C;body>\n          &#x3C;Header />\n          &#x3C;RouteHandler {...this.props} />\n          &#x3C;script\n            id='initial-props'\n            type='application/json'\n            dangerouslySetInnerHTML={initialProps} />\n          &#x3C;script src='bundle.js' />\n        &#x3C;/body>\n      &#x3C;/html>\n    )\n  }\n})\n\nfunction safeStringify(obj) {\n  return JSON.stringify(obj).replace(/&#x3C;\\/script/g, '&#x3C;\\\\/script').replace(/&#x3C;!--/g, '&#x3C;\\\\!--')\n}\n\nmodule.exports = Root\n</code></pre>\n<h2>Using Client-Side Routing</h2>\n<p>React router can also do client-side routing using the Link component.\nThis can make transitioning pages feel faster and behaves like a fake single-page application.</p>\n<p>To use client-side routing, replace the anchor links in the Header with React Routers’s Link components.</p>\n<pre><code class=\"language-js\">// components/Header.jsx\nvar React = require('react')\nvar Router = require('react-router')\nvar Link = Router.Link\n\nvar Header = React.createClass({\n  render: function () {\n    return (\n      &#x3C;header>\n        &#x3C;Link to='/'>Index&#x3C;/Link>\n        &#x3C;Link to='/about'>About&#x3C;/Link>\n      &#x3C;/header>\n    )\n  }\n})\n\nmodule.exports = Header\n</code></pre>\n<h2>Adding Critical CSS</h2>\n<p>Although there are many different approaches to styling components in React,\nadding some critical CSS base styles to the head can help speed up performance and development time.\nYou can skip this step if you prefer using inline styles or linking to a larger stylesheet.</p>\n<p><em>UPDATE: Originally, this tutorial showed how to include CSS using props.\nUsing a combination of css-loader and cssnext-loader seems to be a better solution\nas it doesn't require restarting the server when making changes to the stylesheet\nand doesn't duplicate the CSS in the <code>initialProps</code> JSON object.</em></p>\n<p>First install <a href=\"http://basscss.com\" target=\"_blank\">Basscss</a>,\n<a href=\"https://github.com/webpack/css-loader\" target=\"_blank\">css-loader</a>,\nand <a href=\"https://github.com/cssnext/cssnext-loader\" target=\"_blank\">cssnext-loader</a>.</p>\n<pre><code class=\"language-bash\">npm i --save-dev basscss css-loader cssnext-loader\n</code></pre>\n<p>Add css-loader and cssnext-loader to the webpack config as well as options for cssnext.</p>\n<pre><code class=\"language-js\">// webpack.config.js\nvar StaticSiteGeneratorPlugin = require('static-site-generator-webpack-plugin')\nvar data = require('./data')\n\nmodule.exports = {\n  entry: './entry.js',\n\n  output: {\n    filename: 'bundle.js',\n    path: __dirname,\n    libraryTarget: 'umd'\n  },\n\n  module: {\n    loaders: [\n      { test: /\\.jsx$/, loader: 'jsx-loader' },\n      { test: /\\.css/, loader: 'css-loader!cssnext-loader' }\n    ]\n  },\n\n  plugins: [\n    new StaticSiteGeneratorPlugin('bundle.js', data.routes, data)\n  ],\n\n  cssnext: {\n    compress: true,\n    features: {\n      rem: false,\n      pseudoElements: false,\n      colorRgba: false\n    }\n  }\n\n}\n</code></pre>\n<p>In the cssnext configuration options, the output is compressed and the rem and colorRgba postcss plugins have been disabled.</p>\n<p>Create a new <code>css</code> directory and a <code>base.css</code> file.\nImport Basscss and set a new value for the <code>--font-family</code> custom property.</p>\n<pre><code class=\"language-css\">/* css/base.css */\n@import 'basscss';\n\n:root {\n  --font-family: 'Avenir Next', 'Hevletica Neue', sans-serif;\n}\n</code></pre>\n<p>In the Root component, import the stylesheet, add a style tag to the head, and add some padding to the body.</p>\n<pre><code class=\"language-js\">// components/Root.jsx\nvar React = require('react')\nvar Router = require('react-router')\nvar RouteHandler = Router.RouteHandler\nvar Header = require('./Header.jsx')\nvar css = require('../css/base.css')\n\nvar Root = React.createClass({\n  render: function () {\n    var initialProps = {\n      __html: safeStringify(this.props)\n    }\n\n    return (\n      &#x3C;html>\n        &#x3C;head>\n          &#x3C;title>{this.props.title}&#x3C;/title>\n          &#x3C;style dangerouslySetInnerHTML={{ __html: css }} />\n        &#x3C;/head>\n        &#x3C;body className='p2'>\n          &#x3C;Header />\n          &#x3C;RouteHandler {...this.props} />\n          &#x3C;script\n            id='initial-props'\n            type='application/json'\n            dangerouslySetInnerHTML={initialProps} />\n          &#x3C;script src='bundle.js' />\n        &#x3C;/body>\n      &#x3C;/html>\n    )\n  }\n})\n\nfunction safeStringify(obj) {\n  return JSON.stringify(obj).replace(/&#x3C;\\/script/g, '&#x3C;\\\\/script').replace(/&#x3C;!--/g, '&#x3C;\\\\!--')\n}\n\nmodule.exports = Root\n</code></pre>\n<p>Restart the dev server to see the changes.</p>\n<p>You should now have a basic static site rendered with React.\nFor a complete example, see the\n<a href=\"https://github.com/jxnblk/react-static-site-boilerplate\" target=\"_blank\">Boilerplate Demo</a>\nor check out the\n<a href=\"https://github.com/jxnblk/blog\" target=\"_blank\">source for this blog</a> or\n<a href=\"https://github.com/basscss/basscss.github.io\" target=\"_blank\">the Basscss docs</a>,\nwhich use a very similar approach.</p>\n<p><em>Update</em> Matthew Jones has forked and created an\n<a href=\"https://github.com/ookk/react-static-boilerplate-ES6\" target=\"_blank\">ES6 boilerplate</a>\nif you'd like to learn more.</p>\n<h2>Other Considerations and Improvements</h2>\n<p>Since this uses webpack, there are also ways to include image assets and fonts in the bundle, but I haven’t tried this so your mileage may vary.</p>\n<p>The <code>routes</code> array is passed in as props, and navigation links could be created dynamically rather than being hard coded.\nThis could make handling lots of pages easier.</p>\n<p>If you’re hosting the static site on gh-pages, you’ll need a way to handle the base url when using React Router’s Link component.\nI don’t know of a good way to do this yet and would love to hear suggestions on how to improve that.</p>\n<p>~~Handling the CSS as shown above can lead to a fairly large chunk of JSON being inserted into the initial-props script tag,\nand I’m not sure if there’s a better way to handle that.~~</p>\n<p>This is just one way to build static sites with React.\nIf you’ve seen other ways or have any suggestions for improving on this, I’d love to hear them.</p>\n","tags":["react","webpack","static-site","tutorial"]},{"path":"blog/rethinking-variables-in-css","slug":"rethinking-variables-in-css","title":"Rethinking Variables in CSS","description":null,"date":"2015-05-08T00:00:00.000Z","excerpt":"<p>CSS was first introduced as a way to reduce the complexity of using inline styles and to help separate concerns. After years of ballooning stylesheets with the same values being used over and over and losing sync, CSS preprocessors introduced variables to help keep values defined in a single place. Soon <a href=\"http://dev.w3.org/csswg/css-variables/\">custom properties</a> will be part of the CSS specification, which promises a native, more robust approach than what preprocessors can do.</p>\n<p>While variables and custom properties make updating multiple instances of the same value trivial, we often still end up with multiple instances of the same property-value definitions spread throughout a global stylesheet.</p>\n","html":"<p>CSS was first introduced as a way to reduce the complexity of using inline styles and to help separate concerns. After years of ballooning stylesheets with the same values being used over and over and losing sync, CSS preprocessors introduced variables to help keep values defined in a single place. Soon <a href=\"http://dev.w3.org/csswg/css-variables/\">custom properties</a> will be part of the CSS specification, which promises a native, more robust approach than what preprocessors can do.</p>\n<p>While variables and custom properties make updating multiple instances of the same value trivial, we often still end up with multiple instances of the same property-value definitions spread throughout a global stylesheet.</p>\n<!-- more -->\n<p><em>Bear with me for a second and consider this a thought experiment…</em></p>\n<p>What if instead of repeating these definitions in our stylesheets, we treated CSS rulesets as variables? That is, instead of defining something like a color across many styles, it’s only defined once, and is used by applying classes to HTML elements —i.e. .green instead of $green. We could vastly DRY up our stylesheets while making only a minimal impact on HTML size. If you apply this idea widely enough, the entire stylesheet can become so-called critical CSS.</p>\n<p>Effectively, this means removing complexity from stylesheets, which are global and leaky, and moving that complexity to the templating system, which is much more isolated and easier to manage.</p>\n<p>I know that this approach has sped up the development process in my professional work and for small open source projects, and I’ve never seen any evidence that this would break down when working at scale. Though I suspect that very few have ever really attempted this, and it hasn’t been long enough to know what sort of problems this might cause over the long term.</p>\n<h2>Is this semantic?</h2>\n<p>Yes, read this article from Nicolas Gallagher — it is the best answer to this question on the Internet: <a href=\"http://nicolasgallagher.com/about-html-semantics-front-end-architecture/\">About HTML Semantics and Front-End Architecture</a>. Classes do not affect HTML semantics, and you absolutely should use well structured, accessible, semantic HTML. Period.</p>\n<h2>What about mixing concerns?</h2>\n<p>Web components and things like React already do this and for good reason. The CSS Zen Garden is a pipe dream. If you could actually redesign something by only editing the stylesheet, we would all be using the same template and no one would be writing any new HTML.</p>\n<h2>Won’t this lead to a lot of classes in HTML?</h2>\n<p>If you’re concerned about this, I’m concerned about how much repetition you have in your templates. Most web projects will be utilizing some sort of templating system. Just as with any code, templates should be kept DRY. If the markup for something like a modal overlay is defined multiple times across templates, it should be consolidated to a single place. Living style guides and using a component-based system like React can help enforce this approach across a team.</p>\n<h2>Wouldn’t there be a huge maintenance cost?</h2>\n<p>Potentially. Though, I’ve only seen a handful of similar techniques at scale, and I suspect that, if it were implemented in a sensible way, it would be far better than the technical debt we incur with current CSS practices.</p>\n<h2>What about web components?</h2>\n<p>Web components add a whole new dimension to this dynamic by introducing style encapsulation and composability — essentially reducing utility styles to an implementation detail. I’ll try to address what that could look like in a follow-up post.</p>\n<p><em>To be continued…</em></p>\n","tags":["css","variables","preprocessors","postprocessors","postcss"]},{"path":"blog/5-ways-to-not-shoot-yourself-in-the-foot-with-css","slug":"5-ways-to-not-shoot-yourself-in-the-foot-with-css","title":"5 ways to not shoot yourself in the foot with CSS","description":null,"date":"2014-12-30T00:00:00.000Z","excerpt":"<ol>\n<li>Don’t make assumptions</li>\n<li>Don’t be specific</li>\n<li>Don’t override anything</li>\n<li>Don’t entangle it with markup</li>\n<li>Don’t repeat yourself</li>\n</ol>\n","html":"<ol>\n<li>Don’t make assumptions</li>\n<li>Don’t be specific</li>\n<li>Don’t override anything</li>\n<li>Don’t entangle it with markup</li>\n<li>Don’t repeat yourself</li>\n</ol>\n"},{"path":"blog/its-okay-to-look-the-same","slug":"its-okay-to-look-the-same","title":"It’s Okay to Look the Same","description":null,"date":"2014-04-25T00:00:00.000Z","excerpt":"<p>Every once in a while I hear someone complain about the visual homogenization of the web, and front-end frameworks often get the brunt of the attack. This visual sameness isn’t necessarily a bad thing.</p>\n","html":"<p>Every once in a while I hear someone complain about the visual homogenization of the web, and front-end frameworks often get the brunt of the attack. This visual sameness isn’t necessarily a bad thing.</p>\n<!-- more -->\n<h2>Visual design is easy</h2>\n<p>Visual design is one of the easiest parts of web design to get right. Beautiful looking sites are often perceived as being easier to use, but that’s a low hurdle to clear. Using clean typography, a good color palette, solid visual hierarchy, and consistency will get you most of the way there.</p>\n<h2>It’s also hard</h2>\n<p>The hardest part of visual design is stakeholder buy-in. It’s easily the most noticeable part of a design, and it’s one that people will certainly have opinions about — whether or not they understand typography, gestalt, or color psychology. If you’re the one calling the shots, then you’ve got it easy.</p>\n<blockquote>\n<p>Visual design is a bike shed. User experience is a nuclear reactor.</p>\n</blockquote>\n<h2>It’s called Bootstrap for a reason</h2>\n<p>When building something new, frameworks can help settle arguments over visual details. And, if you don’t have a background in design, using a framework can help you achieve a certain baseline of visual polish. Frameworks get you started and create well-defined systems to customize and build upon while you validate your ideas.</p>\n<h2>Don’t not do it</h2>\n<p>The visual aspects of web design are extremely important. If you’ve got the time and resources, by all means, sweat the details. But before you do, make sure your site works. Time spent deliberating visual design could be better spent conducting research with your users. A beautiful site that doesn’t align with mental models isn’t worth much to your business.</p>\n"},{"path":"blog/i-dont-know-how-to-design","slug":"i-dont-know-how-to-design","title":"I don’t know how to design","description":null,"date":"2014-04-16T00:00:00.000Z","excerpt":"<p>I’ll admit it.</p>\n","html":"<p>I’ll admit it.</p>\n<!-- more -->\n<h2>I don’t know how to design without research.</h2>\n<p>Without upfront research, you’re not designing things, you’re just building things that might or might not meet your users’ needs or fit their mental models. Chances are, they won’t. User acceptance testing and A/B testing are important, but won’t give you the insights you’ll need to start off on the right foot.</p>\n<h2>I don’t know how to design without metrics.</h2>\n<p>Whether it’s business goals, KPIs, or conversion rates, without metrics you’ll have no idea what problems you’re solving or if the solutions you’re building will fit the bill.</p>\n<h2>I don’t know how to design without iterating.</h2>\n<p>Your first attempt at anything will not be your best. Put something out there and continually work on making it better and better.</p>\n<h2>I don’t know how to design without context.</h2>\n<p>Good design simplifies complexity to align with users’ mental models. Without understanding context and creating systems to design within, you’re just adding noise that contributes to cognitive overload for both users and the people building the product.</p>\n<h2>I don’t know how to design without collaboration.</h2>\n<p>Design doesn’t happen in a vacuum. Whether it’s through participatory design with users, sketching sessions with other designers, developers, product managers, and stakeholders, or just an old fashioned critique, the best design work comes from working with others.</p>\n"},{"path":"blog/designing-in-the-browser-faster","slug":"designing-in-the-browser-faster","title":"Designing in the Browser Faster","description":null,"date":"2014-04-14T00:00:00.000Z","excerpt":"<p>I’ve been dabbling with HTML and CSS for years—building small websites for myself and friends and building prototypes to test designs. And, while I’ve been fascinated with the idea of designing in the browser for a long time, it wasn’t until recently that it’s become much, much faster for me than using traditional design software.</p>\n","html":"<p>I’ve been dabbling with HTML and CSS for years—building small websites for myself and friends and building prototypes to test designs. And, while I’ve been fascinated with the idea of designing in the browser for a long time, it wasn’t until recently that it’s become much, much faster for me than using traditional design software.</p>\n<!-- more -->\n<h2>Getting faster</h2>\n<p>Practice has certainly helped, but what really sped up my ability to design and iterate in code was an approach called Object Oriented CSS, or OOCSS. My friend and colleague sent me down this scary-sounding path over a year ago, and I haven’t looked back since. He gave me a ton of reading material, coached me with code reviews, and constantly challenged me. Most of the articles on OOCSS focus on front-end performance, code maintenance benefits, and things like naming conventions. What most people don’t tell you is how much faster it can make designing in code.</p>\n<h2>Do one thing well</h2>\n<p>At its core, OOCSS focuses on highly reusable styles that follow the open/closed principle—that is, they’re open for extension, but closed for modification. They do one thing and do it well. You can think of them as something like layer effects or color swatches. When I’m fleshing out a design, I spend a lot of time adjusting spacing, font sizes, colors, and other small details. I often don’t know what combination of styles each element should have before I see it in context.</p>\n<h2>Don’t make assumptions</h2>\n<p>For new web projects, I usually start with a base type scale, spacing scale, and a rough color palette. Having these separated into single-purpose utilities gives me the flexibility to jump straight into HTML and experiment, without having to constantly write and rewrite CSS. I try not to make assumptions about what any one element or module will end up looking like. Instead, I make sure each element feels right in context, then create more defined patterns when needed.</p>\n<h2>Content-centric design</h2>\n<p>Using single-purpose styles aligns well with the concept of content-centric design. Defining heading styles without knowing what they say or where they’re located can be difficult. Having the ability to quickly adjust type hierarchy, color, and other styles to get the rhythm, balance, and gestalt right is key to successfully designing in the browser.</p>\n<h2>From paper to prototype</h2>\n<p>Using this approach, I typically go directly from notes and paper sketches to building prototypes in code. The only time I open graphic applications like Illustrator or Photoshop are when I need to create image assets to use in code. And with tools like Github, I can try out a number of iterations on different branches in a non-destructive way.</p>\n<h2>Choose the right tools</h2>\n<p>Personally, this has sped up my workflow tremendously, and every designer I’ve introduced to this approach has picked it up quickly and enthusiastically. You might find OOCSS to be a useful addition to your design toolkit as well.</p>\n"},{"path":"blog/an-update-on-the-hamburger-menu","slug":"an-update-on-the-hamburger-menu","title":"An Update on the Hamburger Menu","description":null,"date":"2014-04-12T00:00:00.000Z","excerpt":"<p>About a year ago, I wrote <a href=\"http://jxnblk.tumblr.com/post/36218805036/hamburgers-basements-why-not-to-use-left-nav-flyouts\">Hamburgers &#x26; Basements: Why Not to Use Left Nav Flyouts</a>.</p>\n<p>Since then, a few things have happened.</p>\n","html":"<p>About a year ago, I wrote <a href=\"http://jxnblk.tumblr.com/post/36218805036/hamburgers-basements-why-not-to-use-left-nav-flyouts\">Hamburgers &#x26; Basements: Why Not to Use Left Nav Flyouts</a>.</p>\n<p>Since then, a few things have happened.</p>\n<!-- more -->\n<ol>\n<li>Facebook has discontinued using the hamburger menu in their iOS app.</li>\n<li>A few desktop websites have replaced their persistent navigation with the hamburger menu – who knows if they're actually testing it or how they're interpreting the results.</li>\n<li>Time Magazine decided to use it:</li>\n</ol>\n<blockquote>\n<p>\"No one understands the icon, let's add the word menu. The word is too small, let's add a pop-up calling it out.\" <a href=\"http://t.co/Jargi7gavX\">pic.twitter.com/Jargi7gavX</a></p>\n<p>— Luke Wroblewski (@lukew) <a href=\"https://twitter.com/lukew/statuses/443425041795928064\">March 11, 2014</a></p>\n</blockquote>\n<ol start=\"4\">\n<li>Personally, I think user testing the hamburger menu is good enough, but these guys A/B tested it: <a href=\"http://thenextweb.com/dd/2014/04/08/ux-designers-side-drawer-navigation-costing-half-user-engagement/\">UX designers: Side drawer navigation could be costing you half your user engagement</a></li>\n<li>This guy tested it twice: <a href=\"http://exisweb.net/mobile-menu-abtest\">Mobile Menu AB Tested: Hamburger Not the Best Choice?</a> and <a href=\"http://exisweb.net/menu-eats-hamburger\">Hamburger vs Menu: The Final AB Test</a></li>\n<li>This guy also wrote about it: <a href=\"http://mor10.com/hamburger-bad/\">The Hamburger is Bad for You</a></li>\n</ol>\n<p>Despite all of this, I still haven't seen any evidence suggesting that the hamburger menu is an improvement.</p>\n<h2>Patterns</h2>\n<p>Basically it comes down to interface design patterns. Patterns rely on familiarity and emerge slowly over time. Most of the ones we use on the web today have been around for many years.</p>\n<p>Users have plenty of new things to learn without adding contrived navigation patterns into the mix. Let's stop trying to innovate device-specific interactions and leave it to the device manufacturers.</p>\n<h2>Let's focus on the real problems</h2>\n<p>Product design requires solving many more difficult problems.\nFor example:</p>\n<ul>\n<li>How does your product align with a user's mental model?</li>\n<li>How do you scale your information architecture?</li>\n<li>How do you make your product meaningful to your users?</li>\n<li>How do you reach a wider audience with your product?</li>\n</ul>\n<p>Personally, I'd much rather be designing and testing solutions for problems like these.</p>\n"},{"path":"blog/im-sick-of-your-tiny-tiny-type","slug":"im-sick-of-your-tiny-tiny-type","title":"I’m Sick of Your Tiny, Tiny Type","description":null,"date":"2013-01-29T00:00:00.000Z","excerpt":"<p>Your tiny type is hard to read – no, not hard to read, impossible to read. I carry my phone with me everywhere, but I always seem to forget my magnifying glass. I tap the Safari Reader button, but that’s not a solution to the problem. That’s a band-aid for your bad typesetting.</p>\n","html":"<p>Your tiny type is hard to read – no, not hard to read, impossible to read. I carry my phone with me everywhere, but I always seem to forget my magnifying glass. I tap the Safari Reader button, but that’s not a solution to the problem. That’s a band-aid for your bad typesetting.</p>\n<!-- more -->\n<p>Sometimes I’m on my computer, and Reader doesn’t work on your web app. I hit CMD + two or three times so that my dyslexic brain can make sense of the musty 14px Helvetica your servers regurgitated all over my screen. Then the layout falls apart. Words start smashing together. Ads bleed into my emails. And I find myself scrolling up, down, left, right, left, right – what in the hell is this? The Konami code? I don’t need 30 extra lives. I want to read your content.</p>\n<p>And I know I’m not the only one who hates your tiny type. How many times have I heard users complain about fonts being too small? More times than I’ve heard them complain about fonts being too large – wait, I’ve never heard a user complain about that. Your users aren’t asking for a faster horse – they’re struggling to read your content. Surely that isn’t what you’re going for, and surely that isn’t a good experience.</p>\n<h3>Further reading:</h3>\n<p><a href=\"http://wm4.wilsonminer.com/posts/2008/oct/20/relative-readability/\">Relative Readability</a></p>\n<p><a href=\"http://informationarchitects.net/blog/100e2r/\">The 100% Easy-2-Read Standard</a></p>\n<p><a href=\"http://37signals.com/svn/posts/3285-the-typography-and-layout-behind-the-new-signal-vs-noise-redesign\">The Typography and Layout behind the new Signal vs. Noise redesign</a></p>\n"},{"path":"blog/organizing-mobile-navigation-based-on-information-seeking-behavior","slug":"organizing-mobile-navigation-based-on-information-seeking-behavior","title":"Organizing Mobile Navigation Based on Information-Seeking Behavior","description":null,"date":"2013-01-16T00:00:00.000Z","excerpt":"<p>When opening an application, a user should be able to understand its functionality, see relevant content, and get to where they want to go. Applications that obscure navigation with the intent of focusing on content can make finding specific information difficult. On the other hand, skewing towards too much navigation can overwhelm the user. Mobile apps should balance navigation for users with different information needs.</p>\n","html":"<p>When opening an application, a user should be able to understand its functionality, see relevant content, and get to where they want to go. Applications that obscure navigation with the intent of focusing on content can make finding specific information difficult. On the other hand, skewing towards too much navigation can overwhelm the user. Mobile apps should balance navigation for users with different information needs.</p>\n<!-- more -->\n<p>An application's IA should be based on solid user research and mental models, but navigation should take the user context and design constraints of the platform into consideration. With desktop apps, the ample screen real estate allows for high information density and complex top-level navigation. Mobile apps require different approaches to map navigation to the product's IA. One approach is to organize navigation based on three common <a href=\"http://boxesandarrows.com/four-modes-of-seeking-information-and-how-to-design-for-them/\">information seeking behaviors</a>: <em>known-item seeking</em>, <em>exploratory seeking</em>, and <em>discovery</em>.</p>\n<h2>What is Known-item Seeking?</h2>\n<p>Known-item seeking is exactly what it sounds like: a user knows what they're looking for and seeks it out. For example, a person going to the market to pick up eggs is engaged in known-item seeking. Search can be a great way to accommodate this behavior. But with mobile apps, avoiding touchscreen keyboards is generally good practice since there's more room for error. Recognition is easier than recollection, and scanning a list of well-labeled categories can be a much quicker way to find information. Just be sure the labels make sense to users and are backed by research, using methods such as <a href=\"http://www.measuringusability.com/blog/cardsort-tree-test.php\">card sorting and tree testing</a>.</p>\n<h2>Exploratory Seeking</h2>\n<p>Exploratory seeking is when the user has a vague idea of what they're looking for but may not know the proper words to describe it. An example of this behavior is when a person goes to the market looking for ingredients for an omelet, but isn't sure which vegetables are in season. Lists of well-labeled categories can accommodate this behavior as well.</p>\n<h2>Discovery</h2>\n<p>Discovery is when the user isn't looking for anything in particular – for instance, when a hungry person goes to the market with no idea what they'd like to eat. Discovery in mobile apps is often supported by displaying relevant content – as opposed to navigation – and is usually organized by time or social cues, such as popularity.</p>\n<h2>Examples</h2>\n<p><img src=\"//jxnblk.s3.amazonaws.com/assets/images/fab-search.png\" alt=\"Fab.com App\"></p>\n<p>While the navigation in Fab.com's mobile app is poorly organized and not very obvious, the app still supports known-item and exploratory seeking. Its Search view has both a text field for traditional search, and a table view navigation of categories, colors, and prices. </p>\n<p><img src=\"//jxnblk.s3.amazonaws.com/assets/images/apple-store-categories.png\" alt=\"Apple Store App\"></p>\n<p>The Apple Store app's navigation includes a Featured tab, which encourages discovery, and a Products tab for seeking. A table view of well-labeled product categories provides quick known-item seeking, and both tabs include a search field at the top.</p>\n<p><img src=\"//jxnblk.s3.amazonaws.com/assets/images/etsy-search.png\" alt=\"Etsy App\"></p>\n<p>Similarly, the Etsy app supports discovery with its Explore tab and facilitates known-item and exploratory seeking with the categories listed in the Search tab. Like the desktop website, the mobile app's navigation provides obvious paths to specific items within their large inventory, but is significantly simpler at the top-level.</p>\n<h2>Rethinking Mobile Navigation</h2>\n<p>Designing mobile navigation requires different approaches than desktop apps. Don't try to cram a desktop-based navigation into a mobile app, and don't neglect navigation in the pursuit of making an app content-centric. Take a step back, look at your product's IA, and consider other organizing principles for designing mobile navigation.</p>\n"},{"path":"blog/buckets-and-jumpoffs-using-content-centric-contextual-navigation","slug":"buckets-and-jumpoffs-using-content-centric-contextual-navigation","title":"Buckets and Jumpoffs: Using Content-Centric Contextual Navigation","description":null,"date":"2012-12-07T00:00:00.000Z","excerpt":"<p>While table views provide a clear and simple way to navigate certain types of content, mobile should be about putting content and user goals first and navigation second. Don't overload the user with navigation choices, show meaningful content instead. Even though tab bars are great – sitting below the content, out of the way until the user needs them – there are new opportunities to explore content-centric contextual navigation when designing for mobile.</p>\n","html":"<p>While table views provide a clear and simple way to navigate certain types of content, mobile should be about putting content and user goals first and navigation second. Don't overload the user with navigation choices, show meaningful content instead. Even though tab bars are great – sitting below the content, out of the way until the user needs them – there are new opportunities to explore content-centric contextual navigation when designing for mobile.</p>\n<!-- more -->\n<h2>Create Better Table Views with Teasers</h2>\n<p><img src=\"//jxnblk.s3.amazonaws.com/assets/images/Buckets-Mail-Messages.png\" alt=\"Mail &#x26; Messages\"></p>\n<p>A quick and dirty way to give table views more meaning is by using teasers. Apple's Mail App shows a numerical indicator of  unread emails at the top level, then shows truncated previews of actual messages at the inbox level. Similarly, Messages shows previews of the last message sent before the user drills into the conversation.</p>\n<h2>Flipping the Teaser Approach on Its Head</h2>\n<p>While teasers can make basic table views more meaningful, they prioritize navigation over content. Taking the teaser approach and flipping it on its head can result in a content-centric design that provides meaningful contextual navigation to the user. Many apps and e-commerce sites already do this, and it can help create focus on content discovery rather than search.</p>\n<h2>What are Buckets &#x26; Jumpoffs?</h2>\n<p>You've probably seen this pattern before: take a collection of items, group them into categories, present a limited number of those items in buckets or lists, and provide a link to jump off and view more. There doesn't seem to be a great name for this pattern, some have suggested calling it the <em>egg carton</em> or the <em>showcase</em>, but neither of those terms seem to capture the essence of the jumpoff link's contextual navigation – thus, <em>buckets &#x26; jumpoffs</em>.</p>\n<p><img src=\"//jxnblk.s3.amazonaws.com/assets/images/Buckets-Twitter.png\" alt=\"Twitter\"></p>\n<p>Twitter uses this approach in its profile view, along with a mix of standard table views. Instead of seeing all of the user's tweets in the profile view, there is a small bucket showing the latest three tweets and a link to view more.</p>\n<p><img src=\"//jxnblk.s3.amazonaws.com/assets/images/Buckets-Rdio.png\" alt=\"Rdio\"></p>\n<p>Rdio does this to great effect in its search results view, showing results bucketed by artists, albums, songs, playlists, and people. This view provides direct links to the top results and a link to view more results in each bucket as well.</p>\n<p><img src=\"//jxnblk.s3.amazonaws.com/assets/images/Buckets-AppStore-iTunes.png\" alt=\"App Store &#x26; iTunes\"></p>\n<p>Using a mixture of swipeable carousel buckets and tiles, Apple creates a lot of visual interest in its App Store and iTunes apps. These <em>Featured</em> views are frequently updated and serve as a great way to promote content discovery in an otherwise extremely complex IA. Apple also uses buckets on its desktop version of iTunes, showing that this pattern can be effectively scaled up to larger displays.</p>\n<p><img src=\"//jxnblk.s3.amazonaws.com/assets/images/Buckets-Foursquare.png\" alt=\"Foursquare\"></p>\n<p>Similarly, Foursquare places contextual navigation – which is often delegated to detail views – in-line with its content-rich list view. Unfortunately, Foursquare's desktop site lacks the same level of content discovery afforded in its mobile app and, instead, relies heavily on traditional search.</p>\n<h2>Focus on Content but Don't Neglect Navigation</h2>\n<p>Mobile is a new medium, and its constraints and advantages should be taken into account when designing navigation systems. The limited screen real estate makes traditional faceted filtering and search patterns more difficult. Instead of replicating desktop navigation-heavy approaches, try content-centric contextual navigation. To create a cohesive cross-platform experience, you can translate mobile navigation patterns to desktop. This often leads to simple, focused interfaces that will delight your users.</p>\n<p>When designing for mobile, focus on content, but don't neglect navigation in the process.</p>\n"},{"path":"blog/the-advantages-of-table-views-over-left-nav-flyouts","slug":"the-advantages-of-table-views-over-left-nav-flyouts","title":"The Advantages of Table Views Over Left Nav Flyouts","description":"At first glance, these two navigation patterns seem very similar, but there are a few points that give table views a huge leg up. When dealing with a multi-tiered hierarchy or a variable amount of navigation items – such as text messages, emails, folksonomic categories, folders, files, etc. – table views can be a great solution. Lists are generally easier to scan than tiles, and vertical scrolling is an easy interaction for touchscreen mobile devices.","date":"2012-12-01T00:00:00.000Z","excerpt":"At first glance, these two navigation patterns seem very similar, but there are a few points that give table views a huge leg up. When dealing with a multi-tiered hierarchy or a variable amount of navigation items – such as text messages, emails, folksonomic categories, folders, files, etc. – table views can be a great solution. Lists are generally easier to scan than tiles, and vertical scrolling is an easy interaction for touchscreen mobile devices.","html":"<p><img src=\"//jxnblk.s3.amazonaws.com/assets/images/TableViewsAndBasementsIllustration.png\" alt=\"image\"></p>\n<p>At first glance, these two navigation patterns seem very similar, but there are a few points that give table views<a href=\"\">*</a> a huge leg up. When dealing with a multi-tiered hierarchy or a variable amount of navigation items – such as text messages, emails, folksonomic categories, folders, files, etc. – table views can be a great solution. Lists are generally easier to scan than tiles, and vertical scrolling is an easy interaction for touchscreen mobile devices.</p>\n<h2>Some advantages of table views:</h2>\n<p><img src=\"//jxnblk.s3.amazonaws.com/assets/images/SettingsApp.png\" alt=\"image\"></p>\n<ul>\n<li>Users are likely familiar with this pattern, since it's widely used across iOS.</li>\n<li>With table views, the user sees the top level, bird's-eye view of the hierarchy without requiring any interaction.</li>\n<li>As the user drills farther down the hierarchy, the navigation bar continues to look and work the same way, creating continuity in the UI.</li>\n<li>The navigation bar, along with <a href=\"http://mrgan.tumblr.com/post/10492926111/labeling-the-back-button\">properly labeled back buttons</a>, works as a myopic breadcrumb, showing the user's current location and giving context to what the next level up in the hierarchy is. A hamburger button gives no context.</li>\n</ul>\n<p><img src=\"//jxnblk.s3.amazonaws.com/assets/images/TwitterProfile.png\" alt=\"image\"></p>\n<ul>\n<li>This pattern can work seamlessly with contextual navigation. Twitter's profile view is a perfect example of this.</li>\n<li>Table views can be effectively combined with tab bars, bringing the advantages of persistent navigation to a complex IA.</li>\n<li>The back button is in a hard-to-reach location, but when combined with a tab bar, the tab bar button can act as an easy-to-reach shortcut to the top-level.</li>\n</ul>\n<h2>What can be learned from left nav flyouts</h2>\n<p>One advantage that the left nav flyout pattern generally has over table views is the swipe-to-reveal gesture shortcut. For table views, this gesture could be used as a shortcut for the back button – much like Loren Brichter's original Twitter for iPad – and navigation is probably a more common action than deleting items with the swipe-to-delete gesture.</p>\n<p><img src=\"//jxnblk.s3.amazonaws.com/assets/images/AppleStoreApp.png\" alt=\"image\"></p>\n<p>Some may argue that the modal nature of left nav flyouts is well-suited for use as filtering controls for large collections. But, to use the Apple Store app as an example again, table views can be a very efficient way to filter through large collections of information.</p>\n<h2>Forget the flyout – use table views</h2>\n<p>If your product has a complex IA that can't neatly fit into a tab bar, consider the advantages that table views can provide before jumping on the left nav flyout bandwagon.</p>\n<p><em>*Note: For lack of a better term, table views refers to the one-window drilldown pattern that combines lists and navigation bars and is widely used in iOS.</em></p>\n"},{"path":"blog/hamburgers-and-basements-why-not-to-use-left-nav-flyouts","slug":"hamburgers-and-basements-why-not-to-use-left-nav-flyouts","title":"Hamburgers & Basements: Why Not to Use Left Nav Flyouts","description":null,"date":"2012-11-21T00:00:00.000Z","excerpt":"<blockquote>\n<p><strong><em>\"Good design makes a product understandable\"</em></strong> – Dieter Rams</p>\n</blockquote>\n<p>Good navigation should do at least three things well: (1) it should allow the user to navigate; (2) it should serve as wayfinding, letting the user know where they are; and (3) it should help the user understand what the product is capable of. If your navigation is not doing these three things, something's wrong.</p>\n","html":"<blockquote>\n<p><strong><em>\"Good design makes a product understandable\"</em></strong> – Dieter Rams</p>\n</blockquote>\n<p>Good navigation should do at least three things well: (1) it should allow the user to navigate; (2) it should serve as wayfinding, letting the user know where they are; and (3) it should help the user understand what the product is capable of. If your navigation is not doing these three things, something's wrong.</p>\n<!-- more -->\n<p>For the iPhone, Apple conjured up three fairly solid navigation patterns: the tab bar, the table view (e.g. Messages &#x26; Mail), and the card stack (e.g. Weather). All three work fairly well if used as intended, but there's always room for experimentation and evolution in UI design – and always room for designers and developers to screw it up.</p>\n<p>Path and Facebook's mobile left nav flyout pattern is one such experimentation that should be avoided. <a href=\"https://twitter.com/markkawano/status/256848377260679168\">Mark Kawano</a> calls it the \"hamburger icon that slides open the basement.\" Why call it the basement? Because it's hidden, dark, there's a ton of crap in it, and, frankly, it's scary and no one wants to go down there. Hiding the navigation allows Path to present itself in a more immersive, content-centric way but also tells the user that there's nothing much else to the app beyond its stream view.</p>\n<p>In Facebook's case, the basement just obscures a lot of the functionality available on the desktop version. The News Feed is important &#x26; Facebook provides a lot of contextual navigation, but Facebook's got a lot of other hidden cracks and crevices that aren't readily apparent from its iPhone app. But who knows? Maybe Facebook doesn't care about Messages, Places, or Events.</p>\n<p>Another, more obvious downside to the left nav flyout is its inefficiency: tap a <a href=\"http://www.lukew.com/ff/entry.asp?1649\">hard-to-reach button</a>, wait for an animation, scroll a list while scanning for the item you want, tap again, and wait for another animation. Your user doesn't have time for that – don't subject them to such nonsense.</p>\n<p>Having a lot of functionality and complexity in your product is no excuse. If your navigation has more than five items at the top-level, that's just lazy information architecture. Too many choices is bad anywhere, especially on a 4-inch display.</p>\n<p><img src=\"//jxnblk.s3.amazonaws.com/assets/images/HamburgersAndBasements-TabBars.png\" alt=\"image\"></p>\n<p>Contrast this with Twitter's iPhone app. Holding the app in hand, the user knows exactly what it is. It's small enough to wrap their brain around, and it feels easy to use. The persistent tab bar quickly describes what the user can do, where they can go, and what type of content they'll see. It also – like any persistent navigation pattern – provides context about where the user has navigated and provides an easy one-tap path to the main parts of the app.</p>\n<p>Foursquare is another example of great mobile navigation, no doubt benefiting from its mobile-first approach. Foursquare is a much more complex product now than when it first launched, but they've maintained a simple IA that organizes functionality and content in a way that makes this complexity manageable for the user.</p>\n<p>Instagram, arguably, could have employed a left nav flyout for a more immersive feel, but instead employs a tab bar that emphasizes content consumption, exploration, content-creation, notifications, and user profiles. This not only makes navigating the app quicker, it also tells the user what they should do with the app.</p>\n<p>Or take the Apple Store app as an example. The desktop counterpart has a fair amount of navigation items, following patterns set by other e-commerce products, but Apple restructured the top-level navigation of their mobile app around discovery, search, and transactions.</p>\n<p>If you have a complex product and a large number of top-level navigation items, consider taking a mobile-first approach and restructuring your IA differently from its desktop version. Maybe a goal-based architecture makes sense – for example, search vs. discovery – or maybe there are broader categories that your functionality and content can more neatly fit into. Just like <a href=\"http://karenmcgrane.com/2012/09/04/adapting-ourselves-to-adaptive-content-video-slides-and-transcript-oh-my/\">truncating text is not a content strategy</a>, throwing an entire desktop IA into the basement of a mobile app is not good information architecture.</p>\n<p>Is the left nav flyout always a bad navigation pattern? It depends, but I haven't seen an example yet where it works well. Feel free to discuss this with me on Twitter <a href=\"https://twitter.com/jxnblk\">@jxnblk</a>.</p>\n"},{"path":"blog/microbeats-is-the-best-journal-ive-ever-kept","slug":"microbeats-is-the-best-journal-ive-ever-kept","title":"Microbeats is the Best Journal I’ve Ever Kept","description":null,"date":"2012-11-07T00:00:00.000Z","excerpt":"<p>I’ve been producing electronic music on my computer for about a decade now, and I don’t have a whole lot to show for it. After moving to DC from Shanghai, where I played a lot of live sets and DJ gigs, I realized there wasn’t much of a music scene in DC, and I stopped playing out. After a few years, I noticed that I generally wasn’t being inspired, and I wasn’t growing much as an artist. I also noticed that I had a tendency to never finish the tracks that I’d started. I was pretty good at creating catchy little loops, but they never evolved into anything beyond that.</p>\n","html":"<p>I’ve been producing electronic music on my computer for about a decade now, and I don’t have a whole lot to show for it. After moving to DC from Shanghai, where I played a lot of live sets and DJ gigs, I realized there wasn’t much of a music scene in DC, and I stopped playing out. After a few years, I noticed that I generally wasn’t being inspired, and I wasn’t growing much as an artist. I also noticed that I had a tendency to never finish the tracks that I’d started. I was pretty good at creating catchy little loops, but they never evolved into anything beyond that.</p>\n<!-- more -->\n<p>To try to pull myself out of this rut, I started a Tumblr called Loop A Day in early 2011. The idea was that I would spend no more than an hour each day creating a loop and posting it to this blog. I kept up with it for about a month, then I realized that the daily routine was wrecking my social life – I remember leaving parties more than once just to go home and work on music. I did like the hour limitation, but doing it every day had to stop. So, I got rid of my self-imposed quota and renamed the project Microbeats.</p>\n<p>A lot of the earlier beats I created were technical experimentations, and I drew a lot of inspiration from the music I was listening to. Then I started noticing something happening. I started subconsciously pulling inspiration from my actual life and putting more emotion into the beats I was creating. By the end of 2011, I started consciously pulling inspiration from the things I was doing, the places I was going, the people I was meeting and the conversations I was having and using that as mental fodder when I sat down to work on a beat.</p>\n<p>It may not be obvious to the outside observer, but for me, Microbeats became a record of all the things happening in my life – though some beats are admittedly (and intentionally) vulnerable. Conversations from friends’ parties, meeting new people, getting dumped, rebounding, breaking my hand, traveling for work, vacationing with family, moving to a new city, and everything in between – my life started to manifest itself in the music.</p>\n<p>Though I don’t do it very often, when I go back through the archives and listen to the beats, I start remembering things that I don’t think I would have otherwise – strange, nuanced emotions and small moments that my brain didn’t deem important enough to take good record of. Microbeats started off as a simple little experiment, but it’s grown into something so much bigger, personally, than I ever would’ve imagined.</p>\n<p><a href=\"http://microbeats.cc\">microbeats.cc</a></p>\n"}],"about":{"path":"blog/about","slug":"about","description":null,"excerpt":"<p>Since 2020, I've been teaching myself game development with Unity and have been working on <a href=\"https://novanticagame.com\">Novantica</a>,\na sci-fi adventure game, set in a futuristic urban open world where time travel is common,\ngod-like AI govern the world, and a mysterious event has disrupted the city.\nYou can <a href=\"https://store.steampowered.com/app/2437530/Novantica/\">wishlist Novantica on Steam</a>.</p>\n<p>Over the years, I've worked on several open source projects that helped defined modern approaches to styling front end applications.\nStarting in 2013, I worked with Adam Morse and John Otander on <a href=\"https://cssstats.com\">CSS Stats</a>, a web application to statically analyze a site's CSS.\nIn 2015, I created <a href=\"https://basscss.com\">Basscss</a>, the first atomic/utility-based CSS framework that helped popularize using multiple classnames\non a single element to style HTML.\nBasscss used a small set of theme values for font-size, color palettes, margin and padding scales, and more,\nwhich is now common practice in front end design systems.\nIf you've seen (or cursed at) code that looks like `class=\"block mb2 blue\"`, then you've seen my work.\nIn 2017, I released v1 of <a href=\"https://github.com/rebassjs/rebass\">Rebass</a> (also my first time on <a href=\"https://news.ycombinator.com/item?id=14704552\">Hacker News</a>),\na library of stateless functional React components with styling,\nwhich helped introduce the concept of styled UI components in React.\nExtracting the utility style props from Rebass, I created <a href=\"https://github.com/styled-system/styled-system\">Styled System</a> in 2017.\nIn 2019, I released <a href=\"https://github.com/system-ui/theme-ui\">Theme UI</a>, an extension of these ideas that provided utilities for dark mode, styling content in MDX,\nand a universal `sx` prop to style elements inline with theme-based values.</p>\n<p>I've also worked on various other open source projects.\nI created <a href=\"https://github.com/jxnblk/mdx-deck\">MDX Deck</a> as a simple way to make slide presentations with MDX.\nHelped John Otander with the conceptual design and syntax of <a href=\"https://mdxjs.com/community/about/\">MDX</a>, a combination of markdown and JSX.\nCreated several color tools, including <a href=\"https://colorable.jxnblk.com/\">Colorable</a> for testing color contrast, Palx, <a href=\"https://jxnblk.github.io/Spectral/\">Spectral</a>, and <a href=\"https://jxnblk.github.io/hello-color\">Hello Color</a>.\nSVG-related tools, including <a href=\"https://jxnblk.github.io/loading/\">Loading</a>, <a href=\"https://github.com/jxnblk/geomicons-wired\">Geomicons</a>, Microicon, <a href=\"https://jxnblk.github.io/paths/\">Paths</a>, and <a href=\"https://jxnblk.github.io/reline/\">Reline</a>.</p>\n<p>As a retired DJ, I also produce electronic music, previously running a project called <a href=\"https://microbeats.cc/\">Microbeats</a>,\nin which each track was created in one hour or less.\nI am one-half of <a href=\"https://soundcloud.com/mrsjxn\">MrsJxn</a>, a collaboration with Adam Morse.\nI also dabble with interactive music apps like <a href=\"https://jxnblk.github.io/skullcat/\">Skullcat</a>.\nCheckout my <a href=\"https://soundcloud.com/jxnblk\">SoundCloud</a>.</p>\n<p>I am currently working as a design engineer at <a href=\"https://val.town\">Val Town</a>.\nPreviously, I worked at Gatsby JS, Priceline, The Grid, Etsy, Kickstarter, Stitch Fix, Living Social, and Opower.\nI studied sociology, Japanese language, and graphic design at Marshall University.</p>\n","html":"<p>Since 2020, I've been teaching myself game development with Unity and have been working on <a href=\"https://novanticagame.com\">Novantica</a>,\na sci-fi adventure game, set in a futuristic urban open world where time travel is common,\ngod-like AI govern the world, and a mysterious event has disrupted the city.\nYou can <a href=\"https://store.steampowered.com/app/2437530/Novantica/\">wishlist Novantica on Steam</a>.</p>\n<p>Over the years, I've worked on several open source projects that helped defined modern approaches to styling front end applications.\nStarting in 2013, I worked with Adam Morse and John Otander on <a href=\"https://cssstats.com\">CSS Stats</a>, a web application to statically analyze a site's CSS.\nIn 2015, I created <a href=\"https://basscss.com\">Basscss</a>, the first atomic/utility-based CSS framework that helped popularize using multiple classnames\non a single element to style HTML.\nBasscss used a small set of theme values for font-size, color palettes, margin and padding scales, and more,\nwhich is now common practice in front end design systems.\nIf you've seen (or cursed at) code that looks like `class=\"block mb2 blue\"`, then you've seen my work.\nIn 2017, I released v1 of <a href=\"https://github.com/rebassjs/rebass\">Rebass</a> (also my first time on <a href=\"https://news.ycombinator.com/item?id=14704552\">Hacker News</a>),\na library of stateless functional React components with styling,\nwhich helped introduce the concept of styled UI components in React.\nExtracting the utility style props from Rebass, I created <a href=\"https://github.com/styled-system/styled-system\">Styled System</a> in 2017.\nIn 2019, I released <a href=\"https://github.com/system-ui/theme-ui\">Theme UI</a>, an extension of these ideas that provided utilities for dark mode, styling content in MDX,\nand a universal `sx` prop to style elements inline with theme-based values.</p>\n<p>I've also worked on various other open source projects.\nI created <a href=\"https://github.com/jxnblk/mdx-deck\">MDX Deck</a> as a simple way to make slide presentations with MDX.\nHelped John Otander with the conceptual design and syntax of <a href=\"https://mdxjs.com/community/about/\">MDX</a>, a combination of markdown and JSX.\nCreated several color tools, including <a href=\"https://colorable.jxnblk.com/\">Colorable</a> for testing color contrast, Palx, <a href=\"https://jxnblk.github.io/Spectral/\">Spectral</a>, and <a href=\"https://jxnblk.github.io/hello-color\">Hello Color</a>.\nSVG-related tools, including <a href=\"https://jxnblk.github.io/loading/\">Loading</a>, <a href=\"https://github.com/jxnblk/geomicons-wired\">Geomicons</a>, Microicon, <a href=\"https://jxnblk.github.io/paths/\">Paths</a>, and <a href=\"https://jxnblk.github.io/reline/\">Reline</a>.</p>\n<p>As a retired DJ, I also produce electronic music, previously running a project called <a href=\"https://microbeats.cc/\">Microbeats</a>,\nin which each track was created in one hour or less.\nI am one-half of <a href=\"https://soundcloud.com/mrsjxn\">MrsJxn</a>, a collaboration with Adam Morse.\nI also dabble with interactive music apps like <a href=\"https://jxnblk.github.io/skullcat/\">Skullcat</a>.\nCheckout my <a href=\"https://soundcloud.com/jxnblk\">SoundCloud</a>.</p>\n<p>I am currently working as a design engineer at <a href=\"https://val.town\">Val Town</a>.\nPreviously, I worked at Gatsby JS, Priceline, The Grid, Etsy, Kickstarter, Stitch Fix, Living Social, and Opower.\nI studied sociology, Japanese language, and graphic design at Marshall University.</p>\n"}}